{"title":"二维计算几何模板","date":"2021-12-14T05:59:50.000Z","toc":true,"source":"_posts/cg-template.md","raw":"---\ntitle: 二维计算几何模板\ncomments: true\ntoc: true\ndate: 2021-12-14 13:59:50\ntags: \n  - 计算几何\n  - 算法\n---\n\n# 前提条件\n\n``` c++\n#include <iostream>\n#include <cmath>\n#include <algorithm>\nusing namespace std;\ntypedef double temType; // 需要用到的类型\n```\n\n# 点（向量）\n\n## 已知\n\n$(x,y)$，点坐标或向量坐标\n\n## 函数\n\n相加、相减、与常数相加、点乘、叉乘、旋转、标准化\n\n### 向量旋转\n\n$$\n\\begin{bmatrix} \\cos \\theta & -\\sin \\theta \\\\ \\sin \\theta & \\cos \\theta  \\end{bmatrix} \n\\begin{bmatrix} x \\\\ y \\end{bmatrix} =\n\\begin{bmatrix} x\\cos\\theta-y\\sin\\theta \\\\ x\\sin\\theta+y\\cos\\theta \\end{bmatrix}\n$$\n\n## 代码\n\n```C++\n// 点或向量\nstruct point{\n    temType x, y;\n    point(): x(0), y(0){}\n    point(temType _x, temType _y): x(_x), y(_y){}\n    point(const point &t){x = t.x;y = t.y;};\n    point operator-(const point& t) const{return {x-t.x, y-t.y};}   // 相减\n    point operator+(const point& t) const{return {t.x+x, t.y+y};}   // 相加\n    point operator*(temType t) const{return {x*t, y*t};}            // 与常数相乘\n    temType cdot(const point& t) const{return t.x*x+t.y*y;}                // 点乘\n    temType times(const point& t) const{return x*t.y-y*t.x;}               // 叉乘\n    bool operator==(const point& t) const{return x==t.x && y==t.y;}\n    bool operator!=(const point& t) const{return x!=t.x || y!=t.y;}\n    temType length() const{return sqrt(x*x+y*y); }\n    void normalize() {                                                  //标准化\n        temType sqt = sqrt(x*x+y*y);\n        x = x/sqt; y = y/sqt;\n    }\n    point rotation(temType t) const{                                    //向量旋转\n        temType cost=cos(t), sint=sin(t);\n        return {x*cost-y*sint, x*sint+y*cost};\n    }\n};\ntypedef struct point pit;\ntypedef struct point vtr;\n```\n\n# 极坐标点\n\n```C++\nstruct polar{\n    temType p, e;\n    polar(temType _p, temType _e): p(_p), e(_e){}\n};\ntypedef struct polar plr;\n\npolar toPolar(const pit& t){ return {sqrt(t.x*t.x+t.y*t.y),atan2(t.y,t.x)}; }\npit toRect(const plr& t){ return {t.p*cos(t.e), t.p*sin(t.e)}; }\n```\n\n# 线段\n\n## 已知\n\n已知线段两端端点$A,B$\n\n## 函数\n\n跨立实验，快速排斥实验\n\n## 代码\n\n```C++\n// 线段\nstruct segment{\n    pit A, B;\n    segment(const pit& _A, const pit& _B): A(_A), B(_B){}\n    pit midpoint() const{return {(A.x+B.x)/2.0, (A.y,B.y)/2.0};} // 中点\n    bool rapidRejectionExp(const segment& t) const { // 快速排斥实验 TODO 这里有一些错误\n        pit minTmp(min(A.x, B.x), min(A.y, B.y));\n        pit maxTmp(max(A.x, B.x), max(A.y, B.y));\n        return  (t.A.x >= minTmp.x && t.A.x <= maxTmp.x) && (t.A.y >= minTmp.y && t.A.y <= maxTmp.y) ||\n                (t.B.x >= minTmp.x && t.B.x <= maxTmp.x) && (t.B.y >= minTmp.y && t.B.y <= maxTmp.y);\n    }\n    bool straddleExp(const segment& t) const{ // 跨立实验\n//        if(!rapidRejectionExp(t)) return false;\n        vtr AB = B-A, tba = t.A-t.B;\n        temType t1 = AB.times(t.A-A) * AB.times(t.B-A), t2 = tba.times(A-t.B)*tba.times(B-t.B);\n        if(t1 < 0 && t2 < 0) return true;\n        else return false;\n    }\n};\ntypedef struct segment seg;\n```\n\n# 直线与射线\n\n## 已知\n\n已知直线上一点和向量，$P,\\vec{s}$\n\n## 函数\n\n获得直线上的一点\n\n### 求两直线交点\n\n![image-20211208010814258.png](cg-template/image-20211208010814258.png)\n\n公式\n$$\nP=A-\\frac{\\vec{b}\\cdot\\vec{BA}}{\\vec{b}\\cdot\\vec{a}}\\cdot\\vec{a}\n$$\n\n\n## 代码\n\n```C++\nstruct line{\n    pit P;\n    vtr s;\n    line(const pit& _P, const vtr& _s): P(_P), s(_s) {s.normalize();}\n    pit getPoint(temType t) const {return P + s*t;}\n    bool ispParallel(const line& t) const{return s.times(t.s)==0;} // 平行\n    bool isCoincide(const line& t) const{return s.times(t.s)==0 && ((s.times(P-t.P)==0));} // 重合\n    pit intersection(const line& t) const{ return P - s * (t.s.times(P-t.P) / t.s.times(s)); }\n};\ntypedef struct line line; // 直线\ntypedef struct line ray; // 射线\n```\n\n# 圆\n\n## 已知\n\n圆心$O$，半径$r$\n\n## 代码\n\n```C++\nstruct circle{\n    pit O;\n    temType r;\n    circle(const pit& _O, temType _r): O(_O), r(_r){}\n};\ntypedef struct circle cle;\n```\n\n# 直线与圆\n\n![image-20211207210954395](cg-template/image-20211207210954395.png)\n\n## 已知\n\n直线：$P$点坐标$(P_x,P_y)$，$\\vec{s}=(s_x,s_y)$\n\n圆：$O$点坐标$(O_x,O_y)$，圆的半径$r$\n\n## 推导\n\n$$\n|OE|= \\frac{\\vec{s} \\times \\vec{PO}}{|\\vec{s}|} \\\\\n|PE|= \\frac{\\vec{s} \\cdot \\vec{PO}}{|\\vec{s}|}\\\\\n|AE|=|BE|=\\sqrt{r^2-|OE|^2}\\\\\n|PA|=|PE|-|AE|\\\\\n|PB|=|PE|+|BE|\\\\\nA=P+\\frac{|PA|}{|\\vec{s}|}\\cdot\\vec{s}\\\\\nB=P+\\frac{|PB|}{|\\vec{s}|}\\cdot\\vec{s}\n$$\n\n## 代码\n\n```C++\nseg intersectionOfLineAndCircle(const line& p, const cle& c){\n    vtr PO = c.O - p.P;\n    temType OE = p.s.times(PO), PE = p.s.times(PO);\n    temType tmp = sqrt(c.r*c.r-OE*OE);\n    return {p.getPoint(PE-tmp), p.getPoint(PE+tmp)};\n}\n```\n\n\n\n# 凸包\n\n## 已知\n\n已知一个二维坐标图中每个顶点，求**最小周长**能够包含所有所有顶点的凸包\n\n## 思路\n\n先将点双关键字排序，横坐标为第一关键字，纵坐标为第二关键字\n\n排序之后\n\n![image-20211212014228314](cg-template/image-20211212014228314.png)\n\n图片向量方向迭代方向\n\n之后维护单调单调栈，其中栈顶为$S_1$，栈顶第二元素为$S_2$，当前检查的点为$P$，由于凸包是不会出现右转的，所以当出现$\\vec{S_2S_1}\\times\\vec{S_1P}<0$说明栈顶的元素不是最优凸包，弹出栈顶重复上一步。\n\n![image-20211212015343214](cg-template/image-20211212015343214.png)\n\n![image-20211212015443970](cg-template/image-20211212015443970.png)\n\n![image-20211212020720648](cg-template/image-20211212020720648.png)\n\n第一次循环迭代之后，会发现求完了下凸包先在需要倒转迭代方向，再次遍历\n\n![image-20211212020937318](cg-template/image-20211212020937318.png)\n\n![image-20211212021008797](cg-template/image-20211212021008797.png)\n\n![image-20211212021050303](cg-template/image-20211212021050303.png)\n\n![image-20211212021139971](cg-template/image-20211212021139971.png)\n\n第二次迭代完善上凸包，最终会形成一个最短周长的能够包含所有顶点的凸包\n\n注意：运行结果最后还会添加一次初始节点，那么周长就为$$\\sum_{i=0}^{tp-1}|\\vec{p_ip_{i+1}}|$$\n\n\n\n\n\n## 代码\n\n```C++\nconst int N = 1e5+10;\npit p[N];\nint stk[N<<1];\nint tp;\n\nbool cmp(pit &a, pit &b){\n    if(a.x == b.x) return a.y < b.y;\n    return a.x < b.x;\n}\n\nint main() {\n    debug;\n    int n;\n    temType xt, yt;\n    cin >> n;\n    for(int i = 0; i < n; ++i) {\n        cin >> xt >> yt;\n        p[i] = point(xt, yt);\n    }\n    sort(p, p+n, cmp);\n    stk[++tp] = 0;\n    for(int i = 1; i < n; ++i) {\n        while (tp >= 2 && ((p[stk[tp]]-p[stk[tp-1]]).times(p[i]-p[stk[tp]]) < 0)) tp--;\n        stk[++tp] = i;\n    }\n    int tmp = tp;\n    for(int i = n-1; i >= 0; --i){\n        while (tp > tmp && ((p[stk[tp]]-p[stk[tp-1]]).times(p[i]-p[stk[tp]]) < 0)) tp--;\n        stk[++tp] = i;\n    }\n    temType ans = 0;\n    for(int i = 1; i <= tp; ++i) {\n        ans += (p[stk[i]] - p[stk[i-1]]).length();\n    }\n    printf(\"%.2f\", ans);\n}\n```\n\n","slug":"cg-template","published":true,"updated":"2025-10-28T08:00:40.764Z","_id":"cuidnrc10fP23LwfrlhYiHgq-","comments":true,"layout":"post","photos":[],"html":"<h1 id=\"前提条件\"><a href=\"#前提条件\" class=\"headerlink\" title=\"前提条件\"></a>前提条件</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">double</span> temType; <span class=\"comment\">// 需要用到的类型</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"点（向量）\"><a href=\"#点（向量）\" class=\"headerlink\" title=\"点（向量）\"></a>点（向量）</h1><h2 id=\"已知\"><a href=\"#已知\" class=\"headerlink\" title=\"已知\"></a>已知</h2><p>$(x,y)$，点坐标或向量坐标</p>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><p>相加、相减、与常数相加、点乘、叉乘、旋转、标准化</p>\n<h3 id=\"向量旋转\"><a href=\"#向量旋转\" class=\"headerlink\" title=\"向量旋转\"></a>向量旋转</h3><p>$$<br>\\begin{bmatrix} \\cos \\theta &amp; -\\sin \\theta \\ \\sin \\theta &amp; \\cos \\theta  \\end{bmatrix}<br>\\begin{bmatrix} x \\ y \\end{bmatrix} &#x3D;<br>\\begin{bmatrix} x\\cos\\theta-y\\sin\\theta \\ x\\sin\\theta+y\\cos\\theta \\end{bmatrix}<br>$$</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 点或向量</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">point</span>&#123;</span><br><span class=\"line\">    temType x, y;</span><br><span class=\"line\">    <span class=\"built_in\">point</span>(): <span class=\"built_in\">x</span>(<span class=\"number\">0</span>), <span class=\"built_in\">y</span>(<span class=\"number\">0</span>)&#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">point</span>(temType _x, temType _y): <span class=\"built_in\">x</span>(_x), <span class=\"built_in\">y</span>(_y)&#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">point</span>(<span class=\"type\">const</span> point &amp;t)&#123;x = t.x;y = t.y;&#125;;</span><br><span class=\"line\">    point <span class=\"keyword\">operator</span>-(<span class=\"type\">const</span> point&amp; t) <span class=\"type\">const</span>&#123;<span class=\"keyword\">return</span> &#123;x-t.x, y-t.y&#125;;&#125;   <span class=\"comment\">// 相减</span></span><br><span class=\"line\">    point <span class=\"keyword\">operator</span>+(<span class=\"type\">const</span> point&amp; t) <span class=\"type\">const</span>&#123;<span class=\"keyword\">return</span> &#123;t.x+x, t.y+y&#125;;&#125;   <span class=\"comment\">// 相加</span></span><br><span class=\"line\">    point <span class=\"keyword\">operator</span>*(temType t) <span class=\"type\">const</span>&#123;<span class=\"keyword\">return</span> &#123;x*t, y*t&#125;;&#125;            <span class=\"comment\">// 与常数相乘</span></span><br><span class=\"line\">    <span class=\"function\">temType <span class=\"title\">cdot</span><span class=\"params\">(<span class=\"type\">const</span> point&amp; t)</span> <span class=\"type\">const</span></span>&#123;<span class=\"keyword\">return</span> t.x*x+t.y*y;&#125;                <span class=\"comment\">// 点乘</span></span><br><span class=\"line\">    <span class=\"function\">temType <span class=\"title\">times</span><span class=\"params\">(<span class=\"type\">const</span> point&amp; t)</span> <span class=\"type\">const</span></span>&#123;<span class=\"keyword\">return</span> x*t.y-y*t.x;&#125;               <span class=\"comment\">// 叉乘</span></span><br><span class=\"line\">    <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>==(<span class=\"type\">const</span> point&amp; t) <span class=\"type\">const</span>&#123;<span class=\"keyword\">return</span> x==t.x &amp;&amp; y==t.y;&#125;</span><br><span class=\"line\">    <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>!=(<span class=\"type\">const</span> point&amp; t) <span class=\"type\">const</span>&#123;<span class=\"keyword\">return</span> x!=t.x || y!=t.y;&#125;</span><br><span class=\"line\">    <span class=\"function\">temType <span class=\"title\">length</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>&#123;<span class=\"keyword\">return</span> <span class=\"built_in\">sqrt</span>(x*x+y*y); &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">normalize</span><span class=\"params\">()</span> </span>&#123;                                                  <span class=\"comment\">//标准化</span></span><br><span class=\"line\">        temType sqt = <span class=\"built_in\">sqrt</span>(x*x+y*y);</span><br><span class=\"line\">        x = x/sqt; y = y/sqt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">point <span class=\"title\">rotation</span><span class=\"params\">(temType t)</span> <span class=\"type\">const</span></span>&#123;                                    <span class=\"comment\">//向量旋转</span></span><br><span class=\"line\">        temType cost=<span class=\"built_in\">cos</span>(t), sint=<span class=\"built_in\">sin</span>(t);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;x*cost-y*sint, x*sint+y*cost&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">point</span> pit;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">point</span> vtr;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"极坐标点\"><a href=\"#极坐标点\" class=\"headerlink\" title=\"极坐标点\"></a>极坐标点</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">polar</span>&#123;</span><br><span class=\"line\">    temType p, e;</span><br><span class=\"line\">    <span class=\"built_in\">polar</span>(temType _p, temType _e): <span class=\"built_in\">p</span>(_p), <span class=\"built_in\">e</span>(_e)&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">polar</span> plr;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">polar <span class=\"title\">toPolar</span><span class=\"params\">(<span class=\"type\">const</span> pit&amp; t)</span></span>&#123; <span class=\"keyword\">return</span> &#123;<span class=\"built_in\">sqrt</span>(t.x*t.x+t.y*t.y),<span class=\"built_in\">atan2</span>(t.y,t.x)&#125;; &#125;</span><br><span class=\"line\"><span class=\"function\">pit <span class=\"title\">toRect</span><span class=\"params\">(<span class=\"type\">const</span> plr&amp; t)</span></span>&#123; <span class=\"keyword\">return</span> &#123;t.p*<span class=\"built_in\">cos</span>(t.e), t.p*<span class=\"built_in\">sin</span>(t.e)&#125;; &#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"线段\"><a href=\"#线段\" class=\"headerlink\" title=\"线段\"></a>线段</h1><h2 id=\"已知-1\"><a href=\"#已知-1\" class=\"headerlink\" title=\"已知\"></a>已知</h2><p>已知线段两端端点$A,B$</p>\n<h2 id=\"函数-1\"><a href=\"#函数-1\" class=\"headerlink\" title=\"函数\"></a>函数</h2><p>跨立实验，快速排斥实验</p>\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 线段</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">segment</span>&#123;</span><br><span class=\"line\">    pit A, B;</span><br><span class=\"line\">    <span class=\"built_in\">segment</span>(<span class=\"type\">const</span> pit&amp; _A, <span class=\"type\">const</span> pit&amp; _B): <span class=\"built_in\">A</span>(_A), <span class=\"built_in\">B</span>(_B)&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\">pit <span class=\"title\">midpoint</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>&#123;<span class=\"keyword\">return</span> &#123;(A.x+B.x)/<span class=\"number\">2.0</span>, (A.y,B.y)/<span class=\"number\">2.0</span>&#125;;&#125; <span class=\"comment\">// 中点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">rapidRejectionExp</span><span class=\"params\">(<span class=\"type\">const</span> segment&amp; t)</span> <span class=\"type\">const</span> </span>&#123; <span class=\"comment\">// 快速排斥实验 TODO 这里有一些错误</span></span><br><span class=\"line\">        <span class=\"function\">pit <span class=\"title\">minTmp</span><span class=\"params\">(min(A.x, B.x), min(A.y, B.y))</span></span>;</span><br><span class=\"line\">        <span class=\"function\">pit <span class=\"title\">maxTmp</span><span class=\"params\">(max(A.x, B.x), max(A.y, B.y))</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  (t.A.x &gt;= minTmp.x &amp;&amp; t.A.x &lt;= maxTmp.x) &amp;&amp; (t.A.y &gt;= minTmp.y &amp;&amp; t.A.y &lt;= maxTmp.y) ||</span><br><span class=\"line\">                (t.B.x &gt;= minTmp.x &amp;&amp; t.B.x &lt;= maxTmp.x) &amp;&amp; (t.B.y &gt;= minTmp.y &amp;&amp; t.B.y &lt;= maxTmp.y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">straddleExp</span><span class=\"params\">(<span class=\"type\">const</span> segment&amp; t)</span> <span class=\"type\">const</span></span>&#123; <span class=\"comment\">// 跨立实验</span></span><br><span class=\"line\"><span class=\"comment\">//        if(!rapidRejectionExp(t)) return false;</span></span><br><span class=\"line\">        vtr AB = B-A, tba = t.A-t.B;</span><br><span class=\"line\">        temType t1 = AB.<span class=\"built_in\">times</span>(t.A-A) * AB.<span class=\"built_in\">times</span>(t.B-A), t2 = tba.<span class=\"built_in\">times</span>(A-t.B)*tba.<span class=\"built_in\">times</span>(B-t.B);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(t1 &lt; <span class=\"number\">0</span> &amp;&amp; t2 &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">segment</span> seg;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"直线与射线\"><a href=\"#直线与射线\" class=\"headerlink\" title=\"直线与射线\"></a>直线与射线</h1><h2 id=\"已知-2\"><a href=\"#已知-2\" class=\"headerlink\" title=\"已知\"></a>已知</h2><p>已知直线上一点和向量，$P,\\vec{s}$</p>\n<h2 id=\"函数-2\"><a href=\"#函数-2\" class=\"headerlink\" title=\"函数\"></a>函数</h2><p>获得直线上的一点</p>\n<h3 id=\"求两直线交点\"><a href=\"#求两直线交点\" class=\"headerlink\" title=\"求两直线交点\"></a>求两直线交点</h3><p><img src=\"/p/cg-template/image-20211208010814258.png\" alt=\"image-20211208010814258.png\"></p>\n<p>公式<br>$$<br>P&#x3D;A-\\frac{\\vec{b}\\cdot\\vec{BA}}{\\vec{b}\\cdot\\vec{a}}\\cdot\\vec{a}<br>$$</p>\n<h2 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">line</span>&#123;</span><br><span class=\"line\">    pit P;</span><br><span class=\"line\">    vtr s;</span><br><span class=\"line\">    <span class=\"built_in\">line</span>(<span class=\"type\">const</span> pit&amp; _P, <span class=\"type\">const</span> vtr&amp; _s): <span class=\"built_in\">P</span>(_P), <span class=\"built_in\">s</span>(_s) &#123;s.<span class=\"built_in\">normalize</span>();&#125;</span><br><span class=\"line\">    <span class=\"function\">pit <span class=\"title\">getPoint</span><span class=\"params\">(temType t)</span> <span class=\"type\">const</span> </span>&#123;<span class=\"keyword\">return</span> P + s*t;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">ispParallel</span><span class=\"params\">(<span class=\"type\">const</span> line&amp; t)</span> <span class=\"type\">const</span></span>&#123;<span class=\"keyword\">return</span> s.<span class=\"built_in\">times</span>(t.s)==<span class=\"number\">0</span>;&#125; <span class=\"comment\">// 平行</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isCoincide</span><span class=\"params\">(<span class=\"type\">const</span> line&amp; t)</span> <span class=\"type\">const</span></span>&#123;<span class=\"keyword\">return</span> s.<span class=\"built_in\">times</span>(t.s)==<span class=\"number\">0</span> &amp;&amp; ((s.<span class=\"built_in\">times</span>(P-t.P)==<span class=\"number\">0</span>));&#125; <span class=\"comment\">// 重合</span></span><br><span class=\"line\">    <span class=\"function\">pit <span class=\"title\">intersection</span><span class=\"params\">(<span class=\"type\">const</span> line&amp; t)</span> <span class=\"type\">const</span></span>&#123; <span class=\"keyword\">return</span> P - s * (t.s.<span class=\"built_in\">times</span>(P-t.P) / t.s.<span class=\"built_in\">times</span>(s)); &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">line</span> line; <span class=\"comment\">// 直线</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">line</span> ray; <span class=\"comment\">// 射线</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"圆\"><a href=\"#圆\" class=\"headerlink\" title=\"圆\"></a>圆</h1><h2 id=\"已知-3\"><a href=\"#已知-3\" class=\"headerlink\" title=\"已知\"></a>已知</h2><p>圆心$O$，半径$r$</p>\n<h2 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">circle</span>&#123;</span><br><span class=\"line\">    pit O;</span><br><span class=\"line\">    temType r;</span><br><span class=\"line\">    <span class=\"built_in\">circle</span>(<span class=\"type\">const</span> pit&amp; _O, temType _r): <span class=\"built_in\">O</span>(_O), <span class=\"built_in\">r</span>(_r)&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">circle</span> cle;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"直线与圆\"><a href=\"#直线与圆\" class=\"headerlink\" title=\"直线与圆\"></a>直线与圆</h1><p><img src=\"/p/cg-template/image-20211207210954395.png\" alt=\"image-20211207210954395\"></p>\n<h2 id=\"已知-4\"><a href=\"#已知-4\" class=\"headerlink\" title=\"已知\"></a>已知</h2><p>直线：$P$点坐标$(P_x,P_y)$，$\\vec{s}&#x3D;(s_x,s_y)$</p>\n<p>圆：$O$点坐标$(O_x,O_y)$，圆的半径$r$</p>\n<h2 id=\"推导\"><a href=\"#推导\" class=\"headerlink\" title=\"推导\"></a>推导</h2><p>$$<br>|OE|&#x3D; \\frac{\\vec{s} \\times \\vec{PO}}{|\\vec{s}|} \\<br>|PE|&#x3D; \\frac{\\vec{s} \\cdot \\vec{PO}}{|\\vec{s}|}\\<br>|AE|&#x3D;|BE|&#x3D;\\sqrt{r^2-|OE|^2}\\<br>|PA|&#x3D;|PE|-|AE|\\<br>|PB|&#x3D;|PE|+|BE|\\<br>A&#x3D;P+\\frac{|PA|}{|\\vec{s}|}\\cdot\\vec{s}\\<br>B&#x3D;P+\\frac{|PB|}{|\\vec{s}|}\\cdot\\vec{s}<br>$$</p>\n<h2 id=\"代码-4\"><a href=\"#代码-4\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">seg <span class=\"title\">intersectionOfLineAndCircle</span><span class=\"params\">(<span class=\"type\">const</span> line&amp; p, <span class=\"type\">const</span> cle&amp; c)</span></span>&#123;</span><br><span class=\"line\">    vtr PO = c.O - p.P;</span><br><span class=\"line\">    temType OE = p.s.<span class=\"built_in\">times</span>(PO), PE = p.s.<span class=\"built_in\">times</span>(PO);</span><br><span class=\"line\">    temType tmp = <span class=\"built_in\">sqrt</span>(c.r*c.r-OE*OE);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;p.<span class=\"built_in\">getPoint</span>(PE-tmp), p.<span class=\"built_in\">getPoint</span>(PE+tmp)&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"凸包\"><a href=\"#凸包\" class=\"headerlink\" title=\"凸包\"></a>凸包</h1><h2 id=\"已知-5\"><a href=\"#已知-5\" class=\"headerlink\" title=\"已知\"></a>已知</h2><p>已知一个二维坐标图中每个顶点，求<strong>最小周长</strong>能够包含所有所有顶点的凸包</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>先将点双关键字排序，横坐标为第一关键字，纵坐标为第二关键字</p>\n<p>排序之后</p>\n<p><img src=\"/p/cg-template/image-20211212014228314.png\" alt=\"image-20211212014228314\"></p>\n<p>图片向量方向迭代方向</p>\n<p>之后维护单调单调栈，其中栈顶为$S_1$，栈顶第二元素为$S_2$，当前检查的点为$P$，由于凸包是不会出现右转的，所以当出现$\\vec{S_2S_1}\\times\\vec{S_1P}&lt;0$说明栈顶的元素不是最优凸包，弹出栈顶重复上一步。</p>\n<p><img src=\"/p/cg-template/image-20211212015343214.png\" alt=\"image-20211212015343214\"></p>\n<p><img src=\"/p/cg-template/image-20211212015443970.png\" alt=\"image-20211212015443970\"></p>\n<p><img src=\"/p/cg-template/image-20211212020720648.png\" alt=\"image-20211212020720648\"></p>\n<p>第一次循环迭代之后，会发现求完了下凸包先在需要倒转迭代方向，再次遍历</p>\n<p><img src=\"/p/cg-template/image-20211212020937318.png\" alt=\"image-20211212020937318\"></p>\n<p><img src=\"/p/cg-template/image-20211212021008797.png\" alt=\"image-20211212021008797\"></p>\n<p><img src=\"/p/cg-template/image-20211212021050303.png\" alt=\"image-20211212021050303\"></p>\n<p><img src=\"/p/cg-template/image-20211212021139971.png\" alt=\"image-20211212021139971\"></p>\n<p>第二次迭代完善上凸包，最终会形成一个最短周长的能够包含所有顶点的凸包</p>\n<p>注意：运行结果最后还会添加一次初始节点，那么周长就为$$\\sum_{i&#x3D;0}^{tp-1}|\\vec{p_ip_{i+1}}|$$</p>\n<h2 id=\"代码-5\"><a href=\"#代码-5\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e5</span><span class=\"number\">+10</span>;</span><br><span class=\"line\">pit p[N];</span><br><span class=\"line\"><span class=\"type\">int</span> stk[N&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> tp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(pit &amp;a, pit &amp;b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.x == b.x) <span class=\"keyword\">return</span> a.y &lt; b.y;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.x &lt; b.x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    debug;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    temType xt, yt;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">        cin &gt;&gt; xt &gt;&gt; yt;</span><br><span class=\"line\">        p[i] = <span class=\"built_in\">point</span>(xt, yt);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(p, p+n, cmp);</span><br><span class=\"line\">    stk[++tp] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (tp &gt;= <span class=\"number\">2</span> &amp;&amp; ((p[stk[tp]]-p[stk[tp<span class=\"number\">-1</span>]]).<span class=\"built_in\">times</span>(p[i]-p[stk[tp]]) &lt; <span class=\"number\">0</span>)) tp--;</span><br><span class=\"line\">        stk[++tp] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> tmp = tp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = n<span class=\"number\">-1</span>; i &gt;= <span class=\"number\">0</span>; --i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (tp &gt; tmp &amp;&amp; ((p[stk[tp]]-p[stk[tp<span class=\"number\">-1</span>]]).<span class=\"built_in\">times</span>(p[i]-p[stk[tp]]) &lt; <span class=\"number\">0</span>)) tp--;</span><br><span class=\"line\">        stk[++tp] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    temType ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= tp; ++i) &#123;</span><br><span class=\"line\">        ans += (p[stk[i]] - p[stk[i<span class=\"number\">-1</span>]]).<span class=\"built_in\">length</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%.2f&quot;</span>, ans);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h1 id=\"前提条件\"><a href=\"#前提条件\" class=\"headerlink\" title=\"前提条件\"></a>前提条件</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">double</span> temType; <span class=\"comment\">// 需要用到的类型</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"点（向量）\"><a href=\"#点（向量）\" class=\"headerlink\" title=\"点（向量）\"></a>点（向量）</h1><h2 id=\"已知\"><a href=\"#已知\" class=\"headerlink\" title=\"已知\"></a>已知</h2><p>$(x,y)$，点坐标或向量坐标</p>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><p>相加、相减、与常数相加、点乘、叉乘、旋转、标准化</p>\n<h3 id=\"向量旋转\"><a href=\"#向量旋转\" class=\"headerlink\" title=\"向量旋转\"></a>向量旋转</h3><p>$$<br>\\begin{bmatrix} \\cos \\theta &amp; -\\sin \\theta \\ \\sin \\theta &amp; \\cos \\theta  \\end{bmatrix}<br>\\begin{bmatrix} x \\ y \\end{bmatrix} &#x3D;<br>\\begin{bmatrix} x\\cos\\theta-y\\sin\\theta \\ x\\sin\\theta+y\\cos\\theta \\end{bmatrix}<br>$$</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 点或向量</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">point</span>&#123;</span><br><span class=\"line\">    temType x, y;</span><br><span class=\"line\">    <span class=\"built_in\">point</span>(): <span class=\"built_in\">x</span>(<span class=\"number\">0</span>), <span class=\"built_in\">y</span>(<span class=\"number\">0</span>)&#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">point</span>(temType _x, temType _y): <span class=\"built_in\">x</span>(_x), <span class=\"built_in\">y</span>(_y)&#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">point</span>(<span class=\"type\">const</span> point &amp;t)&#123;x = t.x;y = t.y;&#125;;</span><br><span class=\"line\">    point <span class=\"keyword\">operator</span>-(<span class=\"type\">const</span> point&amp; t) <span class=\"type\">const</span>&#123;<span class=\"keyword\">return</span> &#123;x-t.x, y-t.y&#125;;&#125;   <span class=\"comment\">// 相减</span></span><br><span class=\"line\">    point <span class=\"keyword\">operator</span>+(<span class=\"type\">const</span> point&amp; t) <span class=\"type\">const</span>&#123;<span class=\"keyword\">return</span> &#123;t.x+x, t.y+y&#125;;&#125;   <span class=\"comment\">// 相加</span></span><br><span class=\"line\">    point <span class=\"keyword\">operator</span>*(temType t) <span class=\"type\">const</span>&#123;<span class=\"keyword\">return</span> &#123;x*t, y*t&#125;;&#125;            <span class=\"comment\">// 与常数相乘</span></span><br><span class=\"line\">    <span class=\"function\">temType <span class=\"title\">cdot</span><span class=\"params\">(<span class=\"type\">const</span> point&amp; t)</span> <span class=\"type\">const</span></span>&#123;<span class=\"keyword\">return</span> t.x*x+t.y*y;&#125;                <span class=\"comment\">// 点乘</span></span><br><span class=\"line\">    <span class=\"function\">temType <span class=\"title\">times</span><span class=\"params\">(<span class=\"type\">const</span> point&amp; t)</span> <span class=\"type\">const</span></span>&#123;<span class=\"keyword\">return</span> x*t.y-y*t.x;&#125;               <span class=\"comment\">// 叉乘</span></span><br><span class=\"line\">    <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>==(<span class=\"type\">const</span> point&amp; t) <span class=\"type\">const</span>&#123;<span class=\"keyword\">return</span> x==t.x &amp;&amp; y==t.y;&#125;</span><br><span class=\"line\">    <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>!=(<span class=\"type\">const</span> point&amp; t) <span class=\"type\">const</span>&#123;<span class=\"keyword\">return</span> x!=t.x || y!=t.y;&#125;</span><br><span class=\"line\">    <span class=\"function\">temType <span class=\"title\">length</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>&#123;<span class=\"keyword\">return</span> <span class=\"built_in\">sqrt</span>(x*x+y*y); &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">normalize</span><span class=\"params\">()</span> </span>&#123;                                                  <span class=\"comment\">//标准化</span></span><br><span class=\"line\">        temType sqt = <span class=\"built_in\">sqrt</span>(x*x+y*y);</span><br><span class=\"line\">        x = x/sqt; y = y/sqt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">point <span class=\"title\">rotation</span><span class=\"params\">(temType t)</span> <span class=\"type\">const</span></span>&#123;                                    <span class=\"comment\">//向量旋转</span></span><br><span class=\"line\">        temType cost=<span class=\"built_in\">cos</span>(t), sint=<span class=\"built_in\">sin</span>(t);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;x*cost-y*sint, x*sint+y*cost&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">point</span> pit;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">point</span> vtr;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"极坐标点\"><a href=\"#极坐标点\" class=\"headerlink\" title=\"极坐标点\"></a>极坐标点</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">polar</span>&#123;</span><br><span class=\"line\">    temType p, e;</span><br><span class=\"line\">    <span class=\"built_in\">polar</span>(temType _p, temType _e): <span class=\"built_in\">p</span>(_p), <span class=\"built_in\">e</span>(_e)&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">polar</span> plr;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">polar <span class=\"title\">toPolar</span><span class=\"params\">(<span class=\"type\">const</span> pit&amp; t)</span></span>&#123; <span class=\"keyword\">return</span> &#123;<span class=\"built_in\">sqrt</span>(t.x*t.x+t.y*t.y),<span class=\"built_in\">atan2</span>(t.y,t.x)&#125;; &#125;</span><br><span class=\"line\"><span class=\"function\">pit <span class=\"title\">toRect</span><span class=\"params\">(<span class=\"type\">const</span> plr&amp; t)</span></span>&#123; <span class=\"keyword\">return</span> &#123;t.p*<span class=\"built_in\">cos</span>(t.e), t.p*<span class=\"built_in\">sin</span>(t.e)&#125;; &#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"线段\"><a href=\"#线段\" class=\"headerlink\" title=\"线段\"></a>线段</h1><h2 id=\"已知-1\"><a href=\"#已知-1\" class=\"headerlink\" title=\"已知\"></a>已知</h2><p>已知线段两端端点$A,B$</p>\n<h2 id=\"函数-1\"><a href=\"#函数-1\" class=\"headerlink\" title=\"函数\"></a>函数</h2><p>跨立实验，快速排斥实验</p>\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 线段</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">segment</span>&#123;</span><br><span class=\"line\">    pit A, B;</span><br><span class=\"line\">    <span class=\"built_in\">segment</span>(<span class=\"type\">const</span> pit&amp; _A, <span class=\"type\">const</span> pit&amp; _B): <span class=\"built_in\">A</span>(_A), <span class=\"built_in\">B</span>(_B)&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\">pit <span class=\"title\">midpoint</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>&#123;<span class=\"keyword\">return</span> &#123;(A.x+B.x)/<span class=\"number\">2.0</span>, (A.y,B.y)/<span class=\"number\">2.0</span>&#125;;&#125; <span class=\"comment\">// 中点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">rapidRejectionExp</span><span class=\"params\">(<span class=\"type\">const</span> segment&amp; t)</span> <span class=\"type\">const</span> </span>&#123; <span class=\"comment\">// 快速排斥实验 TODO 这里有一些错误</span></span><br><span class=\"line\">        <span class=\"function\">pit <span class=\"title\">minTmp</span><span class=\"params\">(min(A.x, B.x), min(A.y, B.y))</span></span>;</span><br><span class=\"line\">        <span class=\"function\">pit <span class=\"title\">maxTmp</span><span class=\"params\">(max(A.x, B.x), max(A.y, B.y))</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  (t.A.x &gt;= minTmp.x &amp;&amp; t.A.x &lt;= maxTmp.x) &amp;&amp; (t.A.y &gt;= minTmp.y &amp;&amp; t.A.y &lt;= maxTmp.y) ||</span><br><span class=\"line\">                (t.B.x &gt;= minTmp.x &amp;&amp; t.B.x &lt;= maxTmp.x) &amp;&amp; (t.B.y &gt;= minTmp.y &amp;&amp; t.B.y &lt;= maxTmp.y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">straddleExp</span><span class=\"params\">(<span class=\"type\">const</span> segment&amp; t)</span> <span class=\"type\">const</span></span>&#123; <span class=\"comment\">// 跨立实验</span></span><br><span class=\"line\"><span class=\"comment\">//        if(!rapidRejectionExp(t)) return false;</span></span><br><span class=\"line\">        vtr AB = B-A, tba = t.A-t.B;</span><br><span class=\"line\">        temType t1 = AB.<span class=\"built_in\">times</span>(t.A-A) * AB.<span class=\"built_in\">times</span>(t.B-A), t2 = tba.<span class=\"built_in\">times</span>(A-t.B)*tba.<span class=\"built_in\">times</span>(B-t.B);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(t1 &lt; <span class=\"number\">0</span> &amp;&amp; t2 &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">segment</span> seg;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"直线与射线\"><a href=\"#直线与射线\" class=\"headerlink\" title=\"直线与射线\"></a>直线与射线</h1><h2 id=\"已知-2\"><a href=\"#已知-2\" class=\"headerlink\" title=\"已知\"></a>已知</h2><p>已知直线上一点和向量，$P,\\vec{s}$</p>\n<h2 id=\"函数-2\"><a href=\"#函数-2\" class=\"headerlink\" title=\"函数\"></a>函数</h2><p>获得直线上的一点</p>\n<h3 id=\"求两直线交点\"><a href=\"#求两直线交点\" class=\"headerlink\" title=\"求两直线交点\"></a>求两直线交点</h3><p><img src=\"/p/cg-template/image-20211208010814258.png\" alt=\"image-20211208010814258.png\"></p>\n<p>公式<br>$$<br>P&#x3D;A-\\frac{\\vec{b}\\cdot\\vec{BA}}{\\vec{b}\\cdot\\vec{a}}\\cdot\\vec{a}<br>$$</p>\n<h2 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">line</span>&#123;</span><br><span class=\"line\">    pit P;</span><br><span class=\"line\">    vtr s;</span><br><span class=\"line\">    <span class=\"built_in\">line</span>(<span class=\"type\">const</span> pit&amp; _P, <span class=\"type\">const</span> vtr&amp; _s): <span class=\"built_in\">P</span>(_P), <span class=\"built_in\">s</span>(_s) &#123;s.<span class=\"built_in\">normalize</span>();&#125;</span><br><span class=\"line\">    <span class=\"function\">pit <span class=\"title\">getPoint</span><span class=\"params\">(temType t)</span> <span class=\"type\">const</span> </span>&#123;<span class=\"keyword\">return</span> P + s*t;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">ispParallel</span><span class=\"params\">(<span class=\"type\">const</span> line&amp; t)</span> <span class=\"type\">const</span></span>&#123;<span class=\"keyword\">return</span> s.<span class=\"built_in\">times</span>(t.s)==<span class=\"number\">0</span>;&#125; <span class=\"comment\">// 平行</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isCoincide</span><span class=\"params\">(<span class=\"type\">const</span> line&amp; t)</span> <span class=\"type\">const</span></span>&#123;<span class=\"keyword\">return</span> s.<span class=\"built_in\">times</span>(t.s)==<span class=\"number\">0</span> &amp;&amp; ((s.<span class=\"built_in\">times</span>(P-t.P)==<span class=\"number\">0</span>));&#125; <span class=\"comment\">// 重合</span></span><br><span class=\"line\">    <span class=\"function\">pit <span class=\"title\">intersection</span><span class=\"params\">(<span class=\"type\">const</span> line&amp; t)</span> <span class=\"type\">const</span></span>&#123; <span class=\"keyword\">return</span> P - s * (t.s.<span class=\"built_in\">times</span>(P-t.P) / t.s.<span class=\"built_in\">times</span>(s)); &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">line</span> line; <span class=\"comment\">// 直线</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">line</span> ray; <span class=\"comment\">// 射线</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"圆\"><a href=\"#圆\" class=\"headerlink\" title=\"圆\"></a>圆</h1><h2 id=\"已知-3\"><a href=\"#已知-3\" class=\"headerlink\" title=\"已知\"></a>已知</h2><p>圆心$O$，半径$r$</p>\n<h2 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">circle</span>&#123;</span><br><span class=\"line\">    pit O;</span><br><span class=\"line\">    temType r;</span><br><span class=\"line\">    <span class=\"built_in\">circle</span>(<span class=\"type\">const</span> pit&amp; _O, temType _r): <span class=\"built_in\">O</span>(_O), <span class=\"built_in\">r</span>(_r)&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">circle</span> cle;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"直线与圆\"><a href=\"#直线与圆\" class=\"headerlink\" title=\"直线与圆\"></a>直线与圆</h1><p><img src=\"/p/cg-template/image-20211207210954395.png\" alt=\"image-20211207210954395\"></p>\n<h2 id=\"已知-4\"><a href=\"#已知-4\" class=\"headerlink\" title=\"已知\"></a>已知</h2><p>直线：$P$点坐标$(P_x,P_y)$，$\\vec{s}&#x3D;(s_x,s_y)$</p>\n<p>圆：$O$点坐标$(O_x,O_y)$，圆的半径$r$</p>\n<h2 id=\"推导\"><a href=\"#推导\" class=\"headerlink\" title=\"推导\"></a>推导</h2><p>$$<br>|OE|&#x3D; \\frac{\\vec{s} \\times \\vec{PO}}{|\\vec{s}|} \\<br>|PE|&#x3D; \\frac{\\vec{s} \\cdot \\vec{PO}}{|\\vec{s}|}\\<br>|AE|&#x3D;|BE|&#x3D;\\sqrt{r^2-|OE|^2}\\<br>|PA|&#x3D;|PE|-|AE|\\<br>|PB|&#x3D;|PE|+|BE|\\<br>A&#x3D;P+\\frac{|PA|}{|\\vec{s}|}\\cdot\\vec{s}\\<br>B&#x3D;P+\\frac{|PB|}{|\\vec{s}|}\\cdot\\vec{s}<br>$$</p>\n<h2 id=\"代码-4\"><a href=\"#代码-4\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">seg <span class=\"title\">intersectionOfLineAndCircle</span><span class=\"params\">(<span class=\"type\">const</span> line&amp; p, <span class=\"type\">const</span> cle&amp; c)</span></span>&#123;</span><br><span class=\"line\">    vtr PO = c.O - p.P;</span><br><span class=\"line\">    temType OE = p.s.<span class=\"built_in\">times</span>(PO), PE = p.s.<span class=\"built_in\">times</span>(PO);</span><br><span class=\"line\">    temType tmp = <span class=\"built_in\">sqrt</span>(c.r*c.r-OE*OE);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;p.<span class=\"built_in\">getPoint</span>(PE-tmp), p.<span class=\"built_in\">getPoint</span>(PE+tmp)&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"凸包\"><a href=\"#凸包\" class=\"headerlink\" title=\"凸包\"></a>凸包</h1><h2 id=\"已知-5\"><a href=\"#已知-5\" class=\"headerlink\" title=\"已知\"></a>已知</h2><p>已知一个二维坐标图中每个顶点，求<strong>最小周长</strong>能够包含所有所有顶点的凸包</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>先将点双关键字排序，横坐标为第一关键字，纵坐标为第二关键字</p>\n<p>排序之后</p>\n<p><img src=\"/p/cg-template/image-20211212014228314.png\" alt=\"image-20211212014228314\"></p>\n<p>图片向量方向迭代方向</p>\n<p>之后维护单调单调栈，其中栈顶为$S_1$，栈顶第二元素为$S_2$，当前检查的点为$P$，由于凸包是不会出现右转的，所以当出现$\\vec{S_2S_1}\\times\\vec{S_1P}&lt;0$说明栈顶的元素不是最优凸包，弹出栈顶重复上一步。</p>\n<p><img src=\"/p/cg-template/image-20211212015343214.png\" alt=\"image-20211212015343214\"></p>\n<p><img src=\"/p/cg-template/image-20211212015443970.png\" alt=\"image-20211212015443970\"></p>\n<p><img src=\"/p/cg-template/image-20211212020720648.png\" alt=\"image-20211212020720648\"></p>\n<p>第一次循环迭代之后，会发现求完了下凸包先在需要倒转迭代方向，再次遍历</p>\n<p><img src=\"/p/cg-template/image-20211212020937318.png\" alt=\"image-20211212020937318\"></p>\n<p><img src=\"/p/cg-template/image-20211212021008797.png\" alt=\"image-20211212021008797\"></p>\n<p><img src=\"/p/cg-template/image-20211212021050303.png\" alt=\"image-20211212021050303\"></p>\n<p><img src=\"/p/cg-template/image-20211212021139971.png\" alt=\"image-20211212021139971\"></p>\n<p>第二次迭代完善上凸包，最终会形成一个最短周长的能够包含所有顶点的凸包</p>\n<p>注意：运行结果最后还会添加一次初始节点，那么周长就为$$\\sum_{i&#x3D;0}^{tp-1}|\\vec{p_ip_{i+1}}|$$</p>\n<h2 id=\"代码-5\"><a href=\"#代码-5\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e5</span><span class=\"number\">+10</span>;</span><br><span class=\"line\">pit p[N];</span><br><span class=\"line\"><span class=\"type\">int</span> stk[N&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> tp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(pit &amp;a, pit &amp;b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.x == b.x) <span class=\"keyword\">return</span> a.y &lt; b.y;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.x &lt; b.x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    debug;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    temType xt, yt;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">        cin &gt;&gt; xt &gt;&gt; yt;</span><br><span class=\"line\">        p[i] = <span class=\"built_in\">point</span>(xt, yt);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(p, p+n, cmp);</span><br><span class=\"line\">    stk[++tp] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (tp &gt;= <span class=\"number\">2</span> &amp;&amp; ((p[stk[tp]]-p[stk[tp<span class=\"number\">-1</span>]]).<span class=\"built_in\">times</span>(p[i]-p[stk[tp]]) &lt; <span class=\"number\">0</span>)) tp--;</span><br><span class=\"line\">        stk[++tp] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> tmp = tp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = n<span class=\"number\">-1</span>; i &gt;= <span class=\"number\">0</span>; --i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (tp &gt; tmp &amp;&amp; ((p[stk[tp]]-p[stk[tp<span class=\"number\">-1</span>]]).<span class=\"built_in\">times</span>(p[i]-p[stk[tp]]) &lt; <span class=\"number\">0</span>)) tp--;</span><br><span class=\"line\">        stk[++tp] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    temType ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= tp; ++i) &#123;</span><br><span class=\"line\">        ans += (p[stk[i]] - p[stk[i<span class=\"number\">-1</span>]]).<span class=\"built_in\">length</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%.2f&quot;</span>, ans);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","path":"/p/cg-template/","permalink":"https://blog.csome.cc/p/cg-template/","tags":[{"name":"计算几何","_id":"cuidnDHk7ne6I_XFYAh-ICzOh","slug":"计算几何","path":"tags/计算几何/","permalink":"https://blog.csome.cc/tags/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/","length":1},{"name":"算法","_id":"cuidp6H_Nqd0LjYnehXbkQiQm","slug":"算法","path":"tags/算法/","permalink":"https://blog.csome.cc/tags/%E7%AE%97%E6%B3%95/","length":1}],"categories":[],"prev":{"title":"[TQLCTF]Pwn Tunbelievable_write wp","date":"2022-02-21T02:08:13.000Z","slug":"TqlCTF-unbelievable-write","published":true,"updated":"2025-10-28T08:00:40.759Z","_id":"cuidka_o2XzstorH3qLryb5c-","layout":"post","photos":[],"excerpt":"","path":"/p/TqlCTF-unbelievable-write/","permalink":"https://blog.csome.cc/p/TqlCTF-unbelievable-write/","__post":true},"next":{"title":"微调Hexo主题Anatolo接入gitalk","date":"2021-12-14T00:58:54.000Z","slug":"Anatolo-pug-gitalk","published":true,"updated":"2025-10-28T08:00:40.753Z","_id":"cuidyoHwEDnsDf60ia1cCSiPR","layout":"post","photos":[],"excerpt":"","path":"/p/Anatolo-pug-gitalk/","permalink":"https://blog.csome.cc/p/Anatolo-pug-gitalk/","__post":true},"__post":true}